// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/zemnmez/tab/user/users.proto

package user

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	authz "github.com/zemnmez/tab/user/authz"
	history "github.com/zemnmez/tab/user/history"
	tab "github.com/zemnnmez/tab"
	protobuf "google/protobuf"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SpecialID int32

const (
	ROOT      SpecialID = 0
	ANONYMOUS SpecialID = 1
)

var SpecialID_name = map[int32]string{
	0: "ROOT",
	1: "ANONYMOUS",
}

var SpecialID_value = map[string]int32{
	"ROOT":      0,
	"ANONYMOUS": 1,
}

func (SpecialID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_07961ec751b9532f, []int{0}
}

type RegularID struct {
	*tab.ID `protobuf:"bytes,1,opt,name=id,proto3,embedded=id" json:"id,omitempty"`
}

func (m *RegularID) Reset()      { *m = RegularID{} }
func (*RegularID) ProtoMessage() {}
func (*RegularID) Descriptor() ([]byte, []int) {
	return fileDescriptor_07961ec751b9532f, []int{0}
}
func (m *RegularID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegularID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegularID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegularID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegularID.Merge(m, src)
}
func (m *RegularID) XXX_Size() int {
	return m.Size()
}
func (m *RegularID) XXX_DiscardUnknown() {
	xxx_messageInfo_RegularID.DiscardUnknown(m)
}

var xxx_messageInfo_RegularID proto.InternalMessageInfo

type ID struct {
	// Types that are valid to be assigned to ID:
	//	*ID_SpecialUserID
	//	*ID_RegularUserID
	ID isID_ID `protobuf_oneof:"ID"`
}

func (m *ID) Reset()      { *m = ID{} }
func (*ID) ProtoMessage() {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_07961ec751b9532f, []int{1}
}
func (m *ID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return m.Size()
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

type isID_ID interface {
	isID_ID()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
	Compare(interface{}) int
}

type ID_SpecialUserID struct {
	SpecialUserID SpecialID `protobuf:"varint,1,opt,name=specialUserID,proto3,enum=user.SpecialID,oneof"`
}
type ID_RegularUserID struct {
	RegularUserID *RegularID `protobuf:"bytes,2,opt,name=regularUserID,proto3,oneof"`
}

func (*ID_SpecialUserID) isID_ID() {}
func (*ID_RegularUserID) isID_ID() {}

func (m *ID) GetID() isID_ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ID) GetSpecialUserID() SpecialID {
	if x, ok := m.GetID().(*ID_SpecialUserID); ok {
		return x.SpecialUserID
	}
	return ROOT
}

func (m *ID) GetRegularUserID() *RegularID {
	if x, ok := m.GetID().(*ID_RegularUserID); ok {
		return x.RegularUserID
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ID) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ID_SpecialUserID)(nil),
		(*ID_RegularUserID)(nil),
	}
}

type Regular struct {
	Id             *ID                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Authorizations []authz.Authorization `protobuf:"varint,3,rep,packed,name=authorizations,proto3,enum=authz.Authorization" json:"authorizations,omitempty"`
	HistoryID      []*history.ID         `protobuf:"bytes,4,rep,name=historyID,proto3" json:"historyID,omitempty"`
	Created        *protobuf.Timestamp   `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
}

func (m *Regular) Reset()      { *m = Regular{} }
func (*Regular) ProtoMessage() {}
func (*Regular) Descriptor() ([]byte, []int) {
	return fileDescriptor_07961ec751b9532f, []int{2}
}
func (m *Regular) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Regular) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Regular.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Regular) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Regular.Merge(m, src)
}
func (m *Regular) XXX_Size() int {
	return m.Size()
}
func (m *Regular) XXX_DiscardUnknown() {
	xxx_messageInfo_Regular.DiscardUnknown(m)
}

var xxx_messageInfo_Regular proto.InternalMessageInfo

func (m *Regular) GetId() *ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Regular) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Regular) GetAuthorizations() []authz.Authorization {
	if m != nil {
		return m.Authorizations
	}
	return nil
}

func (m *Regular) GetHistoryID() []*history.ID {
	if m != nil {
		return m.HistoryID
	}
	return nil
}

func (m *Regular) GetCreated() *protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type Special struct {
	Id             SpecialID             `protobuf:"varint,1,opt,name=id,proto3,enum=user.SpecialID" json:"id,omitempty"`
	Authorizations []authz.Authorization `protobuf:"varint,2,rep,packed,name=authorizations,proto3,enum=authz.Authorization" json:"authorizations,omitempty"`
	HistoryID      []*history.ID         `protobuf:"bytes,3,rep,name=historyID,proto3" json:"historyID,omitempty"`
}

func (m *Special) Reset()      { *m = Special{} }
func (*Special) ProtoMessage() {}
func (*Special) Descriptor() ([]byte, []int) {
	return fileDescriptor_07961ec751b9532f, []int{3}
}
func (m *Special) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Special) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Special.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Special) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Special.Merge(m, src)
}
func (m *Special) XXX_Size() int {
	return m.Size()
}
func (m *Special) XXX_DiscardUnknown() {
	xxx_messageInfo_Special.DiscardUnknown(m)
}

var xxx_messageInfo_Special proto.InternalMessageInfo

func (m *Special) GetId() SpecialID {
	if m != nil {
		return m.Id
	}
	return ROOT
}

func (m *Special) GetAuthorizations() []authz.Authorization {
	if m != nil {
		return m.Authorizations
	}
	return nil
}

func (m *Special) GetHistoryID() []*history.ID {
	if m != nil {
		return m.HistoryID
	}
	return nil
}

func init() {
	proto.RegisterEnum("user.SpecialID", SpecialID_name, SpecialID_value)
	proto.RegisterType((*RegularID)(nil), "user.RegularID")
	proto.RegisterType((*ID)(nil), "user.ID")
	proto.RegisterType((*Regular)(nil), "user.Regular")
	proto.RegisterType((*Special)(nil), "user.Special")
}

func init() {
	proto.RegisterFile("github.com/zemnmez/tab/user/users.proto", fileDescriptor_07961ec751b9532f)
}

var fileDescriptor_07961ec751b9532f = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xb1, 0x6e, 0xd3, 0x40,
	0x18, 0xf6, 0x39, 0x86, 0xd4, 0x17, 0x35, 0x54, 0x27, 0x06, 0x2b, 0x88, 0x4b, 0x14, 0x21, 0x11,
	0x2a, 0x71, 0x16, 0x01, 0x89, 0x85, 0xa5, 0x91, 0x07, 0x3c, 0xd0, 0x48, 0x6e, 0x3b, 0x80, 0xc4,
	0x70, 0x4e, 0x0e, 0xc7, 0x52, 0x9c, 0x8b, 0xec, 0xf3, 0x40, 0xc4, 0xc0, 0x23, 0x20, 0xf1, 0x12,
	0x7d, 0x04, 0x1e, 0x81, 0x31, 0x13, 0xea, 0x84, 0x1a, 0x7b, 0x61, 0xec, 0x23, 0xa0, 0x3b, 0xdb,
	0x69, 0x42, 0x20, 0x03, 0xcb, 0xf9, 0xce, 0xff, 0xf7, 0xfd, 0xdf, 0xf7, 0x7f, 0xfa, 0xe1, 0xe3,
	0x20, 0x14, 0x93, 0xd4, 0x27, 0x23, 0x1e, 0xd9, 0x0b, 0x16, 0xcd, 0x22, 0xb6, 0xb0, 0x05, 0xf5,
	0xed, 0x34, 0x61, 0xb1, 0x3a, 0x12, 0x32, 0x8f, 0xb9, 0xe0, 0xc8, 0x90, 0x8f, 0x56, 0x3b, 0xe0,
	0x3c, 0x98, 0x32, 0x5b, 0xfd, 0xf3, 0xd3, 0x0f, 0xb6, 0x08, 0x23, 0x96, 0x08, 0x1a, 0xcd, 0x0b,
	0x58, 0xeb, 0xe9, 0x46, 0xbf, 0x80, 0x07, 0xfc, 0x16, 0x29, 0x5f, 0xea, 0xa1, 0x6e, 0x25, 0xbc,
	0xf3, 0x0f, 0x79, 0x41, 0xfd, 0xbf, 0x34, 0xdc, 0x31, 0x48, 0x53, 0x31, 0x59, 0x14, 0x67, 0x09,
	0x7f, 0xb6, 0x0f, 0x3e, 0x09, 0x13, 0xc1, 0xe3, 0x8f, 0xd5, 0xb7, 0xa0, 0x74, 0x8f, 0xa1, 0xe9,
	0xb1, 0x20, 0x9d, 0xd2, 0xd8, 0x75, 0xd0, 0x43, 0xa8, 0x87, 0x63, 0x0b, 0x74, 0x40, 0xaf, 0xd1,
	0xaf, 0x13, 0x69, 0xc3, 0x75, 0x06, 0xc6, 0xf2, 0x67, 0x1b, 0x78, 0x7a, 0x38, 0xee, 0x7e, 0x82,
	0xba, 0xeb, 0xa0, 0x97, 0xf0, 0x30, 0x99, 0xb3, 0x51, 0x48, 0xa7, 0x17, 0x09, 0x8b, 0x5d, 0x47,
	0xe1, 0x9b, 0xfd, 0x7b, 0x44, 0xaa, 0x90, 0xb3, 0xa2, 0xe4, 0x3a, 0xaf, 0x35, 0x6f, 0x1b, 0x27,
	0x89, 0x71, 0x21, 0x55, 0x12, 0x75, 0x25, 0x54, 0x12, 0xd7, 0x2e, 0x24, 0x71, 0x0b, 0x37, 0x30,
	0xa4, 0x6e, 0xf7, 0x07, 0x80, 0xf5, 0x12, 0x84, 0xac, 0x0d, 0xa3, 0x07, 0x05, 0xdf, 0x75, 0xa4,
	0x47, 0x84, 0xa0, 0x31, 0xa3, 0x11, 0x53, 0xbd, 0x4d, 0x4f, 0xdd, 0xd1, 0x2b, 0xd8, 0x94, 0x29,
	0xf1, 0x38, 0x5c, 0x50, 0x11, 0xf2, 0x59, 0x62, 0xd5, 0x3a, 0xb5, 0x5e, 0xb3, 0x7f, 0x9f, 0x14,
	0xe1, 0x9d, 0x6c, 0x16, 0xbd, 0x3f, 0xb0, 0xe8, 0x09, 0x34, 0xcb, 0xc8, 0x5c, 0xc7, 0x32, 0x3a,
	0xb5, 0x5e, 0xa3, 0xdf, 0x20, 0x55, 0x88, 0xae, 0xe3, 0xdd, 0x56, 0xd1, 0x0b, 0x58, 0x1f, 0xc5,
	0x8c, 0x0a, 0x36, 0xb6, 0xee, 0x28, 0x6f, 0x2d, 0x52, 0xac, 0x0c, 0xa9, 0x16, 0x81, 0x9c, 0x57,
	0x2b, 0xe3, 0x55, 0xd0, 0xee, 0x57, 0x00, 0xeb, 0x65, 0x6c, 0xa8, 0xbd, 0x1e, 0x6c, 0x37, 0x51,
	0x35, 0xdf, 0xee, 0x2c, 0xfa, 0xff, 0xce, 0x52, 0xdb, 0x37, 0xcb, 0xf1, 0x23, 0x68, 0xae, 0x95,
	0xd1, 0x01, 0x34, 0xbc, 0xe1, 0xf0, 0xfc, 0x48, 0x43, 0x87, 0xd0, 0x3c, 0x39, 0x1d, 0x9e, 0xbe,
	0x7d, 0x33, 0xbc, 0x38, 0x3b, 0x02, 0x83, 0xf7, 0xcb, 0x15, 0xd6, 0xae, 0x56, 0x58, 0xbb, 0x5e,
	0x61, 0x70, 0xb3, 0xc2, 0xe0, 0x73, 0x86, 0xc1, 0x65, 0x86, 0xc1, 0xb7, 0x0c, 0x83, 0xef, 0x19,
	0x06, 0xcb, 0x0c, 0x83, 0xeb, 0x0c, 0x83, 0x5f, 0x19, 0xd6, 0x6e, 0x32, 0x0c, 0xbe, 0xe4, 0x58,
	0xbb, 0xcc, 0x31, 0x58, 0xe6, 0x58, 0xbb, 0xca, 0xb1, 0xf6, 0xee, 0xc1, 0x9e, 0x9d, 0xf5, 0xef,
	0xaa, 0xdc, 0x9e, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xf7, 0xe0, 0x29, 0xa9, 0x03, 0x00,
	0x00,
}

func (this *RegularID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*RegularID)
	if !ok {
		that2, ok := that.(RegularID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.ID.Compare(that1.ID); c != 0 {
		return c
	}
	return 0
}
func (this *ID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ID)
	if !ok {
		that2, ok := that.(ID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if that1.ID == nil {
		if this.ID != nil {
			return 1
		}
	} else if this.ID == nil {
		return -1
	} else {
		thisType := -1
		switch this.ID.(type) {
		case *ID_SpecialUserID:
			thisType = 0
		case *ID_RegularUserID:
			thisType = 1
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", this.ID))
		}
		that1Type := -1
		switch that1.ID.(type) {
		case *ID_SpecialUserID:
			that1Type = 0
		case *ID_RegularUserID:
			that1Type = 1
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", that1.ID))
		}
		if thisType == that1Type {
			if c := this.ID.Compare(that1.ID); c != 0 {
				return c
			}
		} else if thisType < that1Type {
			return -1
		} else if thisType > that1Type {
			return 1
		}
	}
	return 0
}
func (this *ID_SpecialUserID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ID_SpecialUserID)
	if !ok {
		that2, ok := that.(ID_SpecialUserID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.SpecialUserID != that1.SpecialUserID {
		if this.SpecialUserID < that1.SpecialUserID {
			return -1
		}
		return 1
	}
	return 0
}
func (this *ID_RegularUserID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ID_RegularUserID)
	if !ok {
		that2, ok := that.(ID_RegularUserID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.RegularUserID.Compare(that1.RegularUserID); c != 0 {
		return c
	}
	return 0
}
func (this *Regular) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*Regular)
	if !ok {
		that2, ok := that.(Regular)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Id.Compare(that1.Id); c != 0 {
		return c
	}
	if this.Name != that1.Name {
		if this.Name < that1.Name {
			return -1
		}
		return 1
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		if len(this.Authorizations) < len(that1.Authorizations) {
			return -1
		}
		return 1
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			if this.Authorizations[i] < that1.Authorizations[i] {
				return -1
			}
			return 1
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		if len(this.HistoryID) < len(that1.HistoryID) {
			return -1
		}
		return 1
	}
	for i := range this.HistoryID {
		if c := this.HistoryID[i].Compare(that1.HistoryID[i]); c != 0 {
			return c
		}
	}
	if c := this.Created.Compare(that1.Created); c != 0 {
		return c
	}
	return 0
}
func (this *Special) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*Special)
	if !ok {
		that2, ok := that.(Special)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		if len(this.Authorizations) < len(that1.Authorizations) {
			return -1
		}
		return 1
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			if this.Authorizations[i] < that1.Authorizations[i] {
				return -1
			}
			return 1
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		if len(this.HistoryID) < len(that1.HistoryID) {
			return -1
		}
		return 1
	}
	for i := range this.HistoryID {
		if c := this.HistoryID[i].Compare(that1.HistoryID[i]); c != 0 {
			return c
		}
	}
	return 0
}
func (x SpecialID) String() string {
	s, ok := SpecialID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RegularID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RegularID)
	if !ok {
		that2, ok := that.(RegularID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RegularID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RegularID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RegularID but is not nil && this == nil")
	}
	if !this.ID.Equal(that1.ID) {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	return nil
}
func (this *RegularID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegularID)
	if !ok {
		that2, ok := that.(RegularID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *ID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ID)
	if !ok {
		that2, ok := that.(ID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ID but is not nil && this == nil")
	}
	if that1.ID == nil {
		if this.ID != nil {
			return fmt.Errorf("this.ID != nil && that1.ID == nil")
		}
	} else if this.ID == nil {
		return fmt.Errorf("this.ID == nil && that1.ID != nil")
	} else if err := this.ID.VerboseEqual(that1.ID); err != nil {
		return err
	}
	return nil
}
func (this *ID_SpecialUserID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ID_SpecialUserID)
	if !ok {
		that2, ok := that.(ID_SpecialUserID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ID_SpecialUserID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ID_SpecialUserID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ID_SpecialUserID but is not nil && this == nil")
	}
	if this.SpecialUserID != that1.SpecialUserID {
		return fmt.Errorf("SpecialUserID this(%v) Not Equal that(%v)", this.SpecialUserID, that1.SpecialUserID)
	}
	return nil
}
func (this *ID_RegularUserID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ID_RegularUserID)
	if !ok {
		that2, ok := that.(ID_RegularUserID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ID_RegularUserID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ID_RegularUserID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ID_RegularUserID but is not nil && this == nil")
	}
	if !this.RegularUserID.Equal(that1.RegularUserID) {
		return fmt.Errorf("RegularUserID this(%v) Not Equal that(%v)", this.RegularUserID, that1.RegularUserID)
	}
	return nil
}
func (this *ID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ID)
	if !ok {
		that2, ok := that.(ID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ID == nil {
		if this.ID != nil {
			return false
		}
	} else if this.ID == nil {
		return false
	} else if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *ID_SpecialUserID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ID_SpecialUserID)
	if !ok {
		that2, ok := that.(ID_SpecialUserID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecialUserID != that1.SpecialUserID {
		return false
	}
	return true
}
func (this *ID_RegularUserID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ID_RegularUserID)
	if !ok {
		that2, ok := that.(ID_RegularUserID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegularUserID.Equal(that1.RegularUserID) {
		return false
	}
	return true
}
func (this *Regular) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Regular)
	if !ok {
		that2, ok := that.(Regular)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Regular")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Regular but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Regular but is not nil && this == nil")
	}
	if !this.Id.Equal(that1.Id) {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		return fmt.Errorf("Authorizations this(%v) Not Equal that(%v)", len(this.Authorizations), len(that1.Authorizations))
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			return fmt.Errorf("Authorizations this[%v](%v) Not Equal that[%v](%v)", i, this.Authorizations[i], i, that1.Authorizations[i])
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		return fmt.Errorf("HistoryID this(%v) Not Equal that(%v)", len(this.HistoryID), len(that1.HistoryID))
	}
	for i := range this.HistoryID {
		if !this.HistoryID[i].Equal(that1.HistoryID[i]) {
			return fmt.Errorf("HistoryID this[%v](%v) Not Equal that[%v](%v)", i, this.HistoryID[i], i, that1.HistoryID[i])
		}
	}
	if !this.Created.Equal(that1.Created) {
		return fmt.Errorf("Created this(%v) Not Equal that(%v)", this.Created, that1.Created)
	}
	return nil
}
func (this *Regular) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Regular)
	if !ok {
		that2, ok := that.(Regular)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		return false
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			return false
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		return false
	}
	for i := range this.HistoryID {
		if !this.HistoryID[i].Equal(that1.HistoryID[i]) {
			return false
		}
	}
	if !this.Created.Equal(that1.Created) {
		return false
	}
	return true
}
func (this *Special) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Special)
	if !ok {
		that2, ok := that.(Special)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Special")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Special but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Special but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		return fmt.Errorf("Authorizations this(%v) Not Equal that(%v)", len(this.Authorizations), len(that1.Authorizations))
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			return fmt.Errorf("Authorizations this[%v](%v) Not Equal that[%v](%v)", i, this.Authorizations[i], i, that1.Authorizations[i])
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		return fmt.Errorf("HistoryID this(%v) Not Equal that(%v)", len(this.HistoryID), len(that1.HistoryID))
	}
	for i := range this.HistoryID {
		if !this.HistoryID[i].Equal(that1.HistoryID[i]) {
			return fmt.Errorf("HistoryID this[%v](%v) Not Equal that[%v](%v)", i, this.HistoryID[i], i, that1.HistoryID[i])
		}
	}
	return nil
}
func (this *Special) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Special)
	if !ok {
		that2, ok := that.(Special)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		return false
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			return false
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		return false
	}
	for i := range this.HistoryID {
		if !this.HistoryID[i].Equal(that1.HistoryID[i]) {
			return false
		}
	}
	return true
}
func (this *RegularID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user.RegularID{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&user.ID{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ID_SpecialUserID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user.ID_SpecialUserID{` +
		`SpecialUserID:` + fmt.Sprintf("%#v", this.SpecialUserID) + `}`}, ", ")
	return s
}
func (this *ID_RegularUserID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user.ID_RegularUserID{` +
		`RegularUserID:` + fmt.Sprintf("%#v", this.RegularUserID) + `}`}, ", ")
	return s
}
func (this *Regular) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&user.Regular{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Authorizations: "+fmt.Sprintf("%#v", this.Authorizations)+",\n")
	if this.HistoryID != nil {
		s = append(s, "HistoryID: "+fmt.Sprintf("%#v", this.HistoryID)+",\n")
	}
	if this.Created != nil {
		s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Special) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&user.Special{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Authorizations: "+fmt.Sprintf("%#v", this.Authorizations)+",\n")
	if this.HistoryID != nil {
		s = append(s, "HistoryID: "+fmt.Sprintf("%#v", this.HistoryID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUsers(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RegularID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegularID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegularID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size := m.ID.Size()
			i -= size
			if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ID_SpecialUserID) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *ID_SpecialUserID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintUsers(dAtA, i, uint64(m.SpecialUserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ID_RegularUserID) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *ID_RegularUserID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegularUserID != nil {
		{
			size, err := m.RegularUserID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Regular) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Regular) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Regular) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Created != nil {
		{
			size, err := m.Created.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HistoryID) > 0 {
		for iNdEx := len(m.HistoryID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoryID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Authorizations) > 0 {
		dAtA5 := make([]byte, len(m.Authorizations)*10)
		var j4 int
		for _, num := range m.Authorizations {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintUsers(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Special) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Special) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Special) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HistoryID) > 0 {
		for iNdEx := len(m.HistoryID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoryID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Authorizations) > 0 {
		dAtA8 := make([]byte, len(m.Authorizations)*10)
		var j7 int
		for _, num := range m.Authorizations {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintUsers(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUsers(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegularID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *ID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += m.ID.Size()
	}
	return n
}

func (m *ID_SpecialUserID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovUsers(uint64(m.SpecialUserID))
	return n
}
func (m *ID_RegularUserID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegularUserID != nil {
		l = m.RegularUserID.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}
func (m *Regular) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.Authorizations) > 0 {
		l = 0
		for _, e := range m.Authorizations {
			l += sovUsers(uint64(e))
		}
		n += 1 + sovUsers(uint64(l)) + l
	}
	if len(m.HistoryID) > 0 {
		for _, e := range m.HistoryID {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *Special) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUsers(uint64(m.Id))
	}
	if len(m.Authorizations) > 0 {
		l = 0
		for _, e := range m.Authorizations {
			l += sovUsers(uint64(e))
		}
		n += 1 + sovUsers(uint64(l)) + l
	}
	if len(m.HistoryID) > 0 {
		for _, e := range m.HistoryID {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func sovUsers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsers(x uint64) (n int) {
	return sovUsers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegularID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegularID{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "ID", "tab.ID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ID{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ID_SpecialUserID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ID_SpecialUserID{`,
		`SpecialUserID:` + fmt.Sprintf("%v", this.SpecialUserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ID_RegularUserID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ID_RegularUserID{`,
		`RegularUserID:` + strings.Replace(fmt.Sprintf("%v", this.RegularUserID), "RegularID", "RegularID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Regular) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistoryID := "[]*ID{"
	for _, f := range this.HistoryID {
		repeatedStringForHistoryID += strings.Replace(fmt.Sprintf("%v", f), "ID", "history.ID", 1) + ","
	}
	repeatedStringForHistoryID += "}"
	s := strings.Join([]string{`&Regular{`,
		`Id:` + strings.Replace(this.Id.String(), "ID", "ID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Authorizations:` + fmt.Sprintf("%v", this.Authorizations) + `,`,
		`HistoryID:` + repeatedStringForHistoryID + `,`,
		`Created:` + strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "protobuf.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Special) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistoryID := "[]*ID{"
	for _, f := range this.HistoryID {
		repeatedStringForHistoryID += strings.Replace(fmt.Sprintf("%v", f), "ID", "history.ID", 1) + ","
	}
	repeatedStringForHistoryID += "}"
	s := strings.Join([]string{`&Special{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Authorizations:` + fmt.Sprintf("%v", this.Authorizations) + `,`,
		`HistoryID:` + repeatedStringForHistoryID + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUsers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegularID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegularID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegularID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &tab.ID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialUserID", wireType)
			}
			var v SpecialID
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SpecialID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &ID_SpecialUserID{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegularUserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegularID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ID = &ID_RegularUserID{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Regular) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Regular: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Regular: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v authz.Authorization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsers
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= authz.Authorization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Authorizations = append(m.Authorizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsers
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUsers
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUsers
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Authorizations) == 0 {
					m.Authorizations = make([]authz.Authorization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v authz.Authorization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsers
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= authz.Authorization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Authorizations = append(m.Authorizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorizations", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryID = append(m.HistoryID, &history.ID{})
			if err := m.HistoryID[len(m.HistoryID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &protobuf.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Special) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Special: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Special: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= SpecialID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v authz.Authorization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsers
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= authz.Authorization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Authorizations = append(m.Authorizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsers
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUsers
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUsers
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Authorizations) == 0 {
					m.Authorizations = make([]authz.Authorization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v authz.Authorization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsers
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= authz.Authorization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Authorizations = append(m.Authorizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorizations", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryID = append(m.HistoryID, &history.ID{})
			if err := m.HistoryID[len(m.HistoryID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsers
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthUsers
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUsers
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUsers(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthUsers
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUsers = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsers   = fmt.Errorf("proto: integer overflow")
)
