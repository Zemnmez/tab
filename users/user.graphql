# USERS
# This module deals with users existing!

# RegularUserID represents the ID of a regular user i.e. a user that is not ANONYMOUS or ROOT.
scalar RegularUserID
    @goModel(model: "github.com/zemnmez/tab/users.RegularID")

# Special users are singleton users with special functionality
enum SpecialUserID {
    # The root user is the ultimate source of all authorization grants.
    ROOT

    # The Anonymous user is the user unauthenticated users are said to be 'logged into'.
    ANONYMOUS
}

interface User @goModel(model: "github.com/zemnmez/tab/users.User") {
    Name: String!
}

type Self implements User {
    Name: String!
}

# RegularUsers are the normal rank and file users!
type RegularUser implements User @goModel(model: "github.com/zemnmez/tab/users.Regular") {
    # ID is the unique identifier of this user. It may be a SpecialUserID
    # if this is a special user, like root.
    ID: RegularUserID!

    # Name is the name of this user.
    Name: String!
}

# SpecialUsers are special singleton accounts like ANONYMOUS and ROOT
type SpecialUser implements User @goModel(model: "github.com/zemnmez/tab/users.Special") {
    ID: SpecialUserID!
    Name: String!
}

# UserInput is the values a User can be created with
input UserInput {
    Name: String!
}

# The root user is the ultimate source of all authorization grants.
input RootUser {
    ID: SpecialUserID! = ADMIN
    Name: String! = "Root"
}

# The anonymous user is the user unauthenticated users are said to be logged into.
input AnonymousUser {
    ID: SpecialUserID! = ANONYMOUS
    Name: String! = "Anonymous"
}

extend type Query {
    User: UserQuery
}

type UserQuery {
    # Self returns the currently logged in user
    Self: Self!

    Special(id: SpecialUserID): SpecialUser @authorized(to: [VIEW_USERS])
    Regular(id: RegularUserID): RegularUser @authorized(to: [VIEW_USERS])
}

extend enum Authorization {
    # modify other users profiles
    MODIFY_OTHER_USERS

    # modify root / anonymous
    MODIFY_SPECIAL_USERS

    # edit the details of my own user (anonymous user cannot do this)
    MODIFY_SELF
}

extend type Mutation {
    # User returns a UserMutator which can be used to modify
    # a given user id
    User: UserMutation
}

type UserMutation {
    Self: UserMutator! @authorized(to: [MODIFY_SELF])
    Special(id: SpecialUserID): UserMutator @authorized(to: [MODIFY_SPECIAL_USERS])
    Regular(id: RegularUserID): UserMutator @authorized(to: [MODIFY_OTHER_USERS])
}

interface UserMutator {
    Modify(with: UserInput!): User!
}