// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/zemnmez/tab/types/types.proto

package types

import (
	bytes "bytes"
	encoding "encoding"
	encoding_json "encoding/json"
	fmt "fmt"
	github_com_99designs_gqlgen_graphql "github.com/99designs/gqlgen/graphql"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// MarshalJSON implements json.Marshaler
func (this ID) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *ID) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this ID) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *ID) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this ID) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (ID) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`ID`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this ID) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *ID) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *ID) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(ID)

// MarshalJSON implements json.Marshaler
func (this AuthorizationGrantID) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *AuthorizationGrantID) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this AuthorizationGrantID) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *AuthorizationGrantID) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this AuthorizationGrantID) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (AuthorizationGrantID) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`AuthorizationGrantID`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this AuthorizationGrantID) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *AuthorizationGrantID) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *AuthorizationGrantID) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(AuthorizationGrantID)

// MarshalJSON implements json.Marshaler
func (this AuthorizationGrant) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *AuthorizationGrant) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this AuthorizationGrant) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *AuthorizationGrant) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this AuthorizationGrant) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (AuthorizationGrant) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`AuthorizationGrant`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this AuthorizationGrant) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *AuthorizationGrant) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *AuthorizationGrant) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(AuthorizationGrant)

// MarshalJSON implements json.Marshaler
func (this HistoryID) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *HistoryID) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this HistoryID) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *HistoryID) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this HistoryID) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (HistoryID) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`HistoryID`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this HistoryID) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *HistoryID) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *HistoryID) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(HistoryID)

// MarshalJSON implements json.Marshaler
func (this HistoryItem) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *HistoryItem) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this HistoryItem) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *HistoryItem) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this HistoryItem) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (HistoryItem) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`HistoryItem`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this HistoryItem) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *HistoryItem) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *HistoryItem) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(HistoryItem)

// MarshalJSON implements json.Marshaler
func (this SingletonUser) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *SingletonUser) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this SingletonUser) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *SingletonUser) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this SingletonUser) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (SingletonUser) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`SingletonUser`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this SingletonUser) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *SingletonUser) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *SingletonUser) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(SingletonUser)

// MarshalJSON implements json.Marshaler
func (this UserID) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *UserID) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this UserID) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *UserID) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this UserID) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (UserID) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`UserID`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this UserID) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *UserID) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *UserID) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(UserID)

// MarshalJSON implements json.Marshaler
func (this User) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *User) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this User) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *User) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this User) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (User) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`User`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this User) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *User) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *User) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(User)

// MarshalJSON implements json.Marshaler
func (this ItemID) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *ItemID) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this ItemID) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *ItemID) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this ItemID) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (ItemID) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`ItemID`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this ItemID) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *ItemID) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *ItemID) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(ItemID)

// MarshalJSON implements json.Marshaler
func (this Item) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *Item) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this Item) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *Item) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this Item) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (Item) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`Item`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this Item) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *Item) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *Item) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(Item)

// MarshalJSON implements json.Marshaler
func (this OIDCProviderID) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *OIDCProviderID) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this OIDCProviderID) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *OIDCProviderID) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this OIDCProviderID) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (OIDCProviderID) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`OIDCProviderID`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this OIDCProviderID) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *OIDCProviderID) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *OIDCProviderID) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(OIDCProviderID)

// MarshalJSON implements json.Marshaler
func (this OIDCProvider) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *OIDCProvider) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this OIDCProvider) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *OIDCProvider) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this OIDCProvider) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (OIDCProvider) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`OIDCProvider`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this OIDCProvider) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *OIDCProvider) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *OIDCProvider) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(OIDCProvider)

// MarshalJSON implements json.Marshaler
func (this AuthorizationTokenID) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *AuthorizationTokenID) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this AuthorizationTokenID) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *AuthorizationTokenID) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this AuthorizationTokenID) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (AuthorizationTokenID) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`AuthorizationTokenID`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this AuthorizationTokenID) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *AuthorizationTokenID) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *AuthorizationTokenID) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(AuthorizationTokenID)

// MarshalJSON implements json.Marshaler
func (this AuthorizationTokenInfo) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *AuthorizationTokenInfo) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this AuthorizationTokenInfo) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *AuthorizationTokenInfo) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this AuthorizationTokenInfo) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (AuthorizationTokenInfo) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`AuthorizationTokenInfo`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this AuthorizationTokenInfo) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *AuthorizationTokenInfo) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *AuthorizationTokenInfo) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(AuthorizationTokenInfo)

// MarshalJSON implements json.Marshaler
func (this LinkID) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *LinkID) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this LinkID) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *LinkID) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this LinkID) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (LinkID) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`LinkID`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this LinkID) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *LinkID) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *LinkID) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(LinkID)

// MarshalJSON implements json.Marshaler
func (this Link) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *Link) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this Link) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *Link) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this Link) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (Link) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`Link`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this Link) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *Link) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *Link) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(Link)

// MarshalJSON implements json.Marshaler
func (this Key) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *Key) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this Key) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *Key) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this Key) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (Key) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`Key`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this Key) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *Key) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *Key) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(Key)

// MarshalJSON implements json.Marshaler
func (this TableIDValue) MarshalJSON() (json []byte, err error) {
	var b bytes.Buffer
	if err = _jsonMarshaler.Marshal(&b, &this); err != nil {
		return
	}
	json = b.Bytes()
	return
}

// UnmarshalJSON implements json.Unmarshaler
func (this *TableIDValue) UnmarshalJSON(json []byte) (err error) {
	return _jsonUnmarshaler.Unmarshal(bytes.NewReader(json), this)
}

// MarshalGQL implements graphql.Marshaler
func (this TableIDValue) MarshalGQL(w io.Writer) {
	var err error
	if err = _jsonMarshaler.Marshal(w, &this); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *TableIDValue) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

// WriteTo implements io.WriterTo.
// WriteTo writes this structure as protobufs
func (this TableIDValue) WriteTo(w io.Writer) (n int64, err error) {
	bt, err := this.MarshalBinary()
	if err != nil {
		return
	}
	nint, err := w.Write(bt)
	n = int64(nint)
	return
}

// Read implements io.Reader. It only exists
// as a dummy for io.Copy. It will error if called.
// use .WriteTo instead.
func (TableIDValue) Read(b []byte) (n int, err error) {
	return 0, ErrUnreadable{`TableIDValue`}
}

// ReadFrom implements io.ReaderFrom.
// ReadFrom expects the structure as protobufs,
// and assumes the protobuf message should consume
// the entire reader.
func (this TableIDValue) ReadFrom(r io.Reader) (n int64, err error) {
	bt, err := io_ioutil.ReadAll(r)
	n = int64(len(bt))
	if err != nil {
		return
	}
	err = this.UnmarshalBinary(bt)
	return
}

// MarshalBinary implements encoding.BinaryMarshaler
func (this *TableIDValue) MarshalBinary() ([]byte, error) {
	return this.Marshal()
}

// UnmarshalBinary implements encoding.BinaryUnmarshaler
func (this *TableIDValue) UnmarshalBinary(b []byte) error {
	return this.Unmarshal(b)
}

var _ interface {
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	io.WriterTo
	io.ReaderFrom
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(TableIDValue)

// MarshalJSON implements json.Marshaler
func (this Authorization) MarshalJSON() (json []byte, err error) {
	if _, ok := Authorization_name[int32(this)]; !ok {
		return nil, ErrInvalidEnum{EnumName: "Authorization", Value: this}
	}
	return encoding_json.Marshal(this.String())
}

// UnmarshalJSON implements json.Unmarshaler
func (this *Authorization) UnmarshalJSON(json []byte) (err error) {
	var text string
	if err = encoding_json.Unmarshal(json, &text); err != nil {
		return
	}
	var ok bool
	this32 := (*int32)(this)
	if *this32, ok = Authorization_value[text]; !ok {
		return ErrInvalidEnum{EnumName: "Authorization", Value: this}
	}
	return
}

// MarshalGQL implements graphql.Marshaler
func (this Authorization) MarshalGQL(w io.Writer) {
	var err error
	b, err := this.MarshalJSON()
	if err != nil {
		panic(err)
	}
	if _, err = w.Write(b); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *Authorization) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

var _ interface {
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(Authorization)

// MarshalJSON implements json.Marshaler
func (this SingletonUserType) MarshalJSON() (json []byte, err error) {
	if _, ok := SingletonUserType_name[int32(this)]; !ok {
		return nil, ErrInvalidEnum{EnumName: "SingletonUserType", Value: this}
	}
	return encoding_json.Marshal(this.String())
}

// UnmarshalJSON implements json.Unmarshaler
func (this *SingletonUserType) UnmarshalJSON(json []byte) (err error) {
	var text string
	if err = encoding_json.Unmarshal(json, &text); err != nil {
		return
	}
	var ok bool
	this32 := (*int32)(this)
	if *this32, ok = SingletonUserType_value[text]; !ok {
		return ErrInvalidEnum{EnumName: "SingletonUserType", Value: this}
	}
	return
}

// MarshalGQL implements graphql.Marshaler
func (this SingletonUserType) MarshalGQL(w io.Writer) {
	var err error
	b, err := this.MarshalJSON()
	if err != nil {
		panic(err)
	}
	if _, err = w.Write(b); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *SingletonUserType) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

var _ interface {
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(SingletonUserType)

// MarshalJSON implements json.Marshaler
func (this TableID) MarshalJSON() (json []byte, err error) {
	if _, ok := TableID_name[int32(this)]; !ok {
		return nil, ErrInvalidEnum{EnumName: "TableID", Value: this}
	}
	return encoding_json.Marshal(this.String())
}

// UnmarshalJSON implements json.Unmarshaler
func (this *TableID) UnmarshalJSON(json []byte) (err error) {
	var text string
	if err = encoding_json.Unmarshal(json, &text); err != nil {
		return
	}
	var ok bool
	this32 := (*int32)(this)
	if *this32, ok = TableID_value[text]; !ok {
		return ErrInvalidEnum{EnumName: "TableID", Value: this}
	}
	return
}

// MarshalGQL implements graphql.Marshaler
func (this TableID) MarshalGQL(w io.Writer) {
	var err error
	b, err := this.MarshalJSON()
	if err != nil {
		panic(err)
	}
	if _, err = w.Write(b); err != nil {
		panic(err)
	}
}

// UnmarshalGQL implements graphql.Unmarshaler
func (this *TableID) UnmarshalGQL(v interface{}) (err error) {
	var newJSON []byte
	if newJSON, err = encoding_json.Marshal(v); err != nil {
		return
	}
	return this.UnmarshalJSON(newJSON)
}

var _ interface {
	encoding_json.Marshaler
	encoding_json.Unmarshaler
	github_com_99designs_gqlgen_graphql.Unmarshaler
	github_com_99designs_gqlgen_graphql.Marshaler
} = new(TableID)

//these can be set via init() to customise the (un)marshaling
var (
	_jsonMarshaler   github_com_gogo_protobuf_jsonpb.Marshaler
	_jsonUnmarshaler github_com_gogo_protobuf_jsonpb.Unmarshaler
)

type ErrUnreadable struct{ Name string }

func (e ErrUnreadable) Error() string {
	return fmt.Sprintf("%s can only be read via .WriteTo", e.Name)
}

type ErrInvalidEnum struct {
	EnumName string
	Value    interface{}
}

func (i ErrInvalidEnum) Error() string { return fmt.Sprintf("invalid %s(%s)", i.EnumName, i.Value) }
