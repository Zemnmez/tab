# USERS
# This module deals with users existing!

# RegularUserID represents the ID of a regular user i.e. a user that is not ANONYMOUS or ROOT.
scalar UserID @goModel(model: "github.com/zemnmez/tab/types.UserID")

interface User @goModel(model: "github.com/zemnmez/tab/gql/resolver.User") {
    ID: UserID!
    Name: String!
}

# RegularUsers are the normal rank and file users!
type RegularUser implements User @goModel(model: "github.com/zemnmez/tab/gql/resolver.RegularUser") {
    ID: UserID!

    Name: String!

}

# UserInput is the values a User can be created with
input UserInput {
    Name: String!
}

extend type Query {
    User: UserQuery
}

type UserQuery @goModel(model: "github.com/zemnmez/tab/gql/resolver.UserQuery") {
    # Self returns the currently logged in user
    Self: Self!

    ByID(id: UserID): User @authorized(to: [VIEW_USERS])
    ByName(name: String!): User @authorized(to: [VIEW_USERS])
}

type UserMutation @goModel(model: "github.com/zemnmez/tab/gql/resolver.UserMutation") {
    Self: SelfMutation!
}

type SelfMutation @goModel(model: "github.com/zemnmez/tab/gql/resolver.SelfMutation") {
    _: Boolean!
}

extend enum Authorization {
    # modify other users profiles
    MODIFY_OTHER_USERS

    # edit the details of my own user (anonymous user cannot do this)
    MODIFY_SELF
}

extend type Mutation {
    # User returns a UserMutator which can be used to modify
    # a given user id
    User: UserMutation
}

type RegularUserMutator implements UserMutator {
    Modify(with: UserInput!): User! @authorized(to: [MODIFY_OTHER_USERS])
}

interface UserMutator @goModel(model: "github.com/zemnmez/tab/gql/resolver.UserMutator") {
    Modify(with: UserInput!): User!
}