// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/zemnmez/tab/types/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Authorization int32

const (
	VIEW_USERS               Authorization = 0
	MODIFY_VALID_AUTH        Authorization = 1
	ADD_ITEMS                Authorization = 2
	MODIFY_OTHER_USERS       Authorization = 3
	MODIFY_SPECIAL_USERS     Authorization = 4
	MODIFY_SELF              Authorization = 5
	VIEW_OTHER_USERS_HISTORY Authorization = 6
	VIEW_OWN_HISTORY         Authorization = 7
)

var Authorization_name = map[int32]string{
	0: "VIEW_USERS",
	1: "MODIFY_VALID_AUTH",
	2: "ADD_ITEMS",
	3: "MODIFY_OTHER_USERS",
	4: "MODIFY_SPECIAL_USERS",
	5: "MODIFY_SELF",
	6: "VIEW_OTHER_USERS_HISTORY",
	7: "VIEW_OWN_HISTORY",
}

var Authorization_value = map[string]int32{
	"VIEW_USERS":               0,
	"MODIFY_VALID_AUTH":        1,
	"ADD_ITEMS":                2,
	"MODIFY_OTHER_USERS":       3,
	"MODIFY_SPECIAL_USERS":     4,
	"MODIFY_SELF":              5,
	"VIEW_OTHER_USERS_HISTORY": 6,
	"VIEW_OWN_HISTORY":         7,
}

func (Authorization) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{0}
}

type SpecialUserID int32

const (
	ROOT      SpecialUserID = 0
	ANONYMOUS SpecialUserID = 1
)

var SpecialUserID_name = map[int32]string{
	0: "ROOT",
	1: "ANONYMOUS",
}

var SpecialUserID_value = map[string]int32{
	"ROOT":      0,
	"ANONYMOUS": 1,
}

func (SpecialUserID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{1}
}

type ID struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ID) Reset()      { *m = ID{} }
func (*ID) ProtoMessage() {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{0}
}
func (m *ID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return m.Size()
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AuthorizationGrant struct {
	From *UserID         `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Of   []Authorization `protobuf:"varint,2,rep,packed,name=of,proto3,enum=types.Authorization" json:"of,omitempty"`
}

func (m *AuthorizationGrant) Reset()      { *m = AuthorizationGrant{} }
func (*AuthorizationGrant) ProtoMessage() {}
func (*AuthorizationGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{1}
}
func (m *AuthorizationGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizationGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizationGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizationGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationGrant.Merge(m, src)
}
func (m *AuthorizationGrant) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizationGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationGrant.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationGrant proto.InternalMessageInfo

func (m *AuthorizationGrant) GetFrom() *UserID {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *AuthorizationGrant) GetOf() []Authorization {
	if m != nil {
		return m.Of
	}
	return nil
}

type HistoryID struct {
	*ID `protobuf:"bytes,1,opt,name=id,proto3,embedded=id" json:"id,omitempty"`
}

func (m *HistoryID) Reset()      { *m = HistoryID{} }
func (*HistoryID) ProtoMessage() {}
func (*HistoryID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{2}
}
func (m *HistoryID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryID.Merge(m, src)
}
func (m *HistoryID) XXX_Size() int {
	return m.Size()
}
func (m *HistoryID) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryID.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryID proto.InternalMessageInfo

type RegularUserID struct {
	*ID `protobuf:"bytes,1,opt,name=id,proto3,embedded=id" json:"id,omitempty"`
}

func (m *RegularUserID) Reset()      { *m = RegularUserID{} }
func (*RegularUserID) ProtoMessage() {}
func (*RegularUserID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{3}
}
func (m *RegularUserID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegularUserID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegularUserID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegularUserID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegularUserID.Merge(m, src)
}
func (m *RegularUserID) XXX_Size() int {
	return m.Size()
}
func (m *RegularUserID) XXX_DiscardUnknown() {
	xxx_messageInfo_RegularUserID.DiscardUnknown(m)
}

var xxx_messageInfo_RegularUserID proto.InternalMessageInfo

type UserID struct {
	// Types that are valid to be assigned to ID:
	//	*UserID_SpecialUserID
	//	*UserID_RegularUserID
	ID isUserID_ID `protobuf_oneof:"ID"`
}

func (m *UserID) Reset()      { *m = UserID{} }
func (*UserID) ProtoMessage() {}
func (*UserID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{4}
}
func (m *UserID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserID.Merge(m, src)
}
func (m *UserID) XXX_Size() int {
	return m.Size()
}
func (m *UserID) XXX_DiscardUnknown() {
	xxx_messageInfo_UserID.DiscardUnknown(m)
}

var xxx_messageInfo_UserID proto.InternalMessageInfo

type isUserID_ID interface {
	isUserID_ID()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
	Compare(interface{}) int
}

type UserID_SpecialUserID struct {
	SpecialUserID SpecialUserID `protobuf:"varint,1,opt,name=specialUserID,proto3,enum=types.SpecialUserID,oneof"`
}
type UserID_RegularUserID struct {
	RegularUserID *RegularUserID `protobuf:"bytes,2,opt,name=regularUserID,proto3,oneof"`
}

func (*UserID_SpecialUserID) isUserID_ID() {}
func (*UserID_RegularUserID) isUserID_ID() {}

func (m *UserID) GetID() isUserID_ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *UserID) GetSpecialUserID() SpecialUserID {
	if x, ok := m.GetID().(*UserID_SpecialUserID); ok {
		return x.SpecialUserID
	}
	return ROOT
}

func (m *UserID) GetRegularUserID() *RegularUserID {
	if x, ok := m.GetID().(*UserID_RegularUserID); ok {
		return x.RegularUserID
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UserID) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UserID_SpecialUserID)(nil),
		(*UserID_RegularUserID)(nil),
	}
}

type RegularUser struct {
	Id             *UserID          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Authorizations []Authorization  `protobuf:"varint,3,rep,packed,name=authorizations,proto3,enum=types.Authorization" json:"authorizations,omitempty"`
	HistoryID      []*HistoryID     `protobuf:"bytes,4,rep,name=historyID,proto3" json:"historyID,omitempty"`
	Created        *types.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
}

func (m *RegularUser) Reset()      { *m = RegularUser{} }
func (*RegularUser) ProtoMessage() {}
func (*RegularUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{5}
}
func (m *RegularUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegularUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegularUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegularUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegularUser.Merge(m, src)
}
func (m *RegularUser) XXX_Size() int {
	return m.Size()
}
func (m *RegularUser) XXX_DiscardUnknown() {
	xxx_messageInfo_RegularUser.DiscardUnknown(m)
}

var xxx_messageInfo_RegularUser proto.InternalMessageInfo

func (m *RegularUser) GetId() *UserID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RegularUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegularUser) GetAuthorizations() []Authorization {
	if m != nil {
		return m.Authorizations
	}
	return nil
}

func (m *RegularUser) GetHistoryID() []*HistoryID {
	if m != nil {
		return m.HistoryID
	}
	return nil
}

func (m *RegularUser) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type SpecialUser struct {
	Id             SpecialUserID   `protobuf:"varint,1,opt,name=id,proto3,enum=types.SpecialUserID" json:"id,omitempty"`
	Authorizations []Authorization `protobuf:"varint,2,rep,packed,name=authorizations,proto3,enum=types.Authorization" json:"authorizations,omitempty"`
	HistoryID      []*HistoryID    `protobuf:"bytes,3,rep,name=historyID,proto3" json:"historyID,omitempty"`
}

func (m *SpecialUser) Reset()      { *m = SpecialUser{} }
func (*SpecialUser) ProtoMessage() {}
func (*SpecialUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{6}
}
func (m *SpecialUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialUser.Merge(m, src)
}
func (m *SpecialUser) XXX_Size() int {
	return m.Size()
}
func (m *SpecialUser) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialUser.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialUser proto.InternalMessageInfo

func (m *SpecialUser) GetId() SpecialUserID {
	if m != nil {
		return m.Id
	}
	return ROOT
}

func (m *SpecialUser) GetAuthorizations() []Authorization {
	if m != nil {
		return m.Authorizations
	}
	return nil
}

func (m *SpecialUser) GetHistoryID() []*HistoryID {
	if m != nil {
		return m.HistoryID
	}
	return nil
}

type ItemID struct {
	*ID `protobuf:"bytes,1,opt,name=id,proto3,embedded=id" json:"id,omitempty"`
}

func (m *ItemID) Reset()      { *m = ItemID{} }
func (*ItemID) ProtoMessage() {}
func (*ItemID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{7}
}
func (m *ItemID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemID.Merge(m, src)
}
func (m *ItemID) XXX_Size() int {
	return m.Size()
}
func (m *ItemID) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemID.DiscardUnknown(m)
}

var xxx_messageInfo_ItemID proto.InternalMessageInfo

type Item struct {
	Id       *ItemID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Location string    `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Parent   *ItemID   `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	Children []*ItemID `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
}

func (m *Item) Reset()      { *m = Item{} }
func (*Item) ProtoMessage() {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_e927c4c8d1099e6c, []int{8}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetId() *ItemID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Item) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Item) GetParent() *ItemID {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Item) GetChildren() []*ItemID {
	if m != nil {
		return m.Children
	}
	return nil
}

func init() {
	proto.RegisterEnum("types.Authorization", Authorization_name, Authorization_value)
	proto.RegisterEnum("types.SpecialUserID", SpecialUserID_name, SpecialUserID_value)
	proto.RegisterType((*ID)(nil), "types.ID")
	proto.RegisterType((*AuthorizationGrant)(nil), "types.AuthorizationGrant")
	proto.RegisterType((*HistoryID)(nil), "types.HistoryID")
	proto.RegisterType((*RegularUserID)(nil), "types.RegularUserID")
	proto.RegisterType((*UserID)(nil), "types.UserID")
	proto.RegisterType((*RegularUser)(nil), "types.RegularUser")
	proto.RegisterType((*SpecialUser)(nil), "types.SpecialUser")
	proto.RegisterType((*ItemID)(nil), "types.ItemID")
	proto.RegisterType((*Item)(nil), "types.Item")
}

func init() {
	proto.RegisterFile("github.com/zemnmez/tab/types/types.proto", fileDescriptor_e927c4c8d1099e6c)
}

var fileDescriptor_e927c4c8d1099e6c = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xda, 0x4c,
	0x14, 0xf5, 0x18, 0x43, 0xc2, 0x45, 0xf0, 0xf9, 0x1b, 0xf1, 0x7d, 0xb2, 0x50, 0x3a, 0x49, 0x51,
	0x2b, 0x91, 0xa8, 0x85, 0x8a, 0x76, 0x99, 0x0d, 0xa9, 0x49, 0xb1, 0x94, 0x84, 0xca, 0x40, 0xa2,
	0x54, 0x6a, 0x91, 0x81, 0x01, 0x2c, 0x61, 0x06, 0x19, 0xb3, 0x48, 0x56, 0x5d, 0x77, 0xd5, 0x57,
	0xe8, 0xaa, 0x79, 0x84, 0x2e, 0xfa, 0x00, 0x5d, 0xb2, 0xcc, 0xaa, 0x0a, 0xa6, 0x8b, 0x2e, 0xf3,
	0x08, 0x15, 0x63, 0x43, 0x4c, 0x9a, 0x9f, 0xaa, 0x1b, 0xe4, 0x99, 0x73, 0xce, 0xbd, 0xe7, 0x9e,
	0xb9, 0x02, 0x32, 0x1d, 0xd3, 0xe9, 0x8e, 0x1a, 0xd9, 0x26, 0xb3, 0x72, 0xa7, 0xd4, 0xea, 0x5b,
	0xf4, 0x34, 0xe7, 0x18, 0x8d, 0x9c, 0x73, 0x32, 0xa0, 0x43, 0xef, 0x37, 0x3b, 0xb0, 0x99, 0xc3,
	0x70, 0x98, 0x1f, 0x52, 0x4f, 0x03, 0x82, 0x0e, 0xeb, 0xb0, 0x1c, 0x47, 0x1b, 0xa3, 0x36, 0x3f,
	0xf1, 0x03, 0xff, 0xf2, 0x54, 0xa9, 0xf5, 0x0e, 0x63, 0x9d, 0x1e, 0xbd, 0x62, 0x39, 0xa6, 0x45,
	0x87, 0x8e, 0x61, 0x0d, 0x3c, 0x42, 0x3a, 0x09, 0xa2, 0xa6, 0xe2, 0x04, 0x88, 0x66, 0x4b, 0x41,
	0x1b, 0x28, 0x13, 0xd5, 0x45, 0xb3, 0x95, 0x7e, 0x0b, 0xb8, 0x30, 0x72, 0xba, 0xcc, 0x36, 0x4f,
	0x0d, 0xc7, 0x64, 0xfd, 0x57, 0xb6, 0xd1, 0x77, 0xf0, 0x43, 0x90, 0xda, 0x36, 0xb3, 0x38, 0x2f,
	0x96, 0x8f, 0x67, 0x3d, 0x7b, 0xb5, 0x21, 0xb5, 0x35, 0x55, 0xe7, 0x10, 0x7e, 0x04, 0x22, 0x6b,
	0x2b, 0xe2, 0x46, 0x28, 0x93, 0xc8, 0x27, 0x7d, 0xc2, 0x52, 0x25, 0x5d, 0x64, 0xed, 0xf4, 0x13,
	0x88, 0x96, 0xcc, 0xa1, 0xc3, 0xec, 0x13, 0x4d, 0xc5, 0xeb, 0x8b, 0xde, 0xb1, 0x7c, 0xd4, 0x97,
	0x68, 0xea, 0x8e, 0x34, 0xfe, 0xbe, 0x8e, 0xb8, 0x99, 0x67, 0x10, 0xd7, 0x69, 0x67, 0xd4, 0x33,
	0x6c, 0xaf, 0xd5, 0xfd, 0x8a, 0x0f, 0x08, 0x22, 0x3e, 0x77, 0x1b, 0xe2, 0xc3, 0x01, 0x6d, 0x9a,
	0x46, 0xcf, 0xbb, 0xe0, 0xb2, 0x2b, 0x6f, 0x95, 0x20, 0x56, 0x12, 0xf4, 0x65, 0xf2, 0x4c, 0x6d,
	0x07, 0x5b, 0x2b, 0x22, 0x6f, 0x3a, 0x57, 0x2f, 0xd9, 0x9a, 0xa9, 0x97, 0xc8, 0x3b, 0xd2, 0x2c,
	0xdb, 0xf4, 0x0f, 0x04, 0xb1, 0x00, 0x11, 0x3f, 0x08, 0xb8, 0xbf, 0x96, 0xa1, 0x68, 0xb6, 0x30,
	0x06, 0xa9, 0x6f, 0x58, 0x94, 0x77, 0x8a, 0xea, 0xfc, 0x1b, 0x6f, 0x43, 0xc2, 0x08, 0x86, 0x38,
	0x54, 0x42, 0x77, 0x24, 0x7c, 0x8d, 0x8b, 0xb3, 0x10, 0xed, 0xce, 0xd3, 0x56, 0xa4, 0x8d, 0x50,
	0x26, 0x96, 0x97, 0x7d, 0xe1, 0xe2, 0x15, 0xf4, 0x2b, 0x0a, 0x7e, 0x01, 0x2b, 0x4d, 0x9b, 0x1a,
	0x0e, 0x6d, 0x29, 0x61, 0xee, 0x32, 0x95, 0xf5, 0xb6, 0x28, 0x3b, 0xdf, 0xa2, 0x6c, 0x75, 0xbe,
	0x45, 0xfa, 0x9c, 0x9a, 0xfe, 0x84, 0x20, 0x16, 0x48, 0x73, 0xb6, 0x09, 0xfe, 0x98, 0xb7, 0xa4,
	0xcd, 0xa7, 0xfd, 0x7d, 0x32, 0xf1, 0x6f, 0x27, 0x0b, 0xdd, 0x3b, 0x59, 0x7a, 0x13, 0x22, 0x9a,
	0x43, 0xad, 0x3f, 0x59, 0xa1, 0xcf, 0x08, 0xa4, 0x19, 0xf7, 0xc6, 0xe7, 0xf2, 0x8a, 0xdc, 0xfa,
	0x5c, 0x29, 0x58, 0xed, 0xb1, 0x26, 0xf7, 0xa8, 0x84, 0xf8, 0xfd, 0xe2, 0x8c, 0x1f, 0x43, 0x64,
	0x60, 0xd8, 0xb4, 0xef, 0x28, 0xd2, 0x4d, 0x25, 0x7d, 0x10, 0x6f, 0xc2, 0x6a, 0xb3, 0x6b, 0xf6,
	0x5a, 0x36, 0xed, 0x2b, 0x61, 0x3e, 0xd8, 0x35, 0xe2, 0x02, 0xde, 0xfa, 0x8a, 0x20, 0xbe, 0x14,
	0x13, 0x4e, 0x00, 0x1c, 0x6a, 0xc5, 0xa3, 0x7a, 0xad, 0x52, 0xd4, 0x2b, 0xb2, 0x80, 0xff, 0x83,
	0x7f, 0xf7, 0xcb, 0xaa, 0xb6, 0x7b, 0x5c, 0x3f, 0x2c, 0xec, 0x69, 0x6a, 0xbd, 0x50, 0xab, 0x96,
	0x64, 0x84, 0xe3, 0x10, 0x2d, 0xa8, 0x6a, 0x5d, 0xab, 0x16, 0xf7, 0x2b, 0xb2, 0x88, 0xff, 0x07,
	0xec, 0xb3, 0xca, 0xd5, 0x52, 0x51, 0xf7, 0xd5, 0x21, 0xac, 0x40, 0xd2, 0xbf, 0xaf, 0xbc, 0x2e,
	0xbe, 0xd4, 0x0a, 0x7b, 0x3e, 0x22, 0xe1, 0x7f, 0x20, 0x36, 0x47, 0x8a, 0x7b, 0xbb, 0x72, 0x18,
	0xaf, 0x81, 0xc2, 0x1b, 0x07, 0x0a, 0xd4, 0x4b, 0x5a, 0xa5, 0x5a, 0xd6, 0x8f, 0xe5, 0x08, 0x4e,
	0x82, 0xec, 0xa1, 0x47, 0x07, 0x8b, 0xdb, 0x95, 0xad, 0x0c, 0xc4, 0x97, 0xd6, 0x02, 0xaf, 0x82,
	0xa4, 0x97, 0xcb, 0x55, 0x59, 0xe0, 0x06, 0x0f, 0xca, 0x07, 0xc7, 0xfb, 0xe5, 0x5a, 0x45, 0x46,
	0x3b, 0xef, 0xc6, 0x13, 0x22, 0x9c, 0x4f, 0x88, 0x70, 0x31, 0x21, 0xe8, 0x72, 0x42, 0xd0, 0x7b,
	0x97, 0xa0, 0x33, 0x97, 0xa0, 0x2f, 0x2e, 0x41, 0xdf, 0x5c, 0x82, 0xc6, 0x2e, 0x41, 0x17, 0x2e,
	0x41, 0x3f, 0x5d, 0x22, 0x5c, 0xba, 0x04, 0x7d, 0x9c, 0x12, 0xe1, 0x6c, 0x4a, 0xd0, 0x78, 0x4a,
	0x84, 0xf3, 0x29, 0x11, 0xde, 0xac, 0xdd, 0xf5, 0x6f, 0xdb, 0x88, 0xf0, 0xf5, 0x7e, 0xfe, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0x61, 0xd7, 0x29, 0x20, 0x94, 0x05, 0x00, 0x00,
}

func (this *ID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ID)
	if !ok {
		that2, ok := that.(ID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AuthorizationGrant) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AuthorizationGrant)
	if !ok {
		that2, ok := that.(AuthorizationGrant)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.From.Compare(that1.From); c != 0 {
		return c
	}
	if len(this.Of) != len(that1.Of) {
		if len(this.Of) < len(that1.Of) {
			return -1
		}
		return 1
	}
	for i := range this.Of {
		if this.Of[i] != that1.Of[i] {
			if this.Of[i] < that1.Of[i] {
				return -1
			}
			return 1
		}
	}
	return 0
}
func (this *HistoryID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*HistoryID)
	if !ok {
		that2, ok := that.(HistoryID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.ID.Compare(that1.ID); c != 0 {
		return c
	}
	return 0
}
func (this *RegularUserID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*RegularUserID)
	if !ok {
		that2, ok := that.(RegularUserID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.ID.Compare(that1.ID); c != 0 {
		return c
	}
	return 0
}
func (this *UserID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*UserID)
	if !ok {
		that2, ok := that.(UserID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if that1.ID == nil {
		if this.ID != nil {
			return 1
		}
	} else if this.ID == nil {
		return -1
	} else {
		thisType := -1
		switch this.ID.(type) {
		case *UserID_SpecialUserID:
			thisType = 0
		case *UserID_RegularUserID:
			thisType = 1
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", this.ID))
		}
		that1Type := -1
		switch that1.ID.(type) {
		case *UserID_SpecialUserID:
			that1Type = 0
		case *UserID_RegularUserID:
			that1Type = 1
		default:
			panic(fmt.Sprintf("compare: unexpected type %T in oneof", that1.ID))
		}
		if thisType == that1Type {
			if c := this.ID.Compare(that1.ID); c != 0 {
				return c
			}
		} else if thisType < that1Type {
			return -1
		} else if thisType > that1Type {
			return 1
		}
	}
	return 0
}
func (this *UserID_SpecialUserID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*UserID_SpecialUserID)
	if !ok {
		that2, ok := that.(UserID_SpecialUserID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.SpecialUserID != that1.SpecialUserID {
		if this.SpecialUserID < that1.SpecialUserID {
			return -1
		}
		return 1
	}
	return 0
}
func (this *UserID_RegularUserID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*UserID_RegularUserID)
	if !ok {
		that2, ok := that.(UserID_RegularUserID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.RegularUserID.Compare(that1.RegularUserID); c != 0 {
		return c
	}
	return 0
}
func (this *RegularUser) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*RegularUser)
	if !ok {
		that2, ok := that.(RegularUser)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Id.Compare(that1.Id); c != 0 {
		return c
	}
	if this.Name != that1.Name {
		if this.Name < that1.Name {
			return -1
		}
		return 1
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		if len(this.Authorizations) < len(that1.Authorizations) {
			return -1
		}
		return 1
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			if this.Authorizations[i] < that1.Authorizations[i] {
				return -1
			}
			return 1
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		if len(this.HistoryID) < len(that1.HistoryID) {
			return -1
		}
		return 1
	}
	for i := range this.HistoryID {
		if c := this.HistoryID[i].Compare(that1.HistoryID[i]); c != 0 {
			return c
		}
	}
	if c := this.Created.Compare(that1.Created); c != 0 {
		return c
	}
	return 0
}
func (this *SpecialUser) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*SpecialUser)
	if !ok {
		that2, ok := that.(SpecialUser)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Id != that1.Id {
		if this.Id < that1.Id {
			return -1
		}
		return 1
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		if len(this.Authorizations) < len(that1.Authorizations) {
			return -1
		}
		return 1
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			if this.Authorizations[i] < that1.Authorizations[i] {
				return -1
			}
			return 1
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		if len(this.HistoryID) < len(that1.HistoryID) {
			return -1
		}
		return 1
	}
	for i := range this.HistoryID {
		if c := this.HistoryID[i].Compare(that1.HistoryID[i]); c != 0 {
			return c
		}
	}
	return 0
}
func (this *ItemID) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ItemID)
	if !ok {
		that2, ok := that.(ItemID)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.ID.Compare(that1.ID); c != 0 {
		return c
	}
	return 0
}
func (this *Item) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*Item)
	if !ok {
		that2, ok := that.(Item)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := this.Id.Compare(that1.Id); c != 0 {
		return c
	}
	if this.Name != that1.Name {
		if this.Name < that1.Name {
			return -1
		}
		return 1
	}
	if this.Location != that1.Location {
		if this.Location < that1.Location {
			return -1
		}
		return 1
	}
	if c := this.Parent.Compare(that1.Parent); c != 0 {
		return c
	}
	if len(this.Children) != len(that1.Children) {
		if len(this.Children) < len(that1.Children) {
			return -1
		}
		return 1
	}
	for i := range this.Children {
		if c := this.Children[i].Compare(that1.Children[i]); c != 0 {
			return c
		}
	}
	return 0
}
func (x Authorization) String() string {
	s, ok := Authorization_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SpecialUserID) String() string {
	s, ok := SpecialUserID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ID)
	if !ok {
		that2, ok := that.(ID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ID but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	return nil
}
func (this *ID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ID)
	if !ok {
		that2, ok := that.(ID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *AuthorizationGrant) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AuthorizationGrant)
	if !ok {
		that2, ok := that.(AuthorizationGrant)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AuthorizationGrant")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AuthorizationGrant but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AuthorizationGrant but is not nil && this == nil")
	}
	if !this.From.Equal(that1.From) {
		return fmt.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if len(this.Of) != len(that1.Of) {
		return fmt.Errorf("Of this(%v) Not Equal that(%v)", len(this.Of), len(that1.Of))
	}
	for i := range this.Of {
		if this.Of[i] != that1.Of[i] {
			return fmt.Errorf("Of this[%v](%v) Not Equal that[%v](%v)", i, this.Of[i], i, that1.Of[i])
		}
	}
	return nil
}
func (this *AuthorizationGrant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizationGrant)
	if !ok {
		that2, ok := that.(AuthorizationGrant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if len(this.Of) != len(that1.Of) {
		return false
	}
	for i := range this.Of {
		if this.Of[i] != that1.Of[i] {
			return false
		}
	}
	return true
}
func (this *HistoryID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HistoryID)
	if !ok {
		that2, ok := that.(HistoryID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HistoryID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HistoryID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HistoryID but is not nil && this == nil")
	}
	if !this.ID.Equal(that1.ID) {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	return nil
}
func (this *HistoryID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryID)
	if !ok {
		that2, ok := that.(HistoryID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *RegularUserID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RegularUserID)
	if !ok {
		that2, ok := that.(RegularUserID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RegularUserID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RegularUserID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RegularUserID but is not nil && this == nil")
	}
	if !this.ID.Equal(that1.ID) {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	return nil
}
func (this *RegularUserID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegularUserID)
	if !ok {
		that2, ok := that.(RegularUserID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *UserID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserID)
	if !ok {
		that2, ok := that.(UserID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserID but is not nil && this == nil")
	}
	if that1.ID == nil {
		if this.ID != nil {
			return fmt.Errorf("this.ID != nil && that1.ID == nil")
		}
	} else if this.ID == nil {
		return fmt.Errorf("this.ID == nil && that1.ID != nil")
	} else if err := this.ID.VerboseEqual(that1.ID); err != nil {
		return err
	}
	return nil
}
func (this *UserID_SpecialUserID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserID_SpecialUserID)
	if !ok {
		that2, ok := that.(UserID_SpecialUserID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserID_SpecialUserID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserID_SpecialUserID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserID_SpecialUserID but is not nil && this == nil")
	}
	if this.SpecialUserID != that1.SpecialUserID {
		return fmt.Errorf("SpecialUserID this(%v) Not Equal that(%v)", this.SpecialUserID, that1.SpecialUserID)
	}
	return nil
}
func (this *UserID_RegularUserID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserID_RegularUserID)
	if !ok {
		that2, ok := that.(UserID_RegularUserID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserID_RegularUserID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserID_RegularUserID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserID_RegularUserID but is not nil && this == nil")
	}
	if !this.RegularUserID.Equal(that1.RegularUserID) {
		return fmt.Errorf("RegularUserID this(%v) Not Equal that(%v)", this.RegularUserID, that1.RegularUserID)
	}
	return nil
}
func (this *UserID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserID)
	if !ok {
		that2, ok := that.(UserID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ID == nil {
		if this.ID != nil {
			return false
		}
	} else if this.ID == nil {
		return false
	} else if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *UserID_SpecialUserID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserID_SpecialUserID)
	if !ok {
		that2, ok := that.(UserID_SpecialUserID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecialUserID != that1.SpecialUserID {
		return false
	}
	return true
}
func (this *UserID_RegularUserID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserID_RegularUserID)
	if !ok {
		that2, ok := that.(UserID_RegularUserID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegularUserID.Equal(that1.RegularUserID) {
		return false
	}
	return true
}
func (this *RegularUser) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RegularUser)
	if !ok {
		that2, ok := that.(RegularUser)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RegularUser")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RegularUser but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RegularUser but is not nil && this == nil")
	}
	if !this.Id.Equal(that1.Id) {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		return fmt.Errorf("Authorizations this(%v) Not Equal that(%v)", len(this.Authorizations), len(that1.Authorizations))
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			return fmt.Errorf("Authorizations this[%v](%v) Not Equal that[%v](%v)", i, this.Authorizations[i], i, that1.Authorizations[i])
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		return fmt.Errorf("HistoryID this(%v) Not Equal that(%v)", len(this.HistoryID), len(that1.HistoryID))
	}
	for i := range this.HistoryID {
		if !this.HistoryID[i].Equal(that1.HistoryID[i]) {
			return fmt.Errorf("HistoryID this[%v](%v) Not Equal that[%v](%v)", i, this.HistoryID[i], i, that1.HistoryID[i])
		}
	}
	if !this.Created.Equal(that1.Created) {
		return fmt.Errorf("Created this(%v) Not Equal that(%v)", this.Created, that1.Created)
	}
	return nil
}
func (this *RegularUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegularUser)
	if !ok {
		that2, ok := that.(RegularUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		return false
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			return false
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		return false
	}
	for i := range this.HistoryID {
		if !this.HistoryID[i].Equal(that1.HistoryID[i]) {
			return false
		}
	}
	if !this.Created.Equal(that1.Created) {
		return false
	}
	return true
}
func (this *SpecialUser) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SpecialUser)
	if !ok {
		that2, ok := that.(SpecialUser)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SpecialUser")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SpecialUser but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SpecialUser but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		return fmt.Errorf("Authorizations this(%v) Not Equal that(%v)", len(this.Authorizations), len(that1.Authorizations))
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			return fmt.Errorf("Authorizations this[%v](%v) Not Equal that[%v](%v)", i, this.Authorizations[i], i, that1.Authorizations[i])
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		return fmt.Errorf("HistoryID this(%v) Not Equal that(%v)", len(this.HistoryID), len(that1.HistoryID))
	}
	for i := range this.HistoryID {
		if !this.HistoryID[i].Equal(that1.HistoryID[i]) {
			return fmt.Errorf("HistoryID this[%v](%v) Not Equal that[%v](%v)", i, this.HistoryID[i], i, that1.HistoryID[i])
		}
	}
	return nil
}
func (this *SpecialUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecialUser)
	if !ok {
		that2, ok := that.(SpecialUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Authorizations) != len(that1.Authorizations) {
		return false
	}
	for i := range this.Authorizations {
		if this.Authorizations[i] != that1.Authorizations[i] {
			return false
		}
	}
	if len(this.HistoryID) != len(that1.HistoryID) {
		return false
	}
	for i := range this.HistoryID {
		if !this.HistoryID[i].Equal(that1.HistoryID[i]) {
			return false
		}
	}
	return true
}
func (this *ItemID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ItemID)
	if !ok {
		that2, ok := that.(ItemID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ItemID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ItemID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ItemID but is not nil && this == nil")
	}
	if !this.ID.Equal(that1.ID) {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	return nil
}
func (this *ItemID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ItemID)
	if !ok {
		that2, ok := that.(ItemID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *Item) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Item)
	if !ok {
		that2, ok := that.(Item)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Item")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Item but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Item but is not nil && this == nil")
	}
	if !this.Id.Equal(that1.Id) {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Location != that1.Location {
		return fmt.Errorf("Location this(%v) Not Equal that(%v)", this.Location, that1.Location)
	}
	if !this.Parent.Equal(that1.Parent) {
		return fmt.Errorf("Parent this(%v) Not Equal that(%v)", this.Parent, that1.Parent)
	}
	if len(this.Children) != len(that1.Children) {
		return fmt.Errorf("Children this(%v) Not Equal that(%v)", len(this.Children), len(that1.Children))
	}
	for i := range this.Children {
		if !this.Children[i].Equal(that1.Children[i]) {
			return fmt.Errorf("Children this[%v](%v) Not Equal that[%v](%v)", i, this.Children[i], i, that1.Children[i])
		}
	}
	return nil
}
func (this *Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Item)
	if !ok {
		that2, ok := that.(Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	if !this.Parent.Equal(that1.Parent) {
		return false
	}
	if len(this.Children) != len(that1.Children) {
		return false
	}
	for i := range this.Children {
		if !this.Children[i].Equal(that1.Children[i]) {
			return false
		}
	}
	return true
}
func (this *ID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.ID{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizationGrant) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.AuthorizationGrant{")
	if this.From != nil {
		s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	}
	s = append(s, "Of: "+fmt.Sprintf("%#v", this.Of)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.HistoryID{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegularUserID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.RegularUserID{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.UserID{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserID_SpecialUserID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.UserID_SpecialUserID{` +
		`SpecialUserID:` + fmt.Sprintf("%#v", this.SpecialUserID) + `}`}, ", ")
	return s
}
func (this *UserID_RegularUserID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.UserID_RegularUserID{` +
		`RegularUserID:` + fmt.Sprintf("%#v", this.RegularUserID) + `}`}, ", ")
	return s
}
func (this *RegularUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&types.RegularUser{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Authorizations: "+fmt.Sprintf("%#v", this.Authorizations)+",\n")
	if this.HistoryID != nil {
		s = append(s, "HistoryID: "+fmt.Sprintf("%#v", this.HistoryID)+",\n")
	}
	if this.Created != nil {
		s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecialUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.SpecialUser{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Authorizations: "+fmt.Sprintf("%#v", this.Authorizations)+",\n")
	if this.HistoryID != nil {
		s = append(s, "HistoryID: "+fmt.Sprintf("%#v", this.HistoryID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ItemID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.ItemID{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&types.Item{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	if this.Parent != nil {
		s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	}
	if this.Children != nil {
		s = append(s, "Children: "+fmt.Sprintf("%#v", this.Children)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthorizationGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizationGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizationGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Of) > 0 {
		dAtA2 := make([]byte, len(m.Of)*10)
		var j1 int
		for _, num := range m.Of {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegularUserID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegularUserID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegularUserID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size := m.ID.Size()
			i -= size
			if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserID_SpecialUserID) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *UserID_SpecialUserID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.SpecialUserID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *UserID_RegularUserID) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *UserID_RegularUserID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegularUserID != nil {
		{
			size, err := m.RegularUserID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RegularUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegularUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegularUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Created != nil {
		{
			size, err := m.Created.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HistoryID) > 0 {
		for iNdEx := len(m.HistoryID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoryID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Authorizations) > 0 {
		dAtA9 := make([]byte, len(m.Authorizations)*10)
		var j8 int
		for _, num := range m.Authorizations {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTypes(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecialUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HistoryID) > 0 {
		for iNdEx := len(m.HistoryID) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoryID[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Authorizations) > 0 {
		dAtA12 := make([]byte, len(m.Authorizations)*10)
		var j11 int
		for _, num := range m.Authorizations {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintTypes(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Parent != nil {
		{
			size, err := m.Parent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AuthorizationGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Of) > 0 {
		l = 0
		for _, e := range m.Of {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *HistoryID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RegularUserID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *UserID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += m.ID.Size()
	}
	return n
}

func (m *UserID_SpecialUserID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.SpecialUserID))
	return n
}
func (m *UserID_RegularUserID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegularUserID != nil {
		l = m.RegularUserID.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RegularUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Authorizations) > 0 {
		l = 0
		for _, e := range m.Authorizations {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.HistoryID) > 0 {
		for _, e := range m.HistoryID {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SpecialUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if len(m.Authorizations) > 0 {
		l = 0
		for _, e := range m.Authorizations {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.HistoryID) > 0 {
		for _, e := range m.HistoryID {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ItemID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ID{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizationGrant) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizationGrant{`,
		`From:` + strings.Replace(this.From.String(), "UserID", "UserID", 1) + `,`,
		`Of:` + fmt.Sprintf("%v", this.Of) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryID{`,
		`ID:` + strings.Replace(this.ID.String(), "ID", "ID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegularUserID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegularUserID{`,
		`ID:` + strings.Replace(this.ID.String(), "ID", "ID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserID{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserID_SpecialUserID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserID_SpecialUserID{`,
		`SpecialUserID:` + fmt.Sprintf("%v", this.SpecialUserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserID_RegularUserID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserID_RegularUserID{`,
		`RegularUserID:` + strings.Replace(fmt.Sprintf("%v", this.RegularUserID), "RegularUserID", "RegularUserID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegularUser) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistoryID := "[]*HistoryID{"
	for _, f := range this.HistoryID {
		repeatedStringForHistoryID += strings.Replace(f.String(), "HistoryID", "HistoryID", 1) + ","
	}
	repeatedStringForHistoryID += "}"
	s := strings.Join([]string{`&RegularUser{`,
		`Id:` + strings.Replace(this.Id.String(), "UserID", "UserID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Authorizations:` + fmt.Sprintf("%v", this.Authorizations) + `,`,
		`HistoryID:` + repeatedStringForHistoryID + `,`,
		`Created:` + strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecialUser) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistoryID := "[]*HistoryID{"
	for _, f := range this.HistoryID {
		repeatedStringForHistoryID += strings.Replace(f.String(), "HistoryID", "HistoryID", 1) + ","
	}
	repeatedStringForHistoryID += "}"
	s := strings.Join([]string{`&SpecialUser{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Authorizations:` + fmt.Sprintf("%v", this.Authorizations) + `,`,
		`HistoryID:` + repeatedStringForHistoryID + `,`,
		`}`,
	}, "")
	return s
}
func (this *ItemID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ItemID{`,
		`ID:` + strings.Replace(this.ID.String(), "ID", "ID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Item) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForChildren := "[]*ItemID{"
	for _, f := range this.Children {
		repeatedStringForChildren += strings.Replace(f.String(), "ItemID", "ItemID", 1) + ","
	}
	repeatedStringForChildren += "}"
	s := strings.Join([]string{`&Item{`,
		`Id:` + strings.Replace(this.Id.String(), "ItemID", "ItemID", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`Parent:` + strings.Replace(this.Parent.String(), "ItemID", "ItemID", 1) + `,`,
		`Children:` + repeatedStringForChildren + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizationGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizationGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizationGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &UserID{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v Authorization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Authorization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Of = append(m.Of, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Of) == 0 {
					m.Of = make([]Authorization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Authorization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Authorization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Of = append(m.Of, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Of", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &ID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegularUserID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegularUserID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegularUserID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &ID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialUserID", wireType)
			}
			var v SpecialUserID
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SpecialUserID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &UserID_SpecialUserID{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegularUserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegularUserID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ID = &UserID_RegularUserID{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegularUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegularUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegularUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UserID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Authorization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Authorization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Authorizations = append(m.Authorizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Authorizations) == 0 {
					m.Authorizations = make([]Authorization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Authorization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Authorization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Authorizations = append(m.Authorizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorizations", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryID = append(m.HistoryID, &HistoryID{})
			if err := m.HistoryID[len(m.HistoryID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= SpecialUserID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v Authorization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Authorization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Authorizations = append(m.Authorizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Authorizations) == 0 {
					m.Authorizations = make([]Authorization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Authorization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Authorization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Authorizations = append(m.Authorizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorizations", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryID = append(m.HistoryID, &HistoryID{})
			if err := m.HistoryID[len(m.HistoryID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &ID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ItemID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &ItemID{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &ItemID{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)
