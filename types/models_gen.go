// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type User interface {
	IsUser()
}

type UserMutator interface {
	IsUserMutator()
}

type AnonymousUser struct {
	ID   SpecialUserID `json:"ID"`
	Name string        `json:"Name"`
}

type AuthenticationMutation struct {
	Etc  *string       `json:"etc"`
	Oidc *OIDCMutation `json:"OIDC"`
}

type AuthenticationQuery struct {
	Etc  *string    `json:"etc"`
	Oidc *OIDCQuery `json:"OIDC"`
}

type DefinedItemInput struct {
	Name     string       `json:"Name"`
	Location string       `json:"Location"`
	Parent   *ItemInput   `json:"Parent"`
	Children []*ItemInput `json:"Children"`
}

type HistoryItem struct {
	Action      string `json:"Action"`
	By          User   `json:"By"`
	RequestData string `json:"RequestData"`
	IPAddress   string `json:"IPAddress"`
}

type IDToken struct {
	Issuer                              string    `json:"Issuer"`
	Subject                             string    `json:"Subject"`
	Audience                            string    `json:"Audience"`
	Expiration                          time.Time `json:"Expiration"`
	Issued                              time.Time `json:"Issued"`
	Nonce                               string    `json:"Nonce"`
	AuthenticationContextClassReference *int      `json:"AuthenticationContextClassReference"`
	AuthenticationMethodsReference      []string  `json:"AuthenticationMethodsReference"`
	AuthorizedParty                     *string   `json:"AuthorizedParty"`
}

type IDTokenInput struct {
	Issuer                              string    `json:"Issuer"`
	Subject                             string    `json:"Subject"`
	Audience                            string    `json:"Audience"`
	Expiration                          time.Time `json:"Expiration"`
	Issued                              time.Time `json:"Issued"`
	Nonce                               string    `json:"Nonce"`
	AuthenticationContextClassReference *int      `json:"AuthenticationContextClassReference"`
	AuthenticationMethodsReference      []string  `json:"AuthenticationMethodsReference"`
	AuthorizedParty                     *string   `json:"AuthorizedParty"`
}

type ItemInput struct {
	ByID          *ItemID           `json:"ById"`
	WithStructure *DefinedItemInput `json:"WithStructure"`
}

type OIDCMutation struct {
	Authenticate User          `json:"Authenticate"`
	Provider     *OIDCProvider `json:"Provider"`
}

type OIDCProvider struct {
	ID                    *string `json:"ID"`
	Name                  string  `json:"Name"`
	Callback              string  `json:"Callback"`
	AuthorizationEndpoint string  `json:"AuthorizationEndpoint"`
	ClientID              string  `json:"ClientID"`
}

type OIDCProviderInput struct {
	Name string `json:"Name"`
}

type OIDCProviderQuery struct {
	All  []*OIDCProvider `json:"All"`
	ByID *OIDCProvider   `json:"ByID"`
}

type OIDCQuery struct {
	Provider *OIDCProviderQuery `json:"Provider"`
	IsValid  *bool              `json:"IsValid"`
}

type RootUser struct {
	ID   SpecialUserID `json:"ID"`
	Name string        `json:"Name"`
}

type Self struct {
	Name           string                `json:"Name"`
	Authentication *UserAuthentication   `json:"Authentication"`
	Grants         []*AuthorizationGrant `json:"Grants"`
	Authorizatons  []Authorization       `json:"Authorizatons"`
	// Grant a user some ability the current user has
	Grant User `json:"Grant"`
	// Grant a special user some ability the current user has
	GrantSpecial *SpecialUser   `json:"GrantSpecial"`
	History      []*HistoryItem `json:"History"`
}

func (Self) IsUser() {}

type UserAuthentication struct {
	Etc  *string    `json:"etc"`
	Oidc []*IDToken `json:"OIDC"`
}

type UserInput struct {
	Name string `json:"Name"`
}

type UserMutation struct {
	Self    UserMutator `json:"Self"`
	Special UserMutator `json:"Special"`
	Regular UserMutator `json:"Regular"`
}

type UserQuery struct {
	Self    *Self        `json:"Self"`
	Special *SpecialUser `json:"Special"`
	Regular *RegularUser `json:"Regular"`
	WhoCan  []User       `json:"WhoCan"`
}

type SpecialUserID string

const (
	SpecialUserIDRoot      SpecialUserID = "ROOT"
	SpecialUserIDAnonymous SpecialUserID = "ANONYMOUS"
)

var AllSpecialUserID = []SpecialUserID{
	SpecialUserIDRoot,
	SpecialUserIDAnonymous,
}

func (e SpecialUserID) IsValid() bool {
	switch e {
	case SpecialUserIDRoot, SpecialUserIDAnonymous:
		return true
	}
	return false
}

func (e SpecialUserID) String() string {
	return string(e)
}

func (e *SpecialUserID) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SpecialUserID(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SpecialUserID", str)
	}
	return nil
}

func (e SpecialUserID) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
