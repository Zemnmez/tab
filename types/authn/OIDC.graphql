extend enum Authorization {
    MODIFY_VALID_AUTH
}

scalar Time
scalar OIDCProviderID @goModel(model: "github.com/zemnmez/tab/types.OIDCProviderID")

type IDTokenInfo @goModel(model: "github.com/zemnmez/tab/gql/resolver.IDTokenInfo") {
    "The issuer of this id token e.g. https://google.com"
    Issuer: String!

    """
    The subject of this token i.e. who the user is
    authorizing as.
    """
    Subject: UserID!

    """
    The OAuth client that this token is intended for.
    """
    Audience: String!

    Expiration: Time!
    Issued: Time!
    Nonce: String!

    AuthenticationContextClassReference: Int

    AuthenticationMethodsReference: [String!]!

    AuthorizedParty: String
}


"A JWT string with 3 base64url encoded period separated parts"
scalar IDToken

type OIDCProvider @goModel(model: "github.com/zemnmez/tab/types.OIDCProvider") {
    ID: OIDCProviderID
    Name: String!
    Callback: String!
    AuthorizationEndpoint: String!
    ClientID: String!
}

extend type UserAuthentication {
    OIDC: [IDToken!]!
}

extend type AuthenticationQuery { OIDC: OIDCQuery } 

type OIDCQuery @goModel(model: "github.com/zemnmez/tab/gql/resolver.OIDCQuery") {
    Provider: OIDCProviderQuery
    IsValid(token: IDToken): Boolean
}

type OIDCProviderQuery @goModel(model: "github.com/zemnmez/tab/gql/resolver.OIDCProviderQuery") {
    All: [OIDCProvider!]!
    ByID(id: OIDCProviderID): OIDCProvider
}


input OIDCProviderInput {
    Name: String!
}

extend type AuthenticationMutation { OIDC: OIDCMutation }

type OIDCMutation @goModel(model: "github.com/zemnmez/tab/gql/resolver.OIDCMutation") {
    # modifies, creates or deletes an OIDC provider. If id is blank, the provider will be created.
    # If provider is blank, the provider will be deleted.
    Provider(id: OIDCProviderID, provider: OIDCProviderInput): OIDCProvider @authorized(to: [MODIFY_VALID_AUTH]) 
}


extend type SelfMutation {
    LinkOIDC(token: IDToken): Boolean!
}