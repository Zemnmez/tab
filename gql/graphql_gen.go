// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
	"github.com/zemnmez/tab/gql/resolver"
	"github.com/zemnmez/tab/types"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AuthenticationMutation() AuthenticationMutationResolver
	AuthenticationQuery() AuthenticationQueryResolver
	AuthorizationGrant() AuthorizationGrantResolver
	HistoryItem() HistoryItemResolver
	Item() ItemResolver
	Mutation() MutationResolver
	OIDCMutation() OIDCMutationResolver
	OIDCProvider() OIDCProviderResolver
	OIDCProviderQuery() OIDCProviderQueryResolver
	Query() QueryResolver
	RegularUser() RegularUserResolver
	SpecialUser() SpecialUserResolver
	UserAuthentication() UserAuthenticationResolver
	UserMutation() UserMutationResolver
	UserQuery() UserQueryResolver
}

type DirectiveRoot struct {
	Authorized func(ctx context.Context, obj interface{}, next graphql.Resolver, to []types.Authorization) (res interface{}, err error)
}

type ComplexityRoot struct {
	AuthenticationMutation struct {
		Etc  func(childComplexity int) int
		OIDC func(childComplexity int) int
	}

	AuthenticationQuery struct {
		Etc  func(childComplexity int) int
		Oidc func(childComplexity int) int
	}

	AuthorizationGrant struct {
		From  func(childComplexity int) int
		Of    func(childComplexity int) int
		Valid func(childComplexity int) int
	}

	HistoryItem struct {
		Action      func(childComplexity int) int
		By          func(childComplexity int) int
		IPAddress   func(childComplexity int) int
		RequestData func(childComplexity int) int
	}

	IDToken struct {
		Audience                            func(childComplexity int) int
		AuthenticationContextClassReference func(childComplexity int) int
		AuthenticationMethodsReference      func(childComplexity int) int
		AuthorizedParty                     func(childComplexity int) int
		Expiration                          func(childComplexity int) int
		Issued                              func(childComplexity int) int
		Issuer                              func(childComplexity int) int
		Nonce                               func(childComplexity int) int
		Subject                             func(childComplexity int) int
	}

	Item struct {
		Children func(childComplexity int) int
		Id       func(childComplexity int) int
		Location func(childComplexity int) int
		Name     func(childComplexity int) int
		Parent   func(childComplexity int) int
	}

	Mutation struct {
		Authentication func(childComplexity int) int
		Item           func(childComplexity int, id types.ItemID, new *resolver.ItemInput) int
		Ok             func(childComplexity int) int
		User           func(childComplexity int) int
	}

	OIDCMutation struct {
		Authenticate func(childComplexity int, token resolver.IDTokenInput) int
		Provider     func(childComplexity int, id *string, provider *resolver.OIDCProviderInput) int
	}

	OIDCProvider struct {
		AuthorizationEndpoint func(childComplexity int) int
		Callback              func(childComplexity int) int
		ClientID              func(childComplexity int) int
		ID                    func(childComplexity int) int
		Name                  func(childComplexity int) int
	}

	OIDCProviderQuery struct {
		All  func(childComplexity int) int
		ByID func(childComplexity int, id *string) int
	}

	OIDCQuery struct {
		IsValid  func(childComplexity int, token resolver.IDTokenInput) int
		Provider func(childComplexity int) int
	}

	Query struct {
		Authentication func(childComplexity int) int
		Item           func(childComplexity int, id types.ItemID) int
		Ok             func(childComplexity int) int
		User           func(childComplexity int) int
	}

	RegularUser struct {
		Authentication func(childComplexity int) int
		Authorizations func(childComplexity int) int
		Created        func(childComplexity int) int
		Grants         func(childComplexity int) int
		History        func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	Self struct {
		Authentication func(childComplexity int) int
		Authorizatons  func(childComplexity int) int
		Grant          func(childComplexity int, who *types.RegularUserID, abilities []types.Authorization) int
		GrantSpecial   func(childComplexity int, who *types.SpecialUserID, abilities []types.Authorization) int
		Grants         func(childComplexity int) int
		History        func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	SpecialUser struct {
		Authentication func(childComplexity int) int
		Authorizations func(childComplexity int) int
		Grants         func(childComplexity int) int
		History        func(childComplexity int) int
		Id             func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	UserAuthentication struct {
		Etc  func(childComplexity int) int
		OIDC func(childComplexity int) int
	}

	UserMutation struct {
		Regular func(childComplexity int, id *types.RegularUserID) int
		Self    func(childComplexity int) int
		Special func(childComplexity int, id *types.SpecialUserID) int
	}

	UserQuery struct {
		Regular func(childComplexity int, id types.RegularUserID) int
		Self    func(childComplexity int) int
		Special func(childComplexity int, id types.SpecialUserID) int
		WhoCan  func(childComplexity int, do []types.Authorization) int
	}
}

type AuthenticationMutationResolver interface {
	Etc(ctx context.Context, obj *resolver.AuthenticationMutation) (*string, error)
}
type AuthenticationQueryResolver interface {
	Etc(ctx context.Context, obj *resolver.AuthenticationQuery) (*string, error)
	Oidc(ctx context.Context, obj *resolver.AuthenticationQuery) (*resolver.OIDCQuery, error)
}
type AuthorizationGrantResolver interface {
	From(ctx context.Context, obj *types.AuthorizationGrant) (resolver.User, error)

	Valid(ctx context.Context, obj *types.AuthorizationGrant) (*bool, error)
}
type HistoryItemResolver interface {
	By(ctx context.Context, obj *types.HistoryItem) (resolver.User, error)
}
type ItemResolver interface {
	Parent(ctx context.Context, obj *types.Item) (*types.Item, error)
	Children(ctx context.Context, obj *types.Item) ([]*types.Item, error)
}
type MutationResolver interface {
	Ok(ctx context.Context) (*bool, error)
	Authentication(ctx context.Context) (*resolver.AuthenticationMutation, error)
	Item(ctx context.Context, id types.ItemID, new *resolver.ItemInput) (*types.Item, error)
	User(ctx context.Context) (*resolver.UserMutation, error)
}
type OIDCMutationResolver interface {
	Provider(ctx context.Context, obj *resolver.OIDCMutation, id *string, provider *resolver.OIDCProviderInput) (*types.OIDCProvider, error)
}
type OIDCProviderResolver interface {
	ID(ctx context.Context, obj *types.OIDCProvider) (*string, error)
}
type OIDCProviderQueryResolver interface {
	ByID(ctx context.Context, obj *resolver.OIDCProviderQuery, id *string) (*types.OIDCProvider, error)
}
type QueryResolver interface {
	Ok(ctx context.Context) (*bool, error)
	Authentication(ctx context.Context) (*resolver.AuthenticationQuery, error)
	Item(ctx context.Context, id types.ItemID) (*types.Item, error)
	User(ctx context.Context) (*resolver.UserQuery, error)
}
type RegularUserResolver interface {
	ID(ctx context.Context, obj *types.RegularUser) (*types.RegularUserID, error)

	Authentication(ctx context.Context, obj *types.RegularUser) (*resolver.UserAuthentication, error)
	Grants(ctx context.Context, obj *types.RegularUser) ([]*types.AuthorizationGrant, error)

	History(ctx context.Context, obj *types.RegularUser) ([]*types.HistoryItem, error)
}
type SpecialUserResolver interface {
	Name(ctx context.Context, obj *types.SpecialUser) (string, error)
	Authentication(ctx context.Context, obj *types.SpecialUser) (*resolver.UserAuthentication, error)
	Grants(ctx context.Context, obj *types.SpecialUser) ([]*types.AuthorizationGrant, error)

	History(ctx context.Context, obj *types.SpecialUser) ([]*types.HistoryItem, error)
}
type UserAuthenticationResolver interface {
	Etc(ctx context.Context, obj *resolver.UserAuthentication) (*string, error)
}
type UserMutationResolver interface {
	Special(ctx context.Context, obj *resolver.UserMutation, id *types.SpecialUserID) (resolver.UserMutator, error)
	Regular(ctx context.Context, obj *resolver.UserMutation, id *types.RegularUserID) (resolver.UserMutator, error)
}
type UserQueryResolver interface {
	WhoCan(ctx context.Context, obj *resolver.UserQuery, do []types.Authorization) ([]resolver.User, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AuthenticationMutation.etc":
		if e.complexity.AuthenticationMutation.Etc == nil {
			break
		}

		return e.complexity.AuthenticationMutation.Etc(childComplexity), true

	case "AuthenticationMutation.OIDC":
		if e.complexity.AuthenticationMutation.OIDC == nil {
			break
		}

		return e.complexity.AuthenticationMutation.OIDC(childComplexity), true

	case "AuthenticationQuery.etc":
		if e.complexity.AuthenticationQuery.Etc == nil {
			break
		}

		return e.complexity.AuthenticationQuery.Etc(childComplexity), true

	case "AuthenticationQuery.OIDC":
		if e.complexity.AuthenticationQuery.Oidc == nil {
			break
		}

		return e.complexity.AuthenticationQuery.Oidc(childComplexity), true

	case "AuthorizationGrant.From":
		if e.complexity.AuthorizationGrant.From == nil {
			break
		}

		return e.complexity.AuthorizationGrant.From(childComplexity), true

	case "AuthorizationGrant.Of":
		if e.complexity.AuthorizationGrant.Of == nil {
			break
		}

		return e.complexity.AuthorizationGrant.Of(childComplexity), true

	case "AuthorizationGrant.Valid":
		if e.complexity.AuthorizationGrant.Valid == nil {
			break
		}

		return e.complexity.AuthorizationGrant.Valid(childComplexity), true

	case "HistoryItem.Action":
		if e.complexity.HistoryItem.Action == nil {
			break
		}

		return e.complexity.HistoryItem.Action(childComplexity), true

	case "HistoryItem.By":
		if e.complexity.HistoryItem.By == nil {
			break
		}

		return e.complexity.HistoryItem.By(childComplexity), true

	case "HistoryItem.IPAddress":
		if e.complexity.HistoryItem.IPAddress == nil {
			break
		}

		return e.complexity.HistoryItem.IPAddress(childComplexity), true

	case "HistoryItem.RequestData":
		if e.complexity.HistoryItem.RequestData == nil {
			break
		}

		return e.complexity.HistoryItem.RequestData(childComplexity), true

	case "IDToken.Audience":
		if e.complexity.IDToken.Audience == nil {
			break
		}

		return e.complexity.IDToken.Audience(childComplexity), true

	case "IDToken.AuthenticationContextClassReference":
		if e.complexity.IDToken.AuthenticationContextClassReference == nil {
			break
		}

		return e.complexity.IDToken.AuthenticationContextClassReference(childComplexity), true

	case "IDToken.AuthenticationMethodsReference":
		if e.complexity.IDToken.AuthenticationMethodsReference == nil {
			break
		}

		return e.complexity.IDToken.AuthenticationMethodsReference(childComplexity), true

	case "IDToken.AuthorizedParty":
		if e.complexity.IDToken.AuthorizedParty == nil {
			break
		}

		return e.complexity.IDToken.AuthorizedParty(childComplexity), true

	case "IDToken.Expiration":
		if e.complexity.IDToken.Expiration == nil {
			break
		}

		return e.complexity.IDToken.Expiration(childComplexity), true

	case "IDToken.Issued":
		if e.complexity.IDToken.Issued == nil {
			break
		}

		return e.complexity.IDToken.Issued(childComplexity), true

	case "IDToken.Issuer":
		if e.complexity.IDToken.Issuer == nil {
			break
		}

		return e.complexity.IDToken.Issuer(childComplexity), true

	case "IDToken.Nonce":
		if e.complexity.IDToken.Nonce == nil {
			break
		}

		return e.complexity.IDToken.Nonce(childComplexity), true

	case "IDToken.Subject":
		if e.complexity.IDToken.Subject == nil {
			break
		}

		return e.complexity.IDToken.Subject(childComplexity), true

	case "Item.Children":
		if e.complexity.Item.Children == nil {
			break
		}

		return e.complexity.Item.Children(childComplexity), true

	case "Item.Id":
		if e.complexity.Item.Id == nil {
			break
		}

		return e.complexity.Item.Id(childComplexity), true

	case "Item.Location":
		if e.complexity.Item.Location == nil {
			break
		}

		return e.complexity.Item.Location(childComplexity), true

	case "Item.Name":
		if e.complexity.Item.Name == nil {
			break
		}

		return e.complexity.Item.Name(childComplexity), true

	case "Item.Parent":
		if e.complexity.Item.Parent == nil {
			break
		}

		return e.complexity.Item.Parent(childComplexity), true

	case "Mutation.Authentication":
		if e.complexity.Mutation.Authentication == nil {
			break
		}

		return e.complexity.Mutation.Authentication(childComplexity), true

	case "Mutation.Item":
		if e.complexity.Mutation.Item == nil {
			break
		}

		args, err := ec.field_Mutation_Item_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Item(childComplexity, args["id"].(types.ItemID), args["new"].(*resolver.ItemInput)), true

	case "Mutation.ok":
		if e.complexity.Mutation.Ok == nil {
			break
		}

		return e.complexity.Mutation.Ok(childComplexity), true

	case "Mutation.User":
		if e.complexity.Mutation.User == nil {
			break
		}

		return e.complexity.Mutation.User(childComplexity), true

	case "OIDCMutation.Authenticate":
		if e.complexity.OIDCMutation.Authenticate == nil {
			break
		}

		args, err := ec.field_OIDCMutation_Authenticate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OIDCMutation.Authenticate(childComplexity, args["token"].(resolver.IDTokenInput)), true

	case "OIDCMutation.Provider":
		if e.complexity.OIDCMutation.Provider == nil {
			break
		}

		args, err := ec.field_OIDCMutation_Provider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OIDCMutation.Provider(childComplexity, args["id"].(*string), args["provider"].(*resolver.OIDCProviderInput)), true

	case "OIDCProvider.AuthorizationEndpoint":
		if e.complexity.OIDCProvider.AuthorizationEndpoint == nil {
			break
		}

		return e.complexity.OIDCProvider.AuthorizationEndpoint(childComplexity), true

	case "OIDCProvider.Callback":
		if e.complexity.OIDCProvider.Callback == nil {
			break
		}

		return e.complexity.OIDCProvider.Callback(childComplexity), true

	case "OIDCProvider.ClientID":
		if e.complexity.OIDCProvider.ClientID == nil {
			break
		}

		return e.complexity.OIDCProvider.ClientID(childComplexity), true

	case "OIDCProvider.ID":
		if e.complexity.OIDCProvider.ID == nil {
			break
		}

		return e.complexity.OIDCProvider.ID(childComplexity), true

	case "OIDCProvider.Name":
		if e.complexity.OIDCProvider.Name == nil {
			break
		}

		return e.complexity.OIDCProvider.Name(childComplexity), true

	case "OIDCProviderQuery.All":
		if e.complexity.OIDCProviderQuery.All == nil {
			break
		}

		return e.complexity.OIDCProviderQuery.All(childComplexity), true

	case "OIDCProviderQuery.ByID":
		if e.complexity.OIDCProviderQuery.ByID == nil {
			break
		}

		args, err := ec.field_OIDCProviderQuery_ByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OIDCProviderQuery.ByID(childComplexity, args["id"].(*string)), true

	case "OIDCQuery.IsValid":
		if e.complexity.OIDCQuery.IsValid == nil {
			break
		}

		args, err := ec.field_OIDCQuery_IsValid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OIDCQuery.IsValid(childComplexity, args["token"].(resolver.IDTokenInput)), true

	case "OIDCQuery.Provider":
		if e.complexity.OIDCQuery.Provider == nil {
			break
		}

		return e.complexity.OIDCQuery.Provider(childComplexity), true

	case "Query.Authentication":
		if e.complexity.Query.Authentication == nil {
			break
		}

		return e.complexity.Query.Authentication(childComplexity), true

	case "Query.Item":
		if e.complexity.Query.Item == nil {
			break
		}

		args, err := ec.field_Query_Item_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Item(childComplexity, args["id"].(types.ItemID)), true

	case "Query.ok":
		if e.complexity.Query.Ok == nil {
			break
		}

		return e.complexity.Query.Ok(childComplexity), true

	case "Query.User":
		if e.complexity.Query.User == nil {
			break
		}

		return e.complexity.Query.User(childComplexity), true

	case "RegularUser.Authentication":
		if e.complexity.RegularUser.Authentication == nil {
			break
		}

		return e.complexity.RegularUser.Authentication(childComplexity), true

	case "RegularUser.Authorizations":
		if e.complexity.RegularUser.Authorizations == nil {
			break
		}

		return e.complexity.RegularUser.Authorizations(childComplexity), true

	case "RegularUser.Created":
		if e.complexity.RegularUser.Created == nil {
			break
		}

		return e.complexity.RegularUser.Created(childComplexity), true

	case "RegularUser.Grants":
		if e.complexity.RegularUser.Grants == nil {
			break
		}

		return e.complexity.RegularUser.Grants(childComplexity), true

	case "RegularUser.History":
		if e.complexity.RegularUser.History == nil {
			break
		}

		return e.complexity.RegularUser.History(childComplexity), true

	case "RegularUser.ID":
		if e.complexity.RegularUser.ID == nil {
			break
		}

		return e.complexity.RegularUser.ID(childComplexity), true

	case "RegularUser.Name":
		if e.complexity.RegularUser.Name == nil {
			break
		}

		return e.complexity.RegularUser.Name(childComplexity), true

	case "Self.Authentication":
		if e.complexity.Self.Authentication == nil {
			break
		}

		return e.complexity.Self.Authentication(childComplexity), true

	case "Self.Authorizatons":
		if e.complexity.Self.Authorizatons == nil {
			break
		}

		return e.complexity.Self.Authorizatons(childComplexity), true

	case "Self.Grant":
		if e.complexity.Self.Grant == nil {
			break
		}

		args, err := ec.field_Self_Grant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Self.Grant(childComplexity, args["who"].(*types.RegularUserID), args["abilities"].([]types.Authorization)), true

	case "Self.GrantSpecial":
		if e.complexity.Self.GrantSpecial == nil {
			break
		}

		args, err := ec.field_Self_GrantSpecial_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Self.GrantSpecial(childComplexity, args["who"].(*types.SpecialUserID), args["abilities"].([]types.Authorization)), true

	case "Self.Grants":
		if e.complexity.Self.Grants == nil {
			break
		}

		return e.complexity.Self.Grants(childComplexity), true

	case "Self.History":
		if e.complexity.Self.History == nil {
			break
		}

		return e.complexity.Self.History(childComplexity), true

	case "Self.Name":
		if e.complexity.Self.Name == nil {
			break
		}

		return e.complexity.Self.Name(childComplexity), true

	case "SpecialUser.Authentication":
		if e.complexity.SpecialUser.Authentication == nil {
			break
		}

		return e.complexity.SpecialUser.Authentication(childComplexity), true

	case "SpecialUser.Authorizations":
		if e.complexity.SpecialUser.Authorizations == nil {
			break
		}

		return e.complexity.SpecialUser.Authorizations(childComplexity), true

	case "SpecialUser.Grants":
		if e.complexity.SpecialUser.Grants == nil {
			break
		}

		return e.complexity.SpecialUser.Grants(childComplexity), true

	case "SpecialUser.History":
		if e.complexity.SpecialUser.History == nil {
			break
		}

		return e.complexity.SpecialUser.History(childComplexity), true

	case "SpecialUser.ID":
		if e.complexity.SpecialUser.Id == nil {
			break
		}

		return e.complexity.SpecialUser.Id(childComplexity), true

	case "SpecialUser.Name":
		if e.complexity.SpecialUser.Name == nil {
			break
		}

		return e.complexity.SpecialUser.Name(childComplexity), true

	case "UserAuthentication.etc":
		if e.complexity.UserAuthentication.Etc == nil {
			break
		}

		return e.complexity.UserAuthentication.Etc(childComplexity), true

	case "UserAuthentication.OIDC":
		if e.complexity.UserAuthentication.OIDC == nil {
			break
		}

		return e.complexity.UserAuthentication.OIDC(childComplexity), true

	case "UserMutation.Regular":
		if e.complexity.UserMutation.Regular == nil {
			break
		}

		args, err := ec.field_UserMutation_Regular_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.Regular(childComplexity, args["id"].(*types.RegularUserID)), true

	case "UserMutation.Self":
		if e.complexity.UserMutation.Self == nil {
			break
		}

		return e.complexity.UserMutation.Self(childComplexity), true

	case "UserMutation.Special":
		if e.complexity.UserMutation.Special == nil {
			break
		}

		args, err := ec.field_UserMutation_Special_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.Special(childComplexity, args["id"].(*types.SpecialUserID)), true

	case "UserQuery.Regular":
		if e.complexity.UserQuery.Regular == nil {
			break
		}

		args, err := ec.field_UserQuery_Regular_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserQuery.Regular(childComplexity, args["id"].(types.RegularUserID)), true

	case "UserQuery.Self":
		if e.complexity.UserQuery.Self == nil {
			break
		}

		return e.complexity.UserQuery.Self(childComplexity), true

	case "UserQuery.Special":
		if e.complexity.UserQuery.Special == nil {
			break
		}

		args, err := ec.field_UserQuery_Special_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserQuery.Special(childComplexity, args["id"].(types.SpecialUserID)), true

	case "UserQuery.WhoCan":
		if e.complexity.UserQuery.WhoCan == nil {
			break
		}

		args, err := ec.field_UserQuery_WhoCan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserQuery.WhoCan(childComplexity, args["do"].([]types.Authorization)), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "OIDC.graphql", Input: `extend enum Authorization {
    MODIFY_VALID_AUTH
}

scalar Time
scalar OIDCProviderID

type IDToken @goModel(model: "github.com/zemnmez/tab/types.IDToken") {
    Issuer: String!
    Subject: String!
    Audience: String!
    Expiration: Time!
    Issued: Time!
    Nonce: String!
    AuthenticationContextClassReference: Int
    AuthenticationMethodsReference: [String!]!
    AuthorizedParty: String
}

input IDTokenInput {
    Issuer: String!
    Subject: String!
    Audience: String!
    Expiration: Time!
    Issued: Time!
    Nonce: String!
    AuthenticationContextClassReference: Int
    AuthenticationMethodsReference: [String!]!
    AuthorizedParty: String
}

type OIDCProvider @goModel(model: "github.com/zemnmez/tab/types.OIDCProvider") {
    ID: OIDCProviderID
    Name: String!
    Callback: String!
    AuthorizationEndpoint: String!
    ClientID: String!
}

extend type UserAuthentication {
    OIDC: [IDToken!]!
}

extend type AuthenticationQuery { OIDC: OIDCQuery } 

type OIDCQuery @goModel(model: "github.com/zemnmez/tab/gql/resolver.OIDCQuery") {
    Provider: OIDCProviderQuery
    IsValid(token: IDTokenInput): Boolean
}

type OIDCProviderQuery @goModel(model: "github.com/zemnmez/tab/gql/resolver.OIDCProviderQuery") {
    All: [OIDCProvider!]!
    ByID(id: OIDCProviderID): OIDCProvider
}


input OIDCProviderInput {
    Name: String!
}

extend type AuthenticationMutation { OIDC: OIDCMutation }

type OIDCMutation @goModel(model: "github.com/zemnmez/tab/gql/resolver.OIDCMutation") {
    # Authenticates by OIDC ID Token and returns the corresponding User, if any.
    Authenticate(token: IDTokenInput): User

    # modifies, creates or deletes an OIDC provider. If id is blank, the provider will be created.
    # If provider is blank, the provider will be deleted.
    Provider(id: OIDCProviderID, provider: OIDCProviderInput): OIDCProvider @authorized(to: [MODIFY_VALID_AUTH]) }

`},
	&ast.Source{Name: "authn.graphql", Input: `scalar etc

type UserAuthentication @goModel(model: "github.com/zemnmez/tab/gql/resolver.UserAuthentication") {
    etc: etc
}

extend interface User {
    Authentication: UserAuthentication
}

extend type Self { Authentication: UserAuthentication }
extend type RegularUser { Authentication: UserAuthentication }
extend type SpecialUser { Authentication: UserAuthentication }

extend type Query {
    Authentication: AuthenticationQuery
}

type AuthenticationQuery @goModel(model: "github.com/zemnmez/tab/gql/resolver.AuthenticationQuery") {
    etc: etc
}

extend type Mutation {
    Authentication: AuthenticationMutation
}

type AuthenticationMutation @goModel(model: "github.com/zemnmez/tab/gql/resolver.AuthenticationMutation") {
    etc: etc
}
`},
	&ast.Source{Name: "authz.graphql", Input: `directive @authorized(to: [Authorization!]!) on FIELD_DEFINITION

"""
Authorization is a list of all the possible permissions
a User can have.
"""
enum Authorization {
    VIEW_USERS
}

type AuthorizationGrant @goModel(model: "github.com/zemnmez/tab/types.AuthorizationGrant") {
    """
    From is the user which has granted permissions
    to the grantee
    """
    From: User!

    """
    Of is a list of Authorizations representing
    permissions granted to the user.
    """
    Of: [Authorization!]!

    """
    Valid returns if this grant is still valid.
    if the granter of this authorization does not
    have the appropriate permissions anymore,
    the grant is no longer valid.
    """
    Valid: Boolean
}

extend interface User {

    "The abilities granted to this user."
    Grants: [AuthorizationGrant!]!
}

extend type Self {
    Grants: [AuthorizationGrant!]!
    Authorizatons: [Authorization!]!

    "Grant a user some ability the current user has"
    Grant(who: RegularUserID, abilities: [Authorization!]!): User

    "Grant a special user some ability the current user has"
    GrantSpecial(who: SpecialUserID, abilities: [Authorization!]!): SpecialUser @authorized(to: [MODIFY_SPECIAL_USERS])
}

extend type SpecialUser {
    """
    Authorizations represents the things a user can do,
    and who granted them the ability to do these things.
    
    If the user was granted an ability by a user, and the granting user
    user lost the ability to grant it, it is no longer valid.
    """
    Grants: [AuthorizationGrant!]!

    """
    Authorizations represents the set of authorization grants
    given to this user which are still valid.
    """
    Authorizations: [Authorization!]!
}

extend type RegularUser {
    """
    Authorizations represents the things a user can do,
    and who granted them the ability to do these things.
    
    If the user was granted an ability by a user, and the granting user
    user lost the ability to grant it, it is no longer valid.
    """
    Grants: [AuthorizationGrant!]!

    """
    Authorizations represents the set of authorization grants
    given to this user which are still valid.
    """
    Authorizations: [Authorization!]!
}

extend type UserQuery {
    WhoCan(do: [Authorization!]!): [User!]!
        @authorized(to: [VIEW_USERS]),
        @goField(model: "github.com/zemnmez/tab/storage.GetUsersByAuthorization")
}`},
	&ast.Source{Name: "history.graphql", Input: `# HISTORY
# This module introduces components allowing tracking of user history.

extend enum Authorization {
    # if a user can view others history.
    VIEW_OTHER_USERS_HISTORY


    # if a user can view their own history.
    # the anonymous user cannot view their own history.
    VIEW_OWN_HISTORY
}

extend interface User {
    History: [HistoryItem!]!
}

extend type Self {
    History: [HistoryItem!]! @authorized(to: [VIEW_OWN_HISTORY])
}

extend type RegularUser {
    History: [HistoryItem!]! @authorized(to: [VIEW_OTHER_USERS_HISTORY])
}

extend type SpecialUser {
    History: [HistoryItem!]! @authorized(to: [VIEW_OTHER_USERS_HISTORY])
}

# A HistoryItem represents a single thing that happened in this user's history
type HistoryItem  @goModel(model: "github.com/zemnmez/tab/types.HistoryItem") {
    Action: String!
    By: User!
    RequestData: String!
    IPAddress: String!
}`},
	&ast.Source{Name: "item.graphql", Input: `
# ItemID represents the unique identifier of an Item
scalar ItemID @goModel(model: "github.com/zemnmez/tab/types.ItemID")

extend enum Authorization {
    ADD_ITEMS
    MODIFY_ITEMS
}

type Item @goModel(model: "github.com/zemnmez/tab/types.Item") {
  # A unique identifier for this Item
  Id: ItemID!

  # The name of this Item
  Name: String!

  # The location of this Item
  Location: String!

  # This Item's parent, or none
  Parent: Item

  # This item's children
  Children: [Item!]!
}

# An input item can either be an existing item by ItemID or
# a new defined item structure.
input ItemInput {
    ById: ItemID
    WithStructure: DefinedItemInput
}

input DefinedItemInput {
    Name: String!
    Location: String!
    Parent: ItemInput
    Children: [ItemInput!]!
}

extend type Query {
    Item(id: ItemID!): Item @authorized(to: [VIEW_ITEMS])
}

extend type Mutation {
    # Item creates or modifies a given item by ItemID. The ItemInput can be either an object or an id.
    # If ItemInput is defined, but neither ById or WithStructure is defined the item is deleted.
    Item(id: ItemID!, new: ItemInput): Item! @authorized(to: [MODIFY_ITEMS])
}`},
	&ast.Source{Name: "root.graphql", Input: `directive @goModel(model: String, models: [String!]) on OBJECT 
    | INPUT_OBJECT 
    | SCALAR 
    | ENUM 
    | INTERFACE 
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION 
    | FIELD_DEFINITION

type Query @goModel(model: "github.com/zemnmez/tab/gql/resolver.Query") {
  ok: Boolean
}

type Mutation @goModel(model: "github.com/zemnmez/tab/gql/resolver.Mutation") {
  ok: Boolean
}`},
	&ast.Source{Name: "user.graphql", Input: `# USERS
# This module deals with users existing!

# RegularUserID represents the ID of a regular user i.e. a user that is not ANONYMOUS or ROOT.
scalar RegularUserID @goModel(model: "github.com/zemnmez/tab/types.RegularUserID")

# Special users are singleton users with special functionality
enum SpecialUserID {
    # The root user is the ultimate source of all authorization grants.
    ROOT

    # The Anonymous user is the user unauthenticated users are said to be 'logged into'.
    ANONYMOUS
}

interface User @goModel(model: "github.com/zemnmez/tab/gql/resolver.User") {
    Name: String!
}

type Self implements User {
    Name: String!
}

# RegularUsers are the normal rank and file users!
type RegularUser implements User @goModel(model: "github.com/zemnmez/tab/types.RegularUser") {
    # ID is the unique identifier of this user. It may be a SpecialUserID
    # if this is a special user, like root.
    ID: RegularUserID!

    # Name is the name of this user.
    Name: String!

    Created: Time!
}

# SpecialUsers are special singleton accounts like ANONYMOUS and ROOT
type SpecialUser implements User @goModel(model: "github.com/zemnmez/tab/types.SpecialUser") {
    ID: SpecialUserID!
    Name: String!
}

# UserInput is the values a User can be created with
input UserInput {
    Name: String!
}

# The root user is the ultimate source of all authorization grants.
input RootUser {
    ID: SpecialUserID! = ADMIN
    Name: String! = "Root"
}

# The anonymous user is the user unauthenticated users are said to be logged into.
input AnonymousUser {
    ID: SpecialUserID! = ANONYMOUS
    Name: String! = "Anonymous"
}

extend type Query {
    User: UserQuery
}

type UserQuery @goModel(model: "github.com/zemnmez/tab/gql/resolver.UserQuery") {
    # Self returns the currently logged in user
    Self: Self!

    Special(id: SpecialUserID): SpecialUser @authorized(to: [VIEW_USERS])
    Regular(id: RegularUserID): RegularUser @authorized(to: [VIEW_USERS])
}

extend enum Authorization {
    # modify other users profiles
    MODIFY_OTHER_USERS

    # modify root / anonymous
    MODIFY_SPECIAL_USERS

    # edit the details of my own user (anonymous user cannot do this)
    MODIFY_SELF
}

extend type Mutation {
    # User returns a UserMutator which can be used to modify
    # a given user id
    User: UserMutation
}

type UserMutation @goModel(model: "github.com/zemnmez/tab/gql/resolver.UserMutation") {
    Self: UserMutator! @authorized(to: [MODIFY_SELF])
    Special(id: SpecialUserID): UserMutator @authorized(to: [MODIFY_SPECIAL_USERS])
    Regular(id: RegularUserID): UserMutator @authorized(to: [MODIFY_OTHER_USERS])
}

interface UserMutator @goModel(model: "github.com/zemnmez/tab/gql/resolver.UserMutator") {
    Modify(with: UserInput!): User!
}`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_authorized_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []types.Authorization
	if tmp, ok := rawArgs["to"]; ok {
		arg0, err = ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Item_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.ItemID
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNItemID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *resolver.ItemInput
	if tmp, ok := rawArgs["new"]; ok {
		arg1, err = ec.unmarshalOItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new"] = arg1
	return args, nil
}

func (ec *executionContext) field_OIDCMutation_Authenticate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 resolver.IDTokenInput
	if tmp, ok := rawArgs["token"]; ok {
		arg0, err = ec.unmarshalOIDTokenInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐIDTokenInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_OIDCMutation_Provider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOOIDCProviderID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *resolver.OIDCProviderInput
	if tmp, ok := rawArgs["provider"]; ok {
		arg1, err = ec.unmarshalOOIDCProviderInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCProviderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["provider"] = arg1
	return args, nil
}

func (ec *executionContext) field_OIDCProviderQuery_ByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOOIDCProviderID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_OIDCQuery_IsValid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 resolver.IDTokenInput
	if tmp, ok := rawArgs["token"]; ok {
		arg0, err = ec.unmarshalOIDTokenInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐIDTokenInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Item_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.ItemID
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNItemID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Self_GrantSpecial_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *types.SpecialUserID
	if tmp, ok := rawArgs["who"]; ok {
		arg0, err = ec.unmarshalOSpecialUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["who"] = arg0
	var arg1 []types.Authorization
	if tmp, ok := rawArgs["abilities"]; ok {
		arg1, err = ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["abilities"] = arg1
	return args, nil
}

func (ec *executionContext) field_Self_Grant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *types.RegularUserID
	if tmp, ok := rawArgs["who"]; ok {
		arg0, err = ec.unmarshalORegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["who"] = arg0
	var arg1 []types.Authorization
	if tmp, ok := rawArgs["abilities"]; ok {
		arg1, err = ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["abilities"] = arg1
	return args, nil
}

func (ec *executionContext) field_UserMutation_Regular_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *types.RegularUserID
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalORegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_Special_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *types.SpecialUserID
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOSpecialUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserQuery_Regular_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.RegularUserID
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalORegularUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserQuery_Special_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 types.SpecialUserID
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalOSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserQuery_WhoCan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []types.Authorization
	if tmp, ok := rawArgs["do"]; ok {
		arg0, err = ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["do"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AuthenticationMutation_etc(ctx context.Context, field graphql.CollectedField, obj *resolver.AuthenticationMutation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthenticationMutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthenticationMutation().Etc(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOetc2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthenticationMutation_OIDC(ctx context.Context, field graphql.CollectedField, obj *resolver.AuthenticationMutation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthenticationMutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OIDC(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(resolver.OIDCMutation)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOOIDCMutation2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthenticationQuery_etc(ctx context.Context, field graphql.CollectedField, obj *resolver.AuthenticationQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthenticationQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthenticationQuery().Etc(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOetc2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthenticationQuery_OIDC(ctx context.Context, field graphql.CollectedField, obj *resolver.AuthenticationQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthenticationQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthenticationQuery().Oidc(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resolver.OIDCQuery)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOOIDCQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthorizationGrant_From(ctx context.Context, field graphql.CollectedField, obj *types.AuthorizationGrant) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthorizationGrant",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthorizationGrant().From(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(resolver.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthorizationGrant_Of(ctx context.Context, field graphql.CollectedField, obj *types.AuthorizationGrant) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthorizationGrant",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Of, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]types.Authorization)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthorizationGrant_Valid(ctx context.Context, field graphql.CollectedField, obj *types.AuthorizationGrant) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AuthorizationGrant",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthorizationGrant().Valid(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryItem_Action(ctx context.Context, field graphql.CollectedField, obj *types.HistoryItem) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HistoryItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryItem_By(ctx context.Context, field graphql.CollectedField, obj *types.HistoryItem) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HistoryItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.HistoryItem().By(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(resolver.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryItem_RequestData(ctx context.Context, field graphql.CollectedField, obj *types.HistoryItem) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HistoryItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HistoryItem_IPAddress(ctx context.Context, field graphql.CollectedField, obj *types.HistoryItem) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HistoryItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IDToken_Issuer(ctx context.Context, field graphql.CollectedField, obj *types.IDToken) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IDToken",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issuer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IDToken_Subject(ctx context.Context, field graphql.CollectedField, obj *types.IDToken) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IDToken",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IDToken_Audience(ctx context.Context, field graphql.CollectedField, obj *types.IDToken) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IDToken",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Audience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IDToken_Expiration(ctx context.Context, field graphql.CollectedField, obj *types.IDToken) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IDToken",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expiration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IDToken_Issued(ctx context.Context, field graphql.CollectedField, obj *types.IDToken) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IDToken",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IDToken_Nonce(ctx context.Context, field graphql.CollectedField, obj *types.IDToken) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IDToken",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nonce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IDToken_AuthenticationContextClassReference(ctx context.Context, field graphql.CollectedField, obj *types.IDToken) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IDToken",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthenticationContextClassReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _IDToken_AuthenticationMethodsReference(ctx context.Context, field graphql.CollectedField, obj *types.IDToken) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IDToken",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthenticationMethodsReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IDToken_AuthorizedParty(ctx context.Context, field graphql.CollectedField, obj *types.IDToken) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IDToken",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorizedParty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_Id(ctx context.Context, field graphql.CollectedField, obj *types.Item) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.ItemID)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNItemID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_Name(ctx context.Context, field graphql.CollectedField, obj *types.Item) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_Location(ctx context.Context, field graphql.CollectedField, obj *types.Item) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_Parent(ctx context.Context, field graphql.CollectedField, obj *types.Item) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Item",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Item().Parent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_Children(ctx context.Context, field graphql.CollectedField, obj *types.Item) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Item",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Item().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNItem2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ok(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Ok(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Authentication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Authentication(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resolver.AuthenticationMutation)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOAuthenticationMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐAuthenticationMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Item(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Item_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().Item(rctx, args["id"].(types.ItemID), args["new"].(*resolver.ItemInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"MODIFY_ITEMS"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, nil, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*types.Item); ok {
			return data, nil
		} else if tmp == nil {
			return nil, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/zemnmez/tab/types.Item`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_User(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().User(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resolver.UserMutation)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCMutation_Authenticate(ctx context.Context, field graphql.CollectedField, obj *resolver.OIDCMutation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCMutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_OIDCMutation_Authenticate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authenticate(args["token"].(resolver.IDTokenInput)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(resolver.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCMutation_Provider(ctx context.Context, field graphql.CollectedField, obj *resolver.OIDCMutation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCMutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_OIDCMutation_Provider_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.OIDCMutation().Provider(rctx, obj, args["id"].(*string), args["provider"].(*resolver.OIDCProviderInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"MODIFY_VALID_AUTH"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*types.OIDCProvider); ok {
			return data, nil
		} else if tmp == nil {
			return nil, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/zemnmez/tab/types.OIDCProvider`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.OIDCProvider)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOOIDCProvider2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐOIDCProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCProvider_ID(ctx context.Context, field graphql.CollectedField, obj *types.OIDCProvider) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCProvider",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OIDCProvider().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOOIDCProviderID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCProvider_Name(ctx context.Context, field graphql.CollectedField, obj *types.OIDCProvider) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCProvider",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCProvider_Callback(ctx context.Context, field graphql.CollectedField, obj *types.OIDCProvider) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCProvider",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Callback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCProvider_AuthorizationEndpoint(ctx context.Context, field graphql.CollectedField, obj *types.OIDCProvider) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCProvider",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorizationEndpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCProvider_ClientID(ctx context.Context, field graphql.CollectedField, obj *types.OIDCProvider) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCProvider",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCProviderQuery_All(ctx context.Context, field graphql.CollectedField, obj *resolver.OIDCProviderQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCProviderQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]types.OIDCProvider)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOIDCProvider2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐOIDCProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCProviderQuery_ByID(ctx context.Context, field graphql.CollectedField, obj *resolver.OIDCProviderQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCProviderQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_OIDCProviderQuery_ByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OIDCProviderQuery().ByID(rctx, obj, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.OIDCProvider)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOOIDCProvider2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐOIDCProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCQuery_Provider(ctx context.Context, field graphql.CollectedField, obj *resolver.OIDCQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(resolver.OIDCProviderQuery)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOOIDCProviderQuery2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCProviderQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _OIDCQuery_IsValid(ctx context.Context, field graphql.CollectedField, obj *resolver.OIDCQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OIDCQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_OIDCQuery_IsValid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid(args["token"].(resolver.IDTokenInput)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ok(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Ok(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Authentication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Authentication(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resolver.AuthenticationQuery)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOAuthenticationQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐAuthenticationQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Item(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Item_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Item(rctx, args["id"].(types.ItemID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"VIEW_ITEMS"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, nil, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*types.Item); ok {
			return data, nil
		} else if tmp == nil {
			return nil, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/zemnmez/tab/types.Item`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_User(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resolver.UserQuery)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RegularUser_ID(ctx context.Context, field graphql.CollectedField, obj *types.RegularUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RegularUser",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RegularUser().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*types.RegularUserID)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx, field.Selections, res)
}

func (ec *executionContext) _RegularUser_Name(ctx context.Context, field graphql.CollectedField, obj *types.RegularUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RegularUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RegularUser_Created(ctx context.Context, field graphql.CollectedField, obj *types.RegularUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RegularUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegularUser_Authentication(ctx context.Context, field graphql.CollectedField, obj *types.RegularUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RegularUser",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RegularUser().Authentication(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resolver.UserAuthentication)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserAuthentication2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserAuthentication(ctx, field.Selections, res)
}

func (ec *executionContext) _RegularUser_Grants(ctx context.Context, field graphql.CollectedField, obj *types.RegularUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RegularUser",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RegularUser().Grants(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AuthorizationGrant)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAuthorizationGrant2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorizationGrant(ctx, field.Selections, res)
}

func (ec *executionContext) _RegularUser_Authorizations(ctx context.Context, field graphql.CollectedField, obj *types.RegularUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RegularUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authorizations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]types.Authorization)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, field.Selections, res)
}

func (ec *executionContext) _RegularUser_History(ctx context.Context, field graphql.CollectedField, obj *types.RegularUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RegularUser",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.RegularUser().History(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"VIEW_OTHER_USERS_HISTORY"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]*types.HistoryItem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/zemnmez/tab/types.HistoryItem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.HistoryItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHistoryItem2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐHistoryItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Self_Name(ctx context.Context, field graphql.CollectedField, obj *resolver.Self) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Self",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Self_Authentication(ctx context.Context, field graphql.CollectedField, obj *resolver.Self) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Self",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authentication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resolver.UserAuthentication)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserAuthentication2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserAuthentication(ctx, field.Selections, res)
}

func (ec *executionContext) _Self_Grants(ctx context.Context, field graphql.CollectedField, obj *resolver.Self) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Self",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AuthorizationGrant)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAuthorizationGrant2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorizationGrant(ctx, field.Selections, res)
}

func (ec *executionContext) _Self_Authorizatons(ctx context.Context, field graphql.CollectedField, obj *resolver.Self) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Self",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authorizatons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]types.Authorization)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, field.Selections, res)
}

func (ec *executionContext) _Self_Grant(ctx context.Context, field graphql.CollectedField, obj *resolver.Self) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Self",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Self_Grant_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(resolver.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Self_GrantSpecial(ctx context.Context, field graphql.CollectedField, obj *resolver.Self) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Self",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Self_GrantSpecial_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.GrantSpecial, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"MODIFY_SPECIAL_USERS"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*types.SpecialUser); ok {
			return data, nil
		} else if tmp == nil {
			return nil, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/zemnmez/tab/types.SpecialUser`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*types.SpecialUser)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSpecialUser2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Self_History(ctx context.Context, field graphql.CollectedField, obj *resolver.Self) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Self",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.History, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"VIEW_OWN_HISTORY"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]*types.HistoryItem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/zemnmez/tab/types.HistoryItem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.HistoryItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHistoryItem2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐHistoryItem(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialUser_ID(ctx context.Context, field graphql.CollectedField, obj *types.SpecialUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SpecialUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(types.SpecialUserID)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialUser_Name(ctx context.Context, field graphql.CollectedField, obj *types.SpecialUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SpecialUser",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpecialUser().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialUser_Authentication(ctx context.Context, field graphql.CollectedField, obj *types.SpecialUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SpecialUser",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpecialUser().Authentication(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resolver.UserAuthentication)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserAuthentication2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserAuthentication(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialUser_Grants(ctx context.Context, field graphql.CollectedField, obj *types.SpecialUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SpecialUser",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpecialUser().Grants(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.AuthorizationGrant)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAuthorizationGrant2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorizationGrant(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialUser_Authorizations(ctx context.Context, field graphql.CollectedField, obj *types.SpecialUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SpecialUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authorizations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]types.Authorization)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, field.Selections, res)
}

func (ec *executionContext) _SpecialUser_History(ctx context.Context, field graphql.CollectedField, obj *types.SpecialUser) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SpecialUser",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SpecialUser().History(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"VIEW_OTHER_USERS_HISTORY"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]*types.HistoryItem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/zemnmez/tab/types.HistoryItem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*types.HistoryItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHistoryItem2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐHistoryItem(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAuthentication_etc(ctx context.Context, field graphql.CollectedField, obj *resolver.UserAuthentication) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserAuthentication",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserAuthentication().Etc(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOetc2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAuthentication_OIDC(ctx context.Context, field graphql.CollectedField, obj *resolver.UserAuthentication) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserAuthentication",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OIDC(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]types.IDToken)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIDToken2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐIDToken(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_Self(ctx context.Context, field graphql.CollectedField, obj *resolver.UserMutation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserMutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Self(), nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"MODIFY_SELF"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(resolver.UserMutator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/zemnmez/tab/gql/resolver.UserMutator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(resolver.UserMutator)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserMutator(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_Special(ctx context.Context, field graphql.CollectedField, obj *resolver.UserMutation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserMutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_Special_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserMutation().Special(rctx, obj, args["id"].(*types.SpecialUserID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"MODIFY_SPECIAL_USERS"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(resolver.UserMutator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/zemnmez/tab/gql/resolver.UserMutator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(resolver.UserMutator)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserMutator(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_Regular(ctx context.Context, field graphql.CollectedField, obj *resolver.UserMutation) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserMutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_Regular_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserMutation().Regular(rctx, obj, args["id"].(*types.RegularUserID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"MODIFY_OTHER_USERS"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(resolver.UserMutator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/zemnmez/tab/gql/resolver.UserMutator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(resolver.UserMutator)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserMutator(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_Self(ctx context.Context, field graphql.CollectedField, obj *resolver.UserQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Self(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(resolver.Self)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNSelf2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐSelf(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_Special(ctx context.Context, field graphql.CollectedField, obj *resolver.UserQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserQuery_Special_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Special(args["id"].(types.SpecialUserID)), nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"VIEW_USERS"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(types.SpecialUser); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/zemnmez/tab/types.SpecialUser`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.SpecialUser)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSpecialUser2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_Regular(ctx context.Context, field graphql.CollectedField, obj *resolver.UserQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserQuery_Regular_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Regular(args["id"].(types.RegularUserID)), nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"VIEW_USERS"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(types.RegularUser); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/zemnmez/tab/types.RegularUser`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(types.RegularUser)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORegularUser2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_WhoCan(ctx context.Context, field graphql.CollectedField, obj *resolver.UserQuery) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserQuery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserQuery_WhoCan_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.UserQuery().WhoCan(rctx, obj, args["do"].([]types.Authorization))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, []interface{}{"VIEW_USERS"})
			if err != nil {
				return nil, err
			}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]resolver.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/zemnmez/tab/gql/resolver.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]resolver.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__DirectiveLocation2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAnonymousUser(ctx context.Context, obj interface{}) (resolver.AnonymousUser, error) {
	var it resolver.AnonymousUser
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["ID"]; !present {
		asMap["ID"] = "ANONYMOUS"
	}
	if _, present := asMap["Name"]; !present {
		asMap["Name"] = "Anonymous"
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error
			it.ID, err = ec.unmarshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx, v)
			if err != nil {
				return it, err
			}
		case "Name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDefinedItemInput(ctx context.Context, obj interface{}) (resolver.DefinedItemInput, error) {
	var it resolver.DefinedItemInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Location":
			var err error
			it.Location, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Parent":
			var err error
			it.Parent, err = ec.unmarshalOItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Children":
			var err error
			it.Children, err = ec.unmarshalNItemInput2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIDTokenInput(ctx context.Context, obj interface{}) (resolver.IDTokenInput, error) {
	var it resolver.IDTokenInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Issuer":
			var err error
			it.Issuer, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subject":
			var err error
			it.Subject, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Audience":
			var err error
			it.Audience, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Expiration":
			var err error
			it.Expiration, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Issued":
			var err error
			it.Issued, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Nonce":
			var err error
			it.Nonce, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "AuthenticationContextClassReference":
			var err error
			it.AuthenticationContextClassReference, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "AuthenticationMethodsReference":
			var err error
			it.AuthenticationMethodsReference, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "AuthorizedParty":
			var err error
			it.AuthorizedParty, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputItemInput(ctx context.Context, obj interface{}) (resolver.ItemInput, error) {
	var it resolver.ItemInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ById":
			var err error
			it.ByID, err = ec.unmarshalOItemID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx, v)
			if err != nil {
				return it, err
			}
		case "WithStructure":
			var err error
			it.WithStructure, err = ec.unmarshalODefinedItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐDefinedItemInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOIDCProviderInput(ctx context.Context, obj interface{}) (resolver.OIDCProviderInput, error) {
	var it resolver.OIDCProviderInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRootUser(ctx context.Context, obj interface{}) (resolver.RootUser, error) {
	var it resolver.RootUser
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["ID"]; !present {
		asMap["ID"] = "ADMIN"
	}
	if _, present := asMap["Name"]; !present {
		asMap["Name"] = "Root"
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error
			it.ID, err = ec.unmarshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx, v)
			if err != nil {
				return it, err
			}
		case "Name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (resolver.UserInput, error) {
	var it resolver.UserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *resolver.User) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case resolver.Self:
		return ec._Self(ctx, sel, &obj)
	case *resolver.Self:
		return ec._Self(ctx, sel, obj)
	case *types.RegularUser:
		return ec._RegularUser(ctx, sel, obj)
	case types.SpecialUser:
		return ec._SpecialUser(ctx, sel, &obj)
	case *types.SpecialUser:
		return ec._SpecialUser(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UserMutator(ctx context.Context, sel ast.SelectionSet, obj *resolver.UserMutator) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var authenticationMutationImplementors = []string{"AuthenticationMutation"}

func (ec *executionContext) _AuthenticationMutation(ctx context.Context, sel ast.SelectionSet, obj *resolver.AuthenticationMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, authenticationMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthenticationMutation")
		case "etc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthenticationMutation_etc(ctx, field, obj)
				return res
			})
		case "OIDC":
			out.Values[i] = ec._AuthenticationMutation_OIDC(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authenticationQueryImplementors = []string{"AuthenticationQuery"}

func (ec *executionContext) _AuthenticationQuery(ctx context.Context, sel ast.SelectionSet, obj *resolver.AuthenticationQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, authenticationQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthenticationQuery")
		case "etc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthenticationQuery_etc(ctx, field, obj)
				return res
			})
		case "OIDC":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthenticationQuery_OIDC(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authorizationGrantImplementors = []string{"AuthorizationGrant"}

func (ec *executionContext) _AuthorizationGrant(ctx context.Context, sel ast.SelectionSet, obj *types.AuthorizationGrant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, authorizationGrantImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorizationGrant")
		case "From":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthorizationGrant_From(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Of":
			out.Values[i] = ec._AuthorizationGrant_Of(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Valid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthorizationGrant_Valid(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var historyItemImplementors = []string{"HistoryItem"}

func (ec *executionContext) _HistoryItem(ctx context.Context, sel ast.SelectionSet, obj *types.HistoryItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, historyItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistoryItem")
		case "Action":
			out.Values[i] = ec._HistoryItem_Action(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "By":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._HistoryItem_By(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "RequestData":
			out.Values[i] = ec._HistoryItem_RequestData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "IPAddress":
			out.Values[i] = ec._HistoryItem_IPAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iDTokenImplementors = []string{"IDToken"}

func (ec *executionContext) _IDToken(ctx context.Context, sel ast.SelectionSet, obj *types.IDToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iDTokenImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IDToken")
		case "Issuer":
			out.Values[i] = ec._IDToken_Issuer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subject":
			out.Values[i] = ec._IDToken_Subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Audience":
			out.Values[i] = ec._IDToken_Audience(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Expiration":
			out.Values[i] = ec._IDToken_Expiration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Issued":
			out.Values[i] = ec._IDToken_Issued(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Nonce":
			out.Values[i] = ec._IDToken_Nonce(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AuthenticationContextClassReference":
			out.Values[i] = ec._IDToken_AuthenticationContextClassReference(ctx, field, obj)
		case "AuthenticationMethodsReference":
			out.Values[i] = ec._IDToken_AuthenticationMethodsReference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AuthorizedParty":
			out.Values[i] = ec._IDToken_AuthorizedParty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var itemImplementors = []string{"Item"}

func (ec *executionContext) _Item(ctx context.Context, sel ast.SelectionSet, obj *types.Item) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, itemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Item")
		case "Id":
			out.Values[i] = ec._Item_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Name":
			out.Values[i] = ec._Item_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Location":
			out.Values[i] = ec._Item_Location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Parent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Item_Parent(ctx, field, obj)
				return res
			})
		case "Children":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Item_Children(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "ok":
			out.Values[i] = ec._Mutation_ok(ctx, field)
		case "Authentication":
			out.Values[i] = ec._Mutation_Authentication(ctx, field)
		case "Item":
			out.Values[i] = ec._Mutation_Item(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "User":
			out.Values[i] = ec._Mutation_User(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oIDCMutationImplementors = []string{"OIDCMutation"}

func (ec *executionContext) _OIDCMutation(ctx context.Context, sel ast.SelectionSet, obj *resolver.OIDCMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, oIDCMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OIDCMutation")
		case "Authenticate":
			out.Values[i] = ec._OIDCMutation_Authenticate(ctx, field, obj)
		case "Provider":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OIDCMutation_Provider(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oIDCProviderImplementors = []string{"OIDCProvider"}

func (ec *executionContext) _OIDCProvider(ctx context.Context, sel ast.SelectionSet, obj *types.OIDCProvider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, oIDCProviderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OIDCProvider")
		case "ID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OIDCProvider_ID(ctx, field, obj)
				return res
			})
		case "Name":
			out.Values[i] = ec._OIDCProvider_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Callback":
			out.Values[i] = ec._OIDCProvider_Callback(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "AuthorizationEndpoint":
			out.Values[i] = ec._OIDCProvider_AuthorizationEndpoint(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ClientID":
			out.Values[i] = ec._OIDCProvider_ClientID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oIDCProviderQueryImplementors = []string{"OIDCProviderQuery"}

func (ec *executionContext) _OIDCProviderQuery(ctx context.Context, sel ast.SelectionSet, obj *resolver.OIDCProviderQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, oIDCProviderQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OIDCProviderQuery")
		case "All":
			out.Values[i] = ec._OIDCProviderQuery_All(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OIDCProviderQuery_ByID(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oIDCQueryImplementors = []string{"OIDCQuery"}

func (ec *executionContext) _OIDCQuery(ctx context.Context, sel ast.SelectionSet, obj *resolver.OIDCQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, oIDCQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OIDCQuery")
		case "Provider":
			out.Values[i] = ec._OIDCQuery_Provider(ctx, field, obj)
		case "IsValid":
			out.Values[i] = ec._OIDCQuery_IsValid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "ok":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ok(ctx, field)
				return res
			})
		case "Authentication":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Authentication(ctx, field)
				return res
			})
		case "Item":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Item(ctx, field)
				return res
			})
		case "User":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_User(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regularUserImplementors = []string{"RegularUser", "User"}

func (ec *executionContext) _RegularUser(ctx context.Context, sel ast.SelectionSet, obj *types.RegularUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, regularUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegularUser")
		case "ID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RegularUser_ID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Name":
			out.Values[i] = ec._RegularUser_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Created":
			out.Values[i] = ec._RegularUser_Created(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Authentication":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RegularUser_Authentication(ctx, field, obj)
				return res
			})
		case "Grants":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RegularUser_Grants(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Authorizations":
			out.Values[i] = ec._RegularUser_Authorizations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "History":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RegularUser_History(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var selfImplementors = []string{"Self", "User"}

func (ec *executionContext) _Self(ctx context.Context, sel ast.SelectionSet, obj *resolver.Self) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, selfImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Self")
		case "Name":
			out.Values[i] = ec._Self_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Authentication":
			out.Values[i] = ec._Self_Authentication(ctx, field, obj)
		case "Grants":
			out.Values[i] = ec._Self_Grants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Authorizatons":
			out.Values[i] = ec._Self_Authorizatons(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Grant":
			out.Values[i] = ec._Self_Grant(ctx, field, obj)
		case "GrantSpecial":
			out.Values[i] = ec._Self_GrantSpecial(ctx, field, obj)
		case "History":
			out.Values[i] = ec._Self_History(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var specialUserImplementors = []string{"SpecialUser", "User"}

func (ec *executionContext) _SpecialUser(ctx context.Context, sel ast.SelectionSet, obj *types.SpecialUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, specialUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpecialUser")
		case "ID":
			out.Values[i] = ec._SpecialUser_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Name":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpecialUser_Name(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Authentication":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpecialUser_Authentication(ctx, field, obj)
				return res
			})
		case "Grants":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpecialUser_Grants(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Authorizations":
			out.Values[i] = ec._SpecialUser_Authorizations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "History":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpecialUser_History(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userAuthenticationImplementors = []string{"UserAuthentication"}

func (ec *executionContext) _UserAuthentication(ctx context.Context, sel ast.SelectionSet, obj *resolver.UserAuthentication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userAuthenticationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAuthentication")
		case "etc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserAuthentication_etc(ctx, field, obj)
				return res
			})
		case "OIDC":
			out.Values[i] = ec._UserAuthentication_OIDC(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userMutationImplementors = []string{"UserMutation"}

func (ec *executionContext) _UserMutation(ctx context.Context, sel ast.SelectionSet, obj *resolver.UserMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserMutation")
		case "Self":
			out.Values[i] = ec._UserMutation_Self(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Special":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_Special(ctx, field, obj)
				return res
			})
		case "Regular":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_Regular(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userQueryImplementors = []string{"UserQuery"}

func (ec *executionContext) _UserQuery(ctx context.Context, sel ast.SelectionSet, obj *resolver.UserQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserQuery")
		case "Self":
			out.Values[i] = ec._UserQuery_Self(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Special":
			out.Values[i] = ec._UserQuery_Special(ctx, field, obj)
		case "Regular":
			out.Values[i] = ec._UserQuery_Regular(ctx, field, obj)
		case "WhoCan":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserQuery_WhoCan(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAuthorization2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx context.Context, v interface{}) (types.Authorization, error) {
	var res types.Authorization
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAuthorization2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx context.Context, sel ast.SelectionSet, v types.Authorization) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx context.Context, v interface{}) ([]types.Authorization, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]types.Authorization, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAuthorization2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx context.Context, sel ast.SelectionSet, v []types.Authorization) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthorization2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAuthorizationGrant2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorizationGrant(ctx context.Context, sel ast.SelectionSet, v types.AuthorizationGrant) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAuthorizationGrant2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorizationGrant(ctx context.Context, sel ast.SelectionSet, v []*types.AuthorizationGrant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthorizationGrant2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorizationGrant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAuthorizationGrant2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐAuthorizationGrant(ctx context.Context, sel ast.SelectionSet, v *types.AuthorizationGrant) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNHistoryItem2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐHistoryItem(ctx context.Context, sel ast.SelectionSet, v types.HistoryItem) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNHistoryItem2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐHistoryItem(ctx context.Context, sel ast.SelectionSet, v []*types.HistoryItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHistoryItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐHistoryItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNHistoryItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐHistoryItem(ctx context.Context, sel ast.SelectionSet, v *types.HistoryItem) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNIDToken2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐIDToken(ctx context.Context, sel ast.SelectionSet, v types.IDToken) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNIDToken2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐIDToken(ctx context.Context, sel ast.SelectionSet, v []types.IDToken) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIDToken2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐIDToken(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNItem2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx context.Context, sel ast.SelectionSet, v types.Item) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNItem2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx context.Context, sel ast.SelectionSet, v []*types.Item) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx context.Context, sel ast.SelectionSet, v *types.Item) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNItemID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx context.Context, v interface{}) (types.ItemID, error) {
	var res types.ItemID
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNItemID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx context.Context, sel ast.SelectionSet, v types.ItemID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNItemID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx context.Context, v interface{}) (*types.ItemID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNItemID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNItemID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx context.Context, sel ast.SelectionSet, v *types.ItemID) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNItemInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx context.Context, v interface{}) (resolver.ItemInput, error) {
	return ec.unmarshalInputItemInput(ctx, v)
}

func (ec *executionContext) unmarshalNItemInput2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx context.Context, v interface{}) ([]*resolver.ItemInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*resolver.ItemInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx context.Context, v interface{}) (*resolver.ItemInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNItemInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNOIDCProvider2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐOIDCProvider(ctx context.Context, sel ast.SelectionSet, v types.OIDCProvider) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOIDCProvider2ᚕgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐOIDCProvider(ctx context.Context, sel ast.SelectionSet, v []types.OIDCProvider) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOIDCProvider2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐOIDCProvider(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNRegularUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx context.Context, v interface{}) (types.RegularUserID, error) {
	var res types.RegularUserID
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRegularUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx context.Context, sel ast.SelectionSet, v types.RegularUserID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx context.Context, v interface{}) (*types.RegularUserID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRegularUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx context.Context, sel ast.SelectionSet, v *types.RegularUserID) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNSelf2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐSelf(ctx context.Context, sel ast.SelectionSet, v resolver.Self) graphql.Marshaler {
	return ec._Self(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx context.Context, v interface{}) (types.SpecialUserID, error) {
	var res types.SpecialUserID
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx context.Context, sel ast.SelectionSet, v types.SpecialUserID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	return graphql.UnmarshalTime(v)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.marshalNTime2timeᚐTime(ctx, sel, *v)
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUser(ctx context.Context, sel ast.SelectionSet, v resolver.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUser(ctx context.Context, sel ast.SelectionSet, v []resolver.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserMutator(ctx context.Context, sel ast.SelectionSet, v resolver.UserMutator) graphql.Marshaler {
	return ec._UserMutator(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAuthenticationMutation2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐAuthenticationMutation(ctx context.Context, sel ast.SelectionSet, v resolver.AuthenticationMutation) graphql.Marshaler {
	return ec._AuthenticationMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthenticationMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐAuthenticationMutation(ctx context.Context, sel ast.SelectionSet, v *resolver.AuthenticationMutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthenticationMutation(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthenticationQuery2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐAuthenticationQuery(ctx context.Context, sel ast.SelectionSet, v resolver.AuthenticationQuery) graphql.Marshaler {
	return ec._AuthenticationQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthenticationQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐAuthenticationQuery(ctx context.Context, sel ast.SelectionSet, v *resolver.AuthenticationQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthenticationQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) unmarshalODefinedItemInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐDefinedItemInput(ctx context.Context, v interface{}) (resolver.DefinedItemInput, error) {
	return ec.unmarshalInputDefinedItemInput(ctx, v)
}

func (ec *executionContext) unmarshalODefinedItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐDefinedItemInput(ctx context.Context, v interface{}) (*resolver.DefinedItemInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalODefinedItemInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐDefinedItemInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOIDTokenInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐIDTokenInput(ctx context.Context, v interface{}) (resolver.IDTokenInput, error) {
	return ec.unmarshalInputIDTokenInput(ctx, v)
}

func (ec *executionContext) unmarshalOIDTokenInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐIDTokenInput(ctx context.Context, v interface{}) (*resolver.IDTokenInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIDTokenInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐIDTokenInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2int64(ctx context.Context, v interface{}) (int64, error) {
	return graphql.UnmarshalInt64(v)
}

func (ec *executionContext) marshalOInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	return graphql.MarshalInt64(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) marshalOItem2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx context.Context, sel ast.SelectionSet, v types.Item) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItem(ctx context.Context, sel ast.SelectionSet, v *types.Item) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOItemID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx context.Context, v interface{}) (types.ItemID, error) {
	var res types.ItemID
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOItemID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx context.Context, sel ast.SelectionSet, v types.ItemID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOItemID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx context.Context, v interface{}) (*types.ItemID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOItemID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOItemID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐItemID(ctx context.Context, sel ast.SelectionSet, v *types.ItemID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOItemInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx context.Context, v interface{}) (resolver.ItemInput, error) {
	return ec.unmarshalInputItemInput(ctx, v)
}

func (ec *executionContext) unmarshalOItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx context.Context, v interface{}) (*resolver.ItemInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOItemInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐItemInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOOIDCMutation2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCMutation(ctx context.Context, sel ast.SelectionSet, v resolver.OIDCMutation) graphql.Marshaler {
	return ec._OIDCMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalOOIDCProvider2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐOIDCProvider(ctx context.Context, sel ast.SelectionSet, v types.OIDCProvider) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOOIDCProvider2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐOIDCProvider(ctx context.Context, sel ast.SelectionSet, v *types.OIDCProvider) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOOIDCProviderID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOOIDCProviderID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOOIDCProviderID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOOIDCProviderID2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOOIDCProviderID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOOIDCProviderID2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOOIDCProviderInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCProviderInput(ctx context.Context, v interface{}) (resolver.OIDCProviderInput, error) {
	return ec.unmarshalInputOIDCProviderInput(ctx, v)
}

func (ec *executionContext) unmarshalOOIDCProviderInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCProviderInput(ctx context.Context, v interface{}) (*resolver.OIDCProviderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOOIDCProviderInput2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCProviderInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOOIDCProviderQuery2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCProviderQuery(ctx context.Context, sel ast.SelectionSet, v resolver.OIDCProviderQuery) graphql.Marshaler {
	return ec._OIDCProviderQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalOOIDCQuery2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCQuery(ctx context.Context, sel ast.SelectionSet, v resolver.OIDCQuery) graphql.Marshaler {
	return ec._OIDCQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalOOIDCQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐOIDCQuery(ctx context.Context, sel ast.SelectionSet, v *resolver.OIDCQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OIDCQuery(ctx, sel, v)
}

func (ec *executionContext) marshalORegularUser2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUser(ctx context.Context, sel ast.SelectionSet, v types.RegularUser) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalORegularUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx context.Context, v interface{}) (types.RegularUserID, error) {
	var res types.RegularUserID
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalORegularUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx context.Context, sel ast.SelectionSet, v types.RegularUserID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalORegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx context.Context, v interface{}) (*types.RegularUserID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORegularUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐRegularUserID(ctx context.Context, sel ast.SelectionSet, v *types.RegularUserID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSpecialUser2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUser(ctx context.Context, sel ast.SelectionSet, v types.SpecialUser) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOSpecialUser2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUser(ctx context.Context, sel ast.SelectionSet, v *types.SpecialUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx context.Context, v interface{}) (types.SpecialUserID, error) {
	var res types.SpecialUserID
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalOSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx context.Context, sel ast.SelectionSet, v types.SpecialUserID) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOSpecialUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx context.Context, v interface{}) (*types.SpecialUserID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOSpecialUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋtypesᚐSpecialUserID(ctx context.Context, sel ast.SelectionSet, v *types.SpecialUserID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) marshalOUser2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUser(ctx context.Context, sel ast.SelectionSet, v resolver.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserAuthentication2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserAuthentication(ctx context.Context, sel ast.SelectionSet, v resolver.UserAuthentication) graphql.Marshaler {
	return ec._UserAuthentication(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserAuthentication2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserAuthentication(ctx context.Context, sel ast.SelectionSet, v *resolver.UserAuthentication) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserAuthentication(ctx, sel, v)
}

func (ec *executionContext) marshalOUserMutation2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserMutation(ctx context.Context, sel ast.SelectionSet, v resolver.UserMutation) graphql.Marshaler {
	return ec._UserMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserMutation(ctx context.Context, sel ast.SelectionSet, v *resolver.UserMutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserMutation(ctx, sel, v)
}

func (ec *executionContext) marshalOUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserMutator(ctx context.Context, sel ast.SelectionSet, v resolver.UserMutator) graphql.Marshaler {
	return ec._UserMutator(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserQuery2githubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserQuery(ctx context.Context, sel ast.SelectionSet, v resolver.UserQuery) graphql.Marshaler {
	return ec._UserQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgqlᚋresolverᚐUserQuery(ctx context.Context, sel ast.SelectionSet, v *resolver.UserQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserQuery(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOetc2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOetc2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOetc2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOetc2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOetc2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOetc2string(ctx, sel, *v)
}

// endregion ***************************** type.gotpl *****************************
