// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package tab

import (
"context"
"fmt"
"io"
"strconv"
"time"
"sync"
"sync/atomic"
"errors"
"bytes"
"github.com/vektah/gqlparser"
"github.com/vektah/gqlparser/ast"
"github.com/99designs/gqlgen/graphql"
"github.com/99designs/gqlgen/graphql/introspection"
"github.com/zemnmez/tab/generated"
"github.com/zemnmez/tab/user/authn/oidc"
"github.com/zemnmez/tab/user"
graphql1 "github.com/zemnmez/tab/graphql"
"github.com/zemnmez/tab/user/authn"
"github.com/zemnmez/tab/user/authz")

// region    ************************** generated!.gotpl **************************
















// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers: cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {IDToken() IDTokenResolver
	Item() ItemResolver
	Mutation() MutationResolver
	OIDCProvider() OIDCProviderResolver
	Query() QueryResolver
	RegularUser() RegularUserResolver
	SpecialUser() SpecialUserResolver
	UserAuthentication() UserAuthenticationResolver
	UserMutation() UserMutationResolver
	UserQuery() UserQueryResolver
	
}

type DirectiveRoot struct {

	Authorized func(ctx context.Context, obj interface{}, next graphql.Resolver, to []generated.Authorization) (res interface{}, err error)

}

type ComplexityRoot struct {

	AuthenticationMutation struct {
		Etc func(childComplexity int) int
			Oidc func(childComplexity int) int
			
		}

	AuthenticationQuery struct {
		Etc func(childComplexity int) int
			Oidc func(childComplexity int) int
			
		}

	AuthorizationGrant struct {
		From func(childComplexity int) int
			Of func(childComplexity int) int
			Valid func(childComplexity int) int
			
		}

	HistoryItem struct {
		Action func(childComplexity int) int
			By func(childComplexity int) int
			IPAddress func(childComplexity int) int
			RequestData func(childComplexity int) int
			
		}

	IDToken struct {
		Audience func(childComplexity int) int
			AuthenticationContextClassReference func(childComplexity int) int
			AuthenticationMethodsReference func(childComplexity int) int
			AuthorizedParty func(childComplexity int) int
			Expiration func(childComplexity int) int
			Issued func(childComplexity int) int
			Issuer func(childComplexity int) int
			Nonce func(childComplexity int) int
			Subject func(childComplexity int) int
			
		}

	Item struct {
		Children func(childComplexity int) int
			ID func(childComplexity int) int
			Location func(childComplexity int) int
			Name func(childComplexity int) int
			Parent func(childComplexity int) int
			
		}

	Mutation struct {
		Authentication func(childComplexity int) int
			Item func(childComplexity int, id ItemID, new *generated.ItemInput) int
			Ok func(childComplexity int) int
			User func(childComplexity int) int
			
		}

	OIDCMutation struct {
		Authenticate func(childComplexity int, token *oidc.IDToken) int
			Provider func(childComplexity int, id *string, provider *generated.OIDCProviderInput) int
			
		}

	OIDCProvider struct {
		AuthorizationEndpoint func(childComplexity int) int
			Callback func(childComplexity int) int
			ClientID func(childComplexity int) int
			ID func(childComplexity int) int
			Name func(childComplexity int) int
			
		}

	OIDCProviderQuery struct {
		All func(childComplexity int) int
			ByID func(childComplexity int, id *string) int
			
		}

	OIDCQuery struct {
		IsValid func(childComplexity int, token *oidc.IDToken) int
			Provider func(childComplexity int) int
			
		}

	Query struct {
		Authentication func(childComplexity int) int
			Item func(childComplexity int, id ItemID) int
			Ok func(childComplexity int) int
			User func(childComplexity int) int
			
		}

	RegularUser struct {
		Authentication func(childComplexity int) int
			Authorizations func(childComplexity int) int
			Grants func(childComplexity int) int
			History func(childComplexity int) int
			ID func(childComplexity int) int
			Name func(childComplexity int) int
			
		}

	Self struct {
		Authentication func(childComplexity int) int
			Authorizatons func(childComplexity int) int
			Grant func(childComplexity int, who *user.RegularID, abilities []generated.Authorization) int
			GrantSpecial func(childComplexity int, who *generated.SpecialUserID, abilities []generated.Authorization) int
			Grants func(childComplexity int) int
			History func(childComplexity int) int
			Name func(childComplexity int) int
			
		}

	SpecialUser struct {
		Authentication func(childComplexity int) int
			Authorizations func(childComplexity int) int
			Grants func(childComplexity int) int
			History func(childComplexity int) int
			ID func(childComplexity int) int
			Name func(childComplexity int) int
			
		}

	UserAuthentication struct {
		Etc func(childComplexity int) int
			Oidc func(childComplexity int) int
			
		}

	UserMutation struct {
		Regular func(childComplexity int, id *user.RegularID) int
			Self func(childComplexity int) int
			Special func(childComplexity int, id *generated.SpecialUserID) int
			
		}

	UserQuery struct {
		Regular func(childComplexity int, id *user.RegularID) int
			Self func(childComplexity int) int
			Special func(childComplexity int, id *generated.SpecialUserID) int
			WhoCan func(childComplexity int, do []generated.Authorization) int
			
		}

	

	

	

	

	

	

}


		type IDTokenResolver interface {
		
		
		
		
		
		
		
		
		AuthorizedParty(ctx context.Context, obj *oidc.IDToken) (*string, error)
		
		}
		type ItemResolver interface {
		ID(ctx context.Context, obj *Item) (*ItemID, error)
		
		
		
		
		
		}
		type MutationResolver interface {
		Ok(ctx context.Context) (*bool, error)
		Authentication(ctx context.Context) (*generated.AuthenticationMutation, error)
		Item(ctx context.Context, id ItemID, new *generated.ItemInput) (*Item, error)
		User(ctx context.Context) (*graphql1.UserMutation, error)
		
		}
		type OIDCProviderResolver interface {
		ID(ctx context.Context, obj *oidc.Provider) (*string, error)
		
		Callback(ctx context.Context, obj *oidc.Provider) (string, error)
		AuthorizationEndpoint(ctx context.Context, obj *oidc.Provider) (string, error)
		ClientID(ctx context.Context, obj *oidc.Provider) (string, error)
		
		}
		type QueryResolver interface {
		Ok(ctx context.Context) (*bool, error)
		Authentication(ctx context.Context) (*generated.AuthenticationQuery, error)
		Item(ctx context.Context, id ItemID) (*Item, error)
		User(ctx context.Context) (*graphql1.UserQuery, error)
		
		
		
		}
		type RegularUserResolver interface {
		
		
		Authentication(ctx context.Context, obj *user.Regular) (*authn.Authentication, error)
		
		
		
		
		}
		type SpecialUserResolver interface {
		
		
		Authentication(ctx context.Context, obj *user.Special) (*authn.Authentication, error)
		
		
		
		
		}
		type UserAuthenticationResolver interface {
		Etc(ctx context.Context, obj *authn.Authentication) (*string, error)
		Oidc(ctx context.Context, obj *authn.Authentication) ([]*oidc.IDToken, error)
		
		}
		type UserMutationResolver interface {
		Self(ctx context.Context, obj *graphql1.UserMutation) (generated.UserMutator, error)
		Special(ctx context.Context, obj *graphql1.UserMutation, id *generated.SpecialUserID) (generated.UserMutator, error)
		Regular(ctx context.Context, obj *graphql1.UserMutation, id *user.RegularID) (generated.UserMutator, error)
		
		}
		type UserQueryResolver interface {
		Self(ctx context.Context, obj *graphql1.UserQuery) (*generated.Self, error)
		Special(ctx context.Context, obj *graphql1.UserQuery, id *generated.SpecialUserID) (*user.Special, error)
		Regular(ctx context.Context, obj *graphql1.UserQuery, id *user.RegularID) (*user.Regular, error)
		WhoCan(ctx context.Context, obj *graphql1.UserQuery, do []generated.Authorization) ([]user.User, error)
		
		}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {
	
		
			case "AuthenticationMutation.etc":
							if e.complexity.AuthenticationMutation.Etc == nil {
								break
							}
							
							return e.complexity.AuthenticationMutation.Etc(childComplexity), true
						
			case "AuthenticationMutation.OIDC":
							if e.complexity.AuthenticationMutation.Oidc == nil {
								break
							}
							
							return e.complexity.AuthenticationMutation.Oidc(childComplexity), true
						
			
		
	
		
			case "AuthenticationQuery.etc":
							if e.complexity.AuthenticationQuery.Etc == nil {
								break
							}
							
							return e.complexity.AuthenticationQuery.Etc(childComplexity), true
						
			case "AuthenticationQuery.OIDC":
							if e.complexity.AuthenticationQuery.Oidc == nil {
								break
							}
							
							return e.complexity.AuthenticationQuery.Oidc(childComplexity), true
						
			
		
	
		
			case "AuthorizationGrant.From":
							if e.complexity.AuthorizationGrant.From == nil {
								break
							}
							
							return e.complexity.AuthorizationGrant.From(childComplexity), true
						
			case "AuthorizationGrant.Of":
							if e.complexity.AuthorizationGrant.Of == nil {
								break
							}
							
							return e.complexity.AuthorizationGrant.Of(childComplexity), true
						
			case "AuthorizationGrant.Valid":
							if e.complexity.AuthorizationGrant.Valid == nil {
								break
							}
							
							return e.complexity.AuthorizationGrant.Valid(childComplexity), true
						
			
		
	
		
			case "HistoryItem.Action":
							if e.complexity.HistoryItem.Action == nil {
								break
							}
							
							return e.complexity.HistoryItem.Action(childComplexity), true
						
			case "HistoryItem.By":
							if e.complexity.HistoryItem.By == nil {
								break
							}
							
							return e.complexity.HistoryItem.By(childComplexity), true
						
			case "HistoryItem.IPAddress":
							if e.complexity.HistoryItem.IPAddress == nil {
								break
							}
							
							return e.complexity.HistoryItem.IPAddress(childComplexity), true
						
			case "HistoryItem.RequestData":
							if e.complexity.HistoryItem.RequestData == nil {
								break
							}
							
							return e.complexity.HistoryItem.RequestData(childComplexity), true
						
			
		
	
		
			case "IDToken.Audience":
							if e.complexity.IDToken.Audience == nil {
								break
							}
							
							return e.complexity.IDToken.Audience(childComplexity), true
						
			case "IDToken.AuthenticationContextClassReference":
							if e.complexity.IDToken.AuthenticationContextClassReference == nil {
								break
							}
							
							return e.complexity.IDToken.AuthenticationContextClassReference(childComplexity), true
						
			case "IDToken.AuthenticationMethodsReference":
							if e.complexity.IDToken.AuthenticationMethodsReference == nil {
								break
							}
							
							return e.complexity.IDToken.AuthenticationMethodsReference(childComplexity), true
						
			case "IDToken.AuthorizedParty":
							if e.complexity.IDToken.AuthorizedParty == nil {
								break
							}
							
							return e.complexity.IDToken.AuthorizedParty(childComplexity), true
						
			case "IDToken.Expiration":
							if e.complexity.IDToken.Expiration == nil {
								break
							}
							
							return e.complexity.IDToken.Expiration(childComplexity), true
						
			case "IDToken.Issued":
							if e.complexity.IDToken.Issued == nil {
								break
							}
							
							return e.complexity.IDToken.Issued(childComplexity), true
						
			case "IDToken.Issuer":
							if e.complexity.IDToken.Issuer == nil {
								break
							}
							
							return e.complexity.IDToken.Issuer(childComplexity), true
						
			case "IDToken.Nonce":
							if e.complexity.IDToken.Nonce == nil {
								break
							}
							
							return e.complexity.IDToken.Nonce(childComplexity), true
						
			case "IDToken.Subject":
							if e.complexity.IDToken.Subject == nil {
								break
							}
							
							return e.complexity.IDToken.Subject(childComplexity), true
						
			
		
	
		
			case "Item.Children":
							if e.complexity.Item.Children == nil {
								break
							}
							
							return e.complexity.Item.Children(childComplexity), true
						
			case "Item.Id":
							if e.complexity.Item.ID == nil {
								break
							}
							
							return e.complexity.Item.ID(childComplexity), true
						
			case "Item.Location":
							if e.complexity.Item.Location == nil {
								break
							}
							
							return e.complexity.Item.Location(childComplexity), true
						
			case "Item.Name":
							if e.complexity.Item.Name == nil {
								break
							}
							
							return e.complexity.Item.Name(childComplexity), true
						
			case "Item.Parent":
							if e.complexity.Item.Parent == nil {
								break
							}
							
							return e.complexity.Item.Parent(childComplexity), true
						
			
		
	
		
			case "Mutation.Authentication":
							if e.complexity.Mutation.Authentication == nil {
								break
							}
							
							return e.complexity.Mutation.Authentication(childComplexity), true
						
			case "Mutation.Item":
							if e.complexity.Mutation.Item == nil {
								break
							}
							
								args, err := ec.field_Mutation_Item_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.Mutation.Item(childComplexity, args["id"].(ItemID), args["new"].(*generated.ItemInput) ), true
						
			case "Mutation.ok":
							if e.complexity.Mutation.Ok == nil {
								break
							}
							
							return e.complexity.Mutation.Ok(childComplexity), true
						
			case "Mutation.User":
							if e.complexity.Mutation.User == nil {
								break
							}
							
							return e.complexity.Mutation.User(childComplexity), true
						
			
		
	
		
			case "OIDCMutation.Authenticate":
							if e.complexity.OIDCMutation.Authenticate == nil {
								break
							}
							
								args, err := ec.field_OIDCMutation_Authenticate_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.OIDCMutation.Authenticate(childComplexity, args["token"].(*oidc.IDToken) ), true
						
			case "OIDCMutation.Provider":
							if e.complexity.OIDCMutation.Provider == nil {
								break
							}
							
								args, err := ec.field_OIDCMutation_Provider_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.OIDCMutation.Provider(childComplexity, args["id"].(*string), args["provider"].(*generated.OIDCProviderInput) ), true
						
			
		
	
		
			case "OIDCProvider.AuthorizationEndpoint":
							if e.complexity.OIDCProvider.AuthorizationEndpoint == nil {
								break
							}
							
							return e.complexity.OIDCProvider.AuthorizationEndpoint(childComplexity), true
						
			case "OIDCProvider.Callback":
							if e.complexity.OIDCProvider.Callback == nil {
								break
							}
							
							return e.complexity.OIDCProvider.Callback(childComplexity), true
						
			case "OIDCProvider.ClientID":
							if e.complexity.OIDCProvider.ClientID == nil {
								break
							}
							
							return e.complexity.OIDCProvider.ClientID(childComplexity), true
						
			case "OIDCProvider.ID":
							if e.complexity.OIDCProvider.ID == nil {
								break
							}
							
							return e.complexity.OIDCProvider.ID(childComplexity), true
						
			case "OIDCProvider.Name":
							if e.complexity.OIDCProvider.Name == nil {
								break
							}
							
							return e.complexity.OIDCProvider.Name(childComplexity), true
						
			
		
	
		
			case "OIDCProviderQuery.All":
							if e.complexity.OIDCProviderQuery.All == nil {
								break
							}
							
							return e.complexity.OIDCProviderQuery.All(childComplexity), true
						
			case "OIDCProviderQuery.ByID":
							if e.complexity.OIDCProviderQuery.ByID == nil {
								break
							}
							
								args, err := ec.field_OIDCProviderQuery_ByID_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.OIDCProviderQuery.ByID(childComplexity, args["id"].(*string) ), true
						
			
		
	
		
			case "OIDCQuery.IsValid":
							if e.complexity.OIDCQuery.IsValid == nil {
								break
							}
							
								args, err := ec.field_OIDCQuery_IsValid_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.OIDCQuery.IsValid(childComplexity, args["token"].(*oidc.IDToken) ), true
						
			case "OIDCQuery.Provider":
							if e.complexity.OIDCQuery.Provider == nil {
								break
							}
							
							return e.complexity.OIDCQuery.Provider(childComplexity), true
						
			
		
	
		
			case "Query.Authentication":
							if e.complexity.Query.Authentication == nil {
								break
							}
							
							return e.complexity.Query.Authentication(childComplexity), true
						
			case "Query.Item":
							if e.complexity.Query.Item == nil {
								break
							}
							
								args, err := ec.field_Query_Item_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.Query.Item(childComplexity, args["id"].(ItemID) ), true
						
			case "Query.ok":
							if e.complexity.Query.Ok == nil {
								break
							}
							
							return e.complexity.Query.Ok(childComplexity), true
						
			case "Query.User":
							if e.complexity.Query.User == nil {
								break
							}
							
							return e.complexity.Query.User(childComplexity), true
						
			
			
			
		
	
		
			case "RegularUser.Authentication":
							if e.complexity.RegularUser.Authentication == nil {
								break
							}
							
							return e.complexity.RegularUser.Authentication(childComplexity), true
						
			case "RegularUser.Authorizations":
							if e.complexity.RegularUser.Authorizations == nil {
								break
							}
							
							return e.complexity.RegularUser.Authorizations(childComplexity), true
						
			case "RegularUser.Grants":
							if e.complexity.RegularUser.Grants == nil {
								break
							}
							
							return e.complexity.RegularUser.Grants(childComplexity), true
						
			case "RegularUser.History":
							if e.complexity.RegularUser.History == nil {
								break
							}
							
							return e.complexity.RegularUser.History(childComplexity), true
						
			case "RegularUser.ID":
							if e.complexity.RegularUser.ID == nil {
								break
							}
							
							return e.complexity.RegularUser.ID(childComplexity), true
						
			case "RegularUser.Name":
							if e.complexity.RegularUser.Name == nil {
								break
							}
							
							return e.complexity.RegularUser.Name(childComplexity), true
						
			
		
	
		
			case "Self.Authentication":
							if e.complexity.Self.Authentication == nil {
								break
							}
							
							return e.complexity.Self.Authentication(childComplexity), true
						
			case "Self.Authorizatons":
							if e.complexity.Self.Authorizatons == nil {
								break
							}
							
							return e.complexity.Self.Authorizatons(childComplexity), true
						
			case "Self.Grant":
							if e.complexity.Self.Grant == nil {
								break
							}
							
								args, err := ec.field_Self_Grant_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.Self.Grant(childComplexity, args["who"].(*user.RegularID), args["abilities"].([]generated.Authorization) ), true
						
			case "Self.GrantSpecial":
							if e.complexity.Self.GrantSpecial == nil {
								break
							}
							
								args, err := ec.field_Self_GrantSpecial_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.Self.GrantSpecial(childComplexity, args["who"].(*generated.SpecialUserID), args["abilities"].([]generated.Authorization) ), true
						
			case "Self.Grants":
							if e.complexity.Self.Grants == nil {
								break
							}
							
							return e.complexity.Self.Grants(childComplexity), true
						
			case "Self.History":
							if e.complexity.Self.History == nil {
								break
							}
							
							return e.complexity.Self.History(childComplexity), true
						
			case "Self.Name":
							if e.complexity.Self.Name == nil {
								break
							}
							
							return e.complexity.Self.Name(childComplexity), true
						
			
		
	
		
			case "SpecialUser.Authentication":
							if e.complexity.SpecialUser.Authentication == nil {
								break
							}
							
							return e.complexity.SpecialUser.Authentication(childComplexity), true
						
			case "SpecialUser.Authorizations":
							if e.complexity.SpecialUser.Authorizations == nil {
								break
							}
							
							return e.complexity.SpecialUser.Authorizations(childComplexity), true
						
			case "SpecialUser.Grants":
							if e.complexity.SpecialUser.Grants == nil {
								break
							}
							
							return e.complexity.SpecialUser.Grants(childComplexity), true
						
			case "SpecialUser.History":
							if e.complexity.SpecialUser.History == nil {
								break
							}
							
							return e.complexity.SpecialUser.History(childComplexity), true
						
			case "SpecialUser.ID":
							if e.complexity.SpecialUser.ID == nil {
								break
							}
							
							return e.complexity.SpecialUser.ID(childComplexity), true
						
			case "SpecialUser.Name":
							if e.complexity.SpecialUser.Name == nil {
								break
							}
							
							return e.complexity.SpecialUser.Name(childComplexity), true
						
			
		
	
		
			case "UserAuthentication.etc":
							if e.complexity.UserAuthentication.Etc == nil {
								break
							}
							
							return e.complexity.UserAuthentication.Etc(childComplexity), true
						
			case "UserAuthentication.OIDC":
							if e.complexity.UserAuthentication.Oidc == nil {
								break
							}
							
							return e.complexity.UserAuthentication.Oidc(childComplexity), true
						
			
		
	
		
			case "UserMutation.Regular":
							if e.complexity.UserMutation.Regular == nil {
								break
							}
							
								args, err := ec.field_UserMutation_Regular_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.UserMutation.Regular(childComplexity, args["id"].(*user.RegularID) ), true
						
			case "UserMutation.Self":
							if e.complexity.UserMutation.Self == nil {
								break
							}
							
							return e.complexity.UserMutation.Self(childComplexity), true
						
			case "UserMutation.Special":
							if e.complexity.UserMutation.Special == nil {
								break
							}
							
								args, err := ec.field_UserMutation_Special_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.UserMutation.Special(childComplexity, args["id"].(*generated.SpecialUserID) ), true
						
			
		
	
		
			case "UserQuery.Regular":
							if e.complexity.UserQuery.Regular == nil {
								break
							}
							
								args, err := ec.field_UserQuery_Regular_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.UserQuery.Regular(childComplexity, args["id"].(*user.RegularID) ), true
						
			case "UserQuery.Self":
							if e.complexity.UserQuery.Self == nil {
								break
							}
							
							return e.complexity.UserQuery.Self(childComplexity), true
						
			case "UserQuery.Special":
							if e.complexity.UserQuery.Special == nil {
								break
							}
							
								args, err := ec.field_UserQuery_Special_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.UserQuery.Special(childComplexity, args["id"].(*generated.SpecialUserID) ), true
						
			case "UserQuery.WhoCan":
							if e.complexity.UserQuery.WhoCan == nil {
								break
							}
							
								args, err := ec.field_UserQuery_WhoCan_args(context.TODO(),rawArgs)
								if err != nil {
									return 0, false
								}
							
							return e.complexity.UserQuery.WhoCan(childComplexity, args["do"].([]generated.Authorization) ), true
						
			
		
	
		
	
		
	
		
	
		
	
		
	
		
	
	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
		ec := executionContext{graphql.GetRequestContext(ctx), e}

		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		return &graphql.Response{
			Data:       buf,
			Errors:     ec.Errors,
			Extensions: ec.Extensions,
		}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
		ec := executionContext{graphql.GetRequestContext(ctx), e}

		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		return &graphql.Response{
			Data:       buf,
			Errors:     ec.Errors,
			Extensions: ec.Extensions,
		}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
		return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
		&ast.Source{Name: "graphql/OIDC.graphql", Input: `extend enum Authorization {
    MODIFY_VALID_AUTH
}

scalar Time
scalar OIDCProviderID

type IDToken @goModel(model: "github.com/zemnmez/tab/user/authn/oidc.IDToken") {
    Issuer: String!
    Subject: String!
    Audience: String!
    Expiration: Time!
    Issued: Time!
    Nonce: String!
    AuthenticationContextClassReference: Int
    AuthenticationMethodsReference: [String!]!
    AuthorizedParty: String
}

input IDTokenInput @goModel(model: "github.com/zemnmez/tab/user/authn/oidc.IDToken") {
    Issuer: String!
    Subject: String!
    Audience: String!
    Expiration: Time!
    Issued: Time!
    Nonce: String!
    AuthenticationContextClassReference: Int
    AuthenticationMethodsReference: [String!]!
    AuthorizedParty: String
}

type OIDCProvider @goModel(model: "github.com/zemnmez/tab/user/authn/oidc.Provider") {
    ID: OIDCProviderID
    Name: String!
    Callback: String!
    AuthorizationEndpoint: String!
    ClientID: String!
}

extend type UserAuthentication {
    OIDC: [IDToken!]!
}

extend type AuthenticationQuery { OIDC: OIDCQuery } 
type OIDCQuery {
    Provider: OIDCProviderQuery
    IsValid(token: IDTokenInput): Boolean
}

type OIDCProviderQuery {
    All: [OIDCProvider!]!
    ByID(id: OIDCProviderID): OIDCProvider
}


input OIDCProviderInput {
    Name: String!
}

extend type AuthenticationMutation { OIDC: OIDCMutation }
type OIDCMutation {
    # Authenticates by OIDC ID Token and returns the corresponding User, if any.
    Authenticate(token: IDTokenInput): User

    # modifies, creates or deletes an OIDC provider. If id is blank, the provider will be created.
    # If provider is blank, the provider will be deleted.
    Provider(id: OIDCProviderID, provider: OIDCProviderInput): OIDCProvider
        @authorized(to: [MODIFY_VALID_AUTH])
}

`},
		&ast.Source{Name: "graphql/authentication.graphql", Input: `scalar etc

type UserAuthentication @goModel(model: "github.com/zemnmez/tab/user/authn.Authentication") {
    etc: etc
}

extend interface User {
    Authentication: UserAuthentication
}

extend type Self { Authentication: UserAuthentication }
extend type RegularUser { Authentication: UserAuthentication }
extend type SpecialUser { Authentication: UserAuthentication }

extend type Query {
    Authentication: AuthenticationQuery
}

type AuthenticationQuery {
    etc: etc
}

extend type Mutation {
    Authentication: AuthenticationMutation
}

type AuthenticationMutation {
    etc: etc
}
`},
		&ast.Source{Name: "graphql/authorization.graphql", Input: `directive @authorized(to: [Authorization!]!) on FIELD_DEFINITION

"""
Authorization is a list of all the possible permissions
a User can have.
"""
enum Authorization {
    VIEW_USERS
}

type AuthorizationGrant @goModel(model: "github.com/zemnmez/tab/user/authz.Grant") {
    """
    From is the user which has granted permissions
    to the grantee
    """
    From: User!

    """
    Of is a list of Authorizations representing
    permissions granted to the user.
    """
    Of: [Authorization!]!

    """
    Valid returns if this grant is still valid.
    if the granter of this authorization does not
    have the appropriate permissions anymore,
    the grant is no longer valid.
    """
    Valid: Boolean
}

extend interface User {

    "The abilities granted to this user."
    Grants: [AuthorizationGrant!]!
}

extend type Self {
    Grants: [AuthorizationGrant!]!
    Authorizatons: [Authorization!]!

    "Grant a user some ability the current user has"
    Grant(who: RegularUserID, abilities: [Authorization!]!): User

    "Grant a special user some ability the current user has"
    GrantSpecial(who: SpecialUserID, abilities: [Authorization!]!): SpecialUser @authorized(to: [MODIFY_SPECIAL_USERS])
}

extend type SpecialUser {
    """
    Authorizations represents the things a user can do,
    and who granted them the ability to do these things.
    
    If the user was granted an ability by a user, and the granting user
    user lost the ability to grant it, it is no longer valid.
    """
    Grants: [AuthorizationGrant!]!

    """
    Authorizations represents the set of authorization grants
    given to this user which are still valid.
    """
    Authorizations: [Authorization!]!
}

extend type RegularUser {
    """
    Authorizations represents the things a user can do,
    and who granted them the ability to do these things.
    
    If the user was granted an ability by a user, and the granting user
    user lost the ability to grant it, it is no longer valid.
    """
    Grants: [AuthorizationGrant!]!

    """
    Authorizations represents the set of authorization grants
    given to this user which are still valid.
    """
    Authorizations: [Authorization!]!
}

extend type UserQuery {
    WhoCan(do: [Authorization!]!): [User!]!
        @authorized(to: [VIEW_USERS]),
        @goField(model: "github.com/zemnmez/tab/storage.GetUsersByAuthorization")
}`},
		&ast.Source{Name: "graphql/item.graphql", Input: `
# ItemID represents the unique identifier of an Item
scalar ItemID @goModel(model: "github.com/zemnmez/tab.ItemID")

extend enum Authorization {
    ADD_ITEMS
    MODIFY_ITEMS
}

type Item @goModel(model: "github.com/zemnmez/tab.Item") {
  # A unique identifier for this Item
  Id: ItemID!

  # The name of this Item
  Name: String!

  # The location of this Item
  Location: String!

  # This Item's parent, or none
  Parent: Item

  # This item's children
  Children: [Item!]!
}

# An input item can either be an existing item by ItemID or
# a new defined item structure.
input ItemInput {
    ById: ItemID
    WithStructure: DefinedItemInput
}

input DefinedItemInput {
    Name: String!
    Location: String!
    Parent: ItemInput
    Children: [ItemInput!]!
}

extend type Query {
    Item(id: ItemID!): Item @authorized(to: [VIEW_ITEMS])
}

extend type Mutation {
    # Item creates or modifies a given item by ItemID. The ItemInput can be either an object or an id.
    # If ItemInput is defined, but neither ById or WithStructure is defined the item is deleted.
    Item(id: ItemID!, new: ItemInput): Item! @authorized(to: [MODIFY_ITEMS])
}`},
		&ast.Source{Name: "graphql/user.graphql", Input: `# USERS
# This module deals with users existing!

# RegularUserID represents the ID of a regular user i.e. a user that is not ANONYMOUS or ROOT.
scalar RegularUserID
    @goModel(model: "github.com/zemnmez/tab/user.RegularID")

# Special users are singleton users with special functionality
enum SpecialUserID {
    # The root user is the ultimate source of all authorization grants.
    ROOT

    # The Anonymous user is the user unauthenticated users are said to be 'logged into'.
    ANONYMOUS
}

interface User @goModel(model: "github.com/zemnmez/tab/user.User") {
    Name: String!
}

type Self implements User {
    Name: String!
}

# RegularUsers are the normal rank and file users!
type RegularUser implements User @goModel(model: "github.com/zemnmez/tab/user.Regular") {
    # ID is the unique identifier of this user. It may be a SpecialUserID
    # if this is a special user, like root.
    ID: RegularUserID!

    # Name is the name of this user.
    Name: String!
}

# SpecialUsers are special singleton accounts like ANONYMOUS and ROOT
type SpecialUser implements User @goModel(model: "github.com/zemnmez/tab/user.Special") {
    ID: SpecialUserID!
    Name: String!
}

# UserInput is the values a User can be created with
input UserInput {
    Name: String!
}

# The root user is the ultimate source of all authorization grants.
input RootUser {
    ID: SpecialUserID! = ADMIN
    Name: String! = "Root"
}

# The anonymous user is the user unauthenticated users are said to be logged into.
input AnonymousUser {
    ID: SpecialUserID! = ANONYMOUS
    Name: String! = "Anonymous"
}

extend type Query {
    User: UserQuery
}

type UserQuery @goModel(model: "github.com/zemnmez/tab/graphql.UserQuery") {
    # Self returns the currently logged in user
    Self: Self!

    Special(id: SpecialUserID): SpecialUser @authorized(to: [VIEW_USERS])
    Regular(id: RegularUserID): RegularUser @authorized(to: [VIEW_USERS])
}

extend enum Authorization {
    # modify other users profiles
    MODIFY_OTHER_USERS

    # modify root / anonymous
    MODIFY_SPECIAL_USERS

    # edit the details of my own user (anonymous user cannot do this)
    MODIFY_SELF
}

extend type Mutation {
    # User returns a UserMutator which can be used to modify
    # a given user id
    User: UserMutation
}

type UserMutation @goModel(model: "github.com/zemnmez/tab/graphql.UserMutation") {
    Self: UserMutator! @authorized(to: [MODIFY_SELF])
    Special(id: SpecialUserID): UserMutator @authorized(to: [MODIFY_SPECIAL_USERS])
    Regular(id: RegularUserID): UserMutator @authorized(to: [MODIFY_OTHER_USERS])
}

interface UserMutator {
    Modify(with: UserInput!): User!
}`},
		&ast.Source{Name: "root.graphql", Input: `directive @goModel(model: String, models: [String!]) on OBJECT 
    | INPUT_OBJECT 
    | SCALAR 
    | ENUM 
    | INTERFACE 
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION 
    | FIELD_DEFINITION

type Query {
  ok: Boolean
}

type Mutation {
  ok: Boolean
}`},
		&ast.Source{Name: "storage/history.graphql", Input: `# HISTORY
# This module introduces components allowing tracking of user history.

extend enum Authorization {
    # if a user can view others history.
    VIEW_OTHER_USERS_HISTORY


    # if a user can view their own history.
    # the anonymous user cannot view their own history.
    VIEW_OWN_HISTORY
}

extend interface User {
    History: [HistoryItem!]!
}

extend type Self {
    History: [HistoryItem!]! @authorized(to: [VIEW_OWN_HISTORY])
}

extend type RegularUser {
    History: [HistoryItem!]! @authorized(to: [VIEW_OTHER_USERS_HISTORY])
}

extend type SpecialUser {
    History: [HistoryItem!]! @authorized(to: [VIEW_OTHER_USERS_HISTORY])
}

# A HistoryItem represents a single thing that happened in this user's history
type HistoryItem {
    Action: String!
    By: User!
    RequestData: String!
    IPAddress: String!
}`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_authorized_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 []generated.Authorization
		if tmp, ok := rawArgs["to"]; ok {
				arg0, err = ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["to"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Item_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 ItemID
		if tmp, ok := rawArgs["id"]; ok {
				arg0, err = ec.unmarshalNItemID2githubᚗcomᚋzemnmezᚋtabᚐItemID(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["id"] = arg0
		var arg1 *generated.ItemInput
		if tmp, ok := rawArgs["new"]; ok {
				arg1, err = ec.unmarshalOItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["new"] = arg1
	return args, nil
}

func (ec *executionContext) field_OIDCMutation_Authenticate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *oidc.IDToken
		if tmp, ok := rawArgs["token"]; ok {
				arg0, err = ec.unmarshalOIDTokenInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_OIDCMutation_Provider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *string
		if tmp, ok := rawArgs["id"]; ok {
				arg0, err = ec.unmarshalOOIDCProviderID2ᚖstring(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["id"] = arg0
		var arg1 *generated.OIDCProviderInput
		if tmp, ok := rawArgs["provider"]; ok {
				arg1, err = ec.unmarshalOOIDCProviderInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCProviderInput(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["provider"] = arg1
	return args, nil
}

func (ec *executionContext) field_OIDCProviderQuery_ByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *string
		if tmp, ok := rawArgs["id"]; ok {
				arg0, err = ec.unmarshalOOIDCProviderID2ᚖstring(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_OIDCQuery_IsValid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *oidc.IDToken
		if tmp, ok := rawArgs["token"]; ok {
				arg0, err = ec.unmarshalOIDTokenInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Item_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 ItemID
		if tmp, ok := rawArgs["id"]; ok {
				arg0, err = ec.unmarshalNItemID2githubᚗcomᚋzemnmezᚋtabᚐItemID(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 string
		if tmp, ok := rawArgs["name"]; ok {
				arg0, err = ec.unmarshalNString2string(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Self_GrantSpecial_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *generated.SpecialUserID
		if tmp, ok := rawArgs["who"]; ok {
				arg0, err = ec.unmarshalOSpecialUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["who"] = arg0
		var arg1 []generated.Authorization
		if tmp, ok := rawArgs["abilities"]; ok {
				arg1, err = ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["abilities"] = arg1
	return args, nil
}

func (ec *executionContext) field_Self_Grant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *user.RegularID
		if tmp, ok := rawArgs["who"]; ok {
				arg0, err = ec.unmarshalORegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["who"] = arg0
		var arg1 []generated.Authorization
		if tmp, ok := rawArgs["abilities"]; ok {
				arg1, err = ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["abilities"] = arg1
	return args, nil
}

func (ec *executionContext) field_UserMutation_Regular_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *user.RegularID
		if tmp, ok := rawArgs["id"]; ok {
				arg0, err = ec.unmarshalORegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_Special_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *generated.SpecialUserID
		if tmp, ok := rawArgs["id"]; ok {
				arg0, err = ec.unmarshalOSpecialUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserQuery_Regular_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *user.RegularID
		if tmp, ok := rawArgs["id"]; ok {
				arg0, err = ec.unmarshalORegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserQuery_Special_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 *generated.SpecialUserID
		if tmp, ok := rawArgs["id"]; ok {
				arg0, err = ec.unmarshalOSpecialUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserQuery_WhoCan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 []generated.Authorization
		if tmp, ok := rawArgs["do"]; ok {
				arg0, err = ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["do"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 bool
		if tmp, ok := rawArgs["includeDeprecated"]; ok {
				arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
		var arg0 bool
		if tmp, ok := rawArgs["includeDeprecated"]; ok {
				arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
				if err != nil {
					return nil, err
				}
		}
		args["includeDeprecated"] = arg0
	return args, nil
}


// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************












// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

	func (ec *executionContext) _AuthenticationMutation_etc(ctx context.Context, field graphql.CollectedField, obj *generated.AuthenticationMutation) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AuthenticationMutation",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Etc, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOetc2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AuthenticationMutation_OIDC(ctx context.Context, field graphql.CollectedField, obj *generated.AuthenticationMutation) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AuthenticationMutation",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Oidc, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*generated.OIDCMutation)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOOIDCMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCMutation(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AuthenticationQuery_etc(ctx context.Context, field graphql.CollectedField, obj *generated.AuthenticationQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AuthenticationQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Etc, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOetc2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AuthenticationQuery_OIDC(ctx context.Context, field graphql.CollectedField, obj *generated.AuthenticationQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AuthenticationQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Oidc, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*generated.OIDCQuery)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOOIDCQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCQuery(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AuthorizationGrant_From(ctx context.Context, field graphql.CollectedField, obj *authz.Grant) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AuthorizationGrant",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.From, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNUser2invalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AuthorizationGrant_Of(ctx context.Context, field graphql.CollectedField, obj *authz.Grant) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AuthorizationGrant",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Of, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNAuthorization2ᚕinvalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _AuthorizationGrant_Valid(ctx context.Context, field graphql.CollectedField, obj *authz.Grant) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "AuthorizationGrant",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Valid(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOBoolean2bool(ctx, field.Selections, res)
	}

	func (ec *executionContext) _HistoryItem_Action(ctx context.Context, field graphql.CollectedField, obj *generated.HistoryItem) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "HistoryItem",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Action, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _HistoryItem_By(ctx context.Context, field graphql.CollectedField, obj *generated.HistoryItem) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "HistoryItem",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.By, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNUser2invalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _HistoryItem_RequestData(ctx context.Context, field graphql.CollectedField, obj *generated.HistoryItem) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "HistoryItem",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.RequestData, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _HistoryItem_IPAddress(ctx context.Context, field graphql.CollectedField, obj *generated.HistoryItem) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "HistoryItem",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.IPAddress, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IDToken_Issuer(ctx context.Context, field graphql.CollectedField, obj *oidc.IDToken) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IDToken",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Issuer, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IDToken_Subject(ctx context.Context, field graphql.CollectedField, obj *oidc.IDToken) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IDToken",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Subject, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IDToken_Audience(ctx context.Context, field graphql.CollectedField, obj *oidc.IDToken) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IDToken",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Audience, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IDToken_Expiration(ctx context.Context, field graphql.CollectedField, obj *oidc.IDToken) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IDToken",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Expiration, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNTime2invalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IDToken_Issued(ctx context.Context, field graphql.CollectedField, obj *oidc.IDToken) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IDToken",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Issued, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNTime2invalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IDToken_Nonce(ctx context.Context, field graphql.CollectedField, obj *oidc.IDToken) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IDToken",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Nonce, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IDToken_AuthenticationContextClassReference(ctx context.Context, field graphql.CollectedField, obj *oidc.IDToken) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IDToken",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.AuthenticationContextClassReference, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOInt2int(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IDToken_AuthenticationMethodsReference(ctx context.Context, field graphql.CollectedField, obj *oidc.IDToken) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IDToken",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.AuthenticationMethodsReference, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2ᚕstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _IDToken_AuthorizedParty(ctx context.Context, field graphql.CollectedField, obj *oidc.IDToken) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "IDToken",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.IDToken().AuthorizedParty(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Item_Id(ctx context.Context, field graphql.CollectedField, obj *Item) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Item",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.Item().ID(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(*ItemID)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNItemID2ᚖgithubᚗcomᚋzemnmezᚋtabᚐItemID(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Item_Name(ctx context.Context, field graphql.CollectedField, obj *Item) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Item",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Item_Location(ctx context.Context, field graphql.CollectedField, obj *Item) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Item",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Location, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Item_Parent(ctx context.Context, field graphql.CollectedField, obj *Item) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Item",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Parent()
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*Item)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚐItem(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Item_Children(ctx context.Context, field graphql.CollectedField, obj *Item) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Item",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Children()
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]Item)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNItem2ᚕgithubᚗcomᚋzemnmezᚋtabᚐItem(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Mutation_ok(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Mutation",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.Mutation().Ok(rctx)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Mutation_Authentication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Mutation",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.Mutation().Authentication(rctx)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*generated.AuthenticationMutation)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAuthenticationMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthenticationMutation(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Mutation_Item(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Mutation",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_Mutation_Item_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return ec.resolvers.Mutation().Item(rctx, args["id"].(ItemID), args["new"].(*generated.ItemInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"MODIFY_ITEMS"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, nil, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*Item) ; ok {
			return data, nil
		}else if tmp == nil {
				return nil, nil
			}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/zemnmez/tab.Item`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(*Item)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚐItem(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Mutation_User(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Mutation",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.Mutation().User(rctx)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*graphql1.UserMutation)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOUserMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgraphqlᚐUserMutation(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCMutation_Authenticate(ctx context.Context, field graphql.CollectedField, obj *generated.OIDCMutation) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCMutation",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_OIDCMutation_Authenticate_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Authenticate, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOUser2invalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCMutation_Provider(ctx context.Context, field graphql.CollectedField, obj *generated.OIDCMutation) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCMutation",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_OIDCMutation_Provider_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return obj.Provider, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"MODIFY_VALID_AUTH"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*oidc.Provider) ; ok {
			return data, nil
		}else if tmp == nil {
				return nil, nil
			}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/zemnmez/tab/user/authn/oidc.Provider`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*oidc.Provider)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOOIDCProvider2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐProvider(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCProvider_ID(ctx context.Context, field graphql.CollectedField, obj *oidc.Provider) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCProvider",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.OIDCProvider().ID(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOOIDCProviderID2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCProvider_Name(ctx context.Context, field graphql.CollectedField, obj *oidc.Provider) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCProvider",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCProvider_Callback(ctx context.Context, field graphql.CollectedField, obj *oidc.Provider) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCProvider",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.OIDCProvider().Callback(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCProvider_AuthorizationEndpoint(ctx context.Context, field graphql.CollectedField, obj *oidc.Provider) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCProvider",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.OIDCProvider().AuthorizationEndpoint(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCProvider_ClientID(ctx context.Context, field graphql.CollectedField, obj *oidc.Provider) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCProvider",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.OIDCProvider().ClientID(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCProviderQuery_All(ctx context.Context, field graphql.CollectedField, obj *generated.OIDCProviderQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCProviderQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.All, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]*oidc.Provider)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNOIDCProvider2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐProvider(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCProviderQuery_ByID(ctx context.Context, field graphql.CollectedField, obj *generated.OIDCProviderQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCProviderQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_OIDCProviderQuery_ByID_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.ByID, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*oidc.Provider)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOOIDCProvider2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐProvider(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCQuery_Provider(ctx context.Context, field graphql.CollectedField, obj *generated.OIDCQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Provider, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*generated.OIDCProviderQuery)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOOIDCProviderQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCProviderQuery(ctx, field.Selections, res)
	}

	func (ec *executionContext) _OIDCQuery_IsValid(ctx context.Context, field graphql.CollectedField, obj *generated.OIDCQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "OIDCQuery",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_OIDCQuery_IsValid_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.IsValid, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Query_ok(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Query",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.Query().Ok(rctx)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Query_Authentication(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Query",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.Query().Authentication(rctx)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*generated.AuthenticationQuery)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOAuthenticationQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthenticationQuery(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Query_Item(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Query",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_Query_Item_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return ec.resolvers.Query().Item(rctx, args["id"].(ItemID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"VIEW_ITEMS"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, nil, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*Item) ; ok {
			return data, nil
		}else if tmp == nil {
				return nil, nil
			}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/zemnmez/tab.Item`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*Item)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚐItem(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Query_User(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Query",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*graphql1.UserQuery)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOUserQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgraphqlᚐUserQuery(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Query",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_Query___type_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Query",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.introspectSchema()
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Schema)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
	}

	func (ec *executionContext) _RegularUser_ID(ctx context.Context, field graphql.CollectedField, obj *user.Regular) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "RegularUser",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.ID, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(user.RegularID)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNRegularUserID2githubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx, field.Selections, res)
	}

	func (ec *executionContext) _RegularUser_Name(ctx context.Context, field graphql.CollectedField, obj *user.Regular) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "RegularUser",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _RegularUser_Authentication(ctx context.Context, field graphql.CollectedField, obj *user.Regular) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "RegularUser",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.RegularUser().Authentication(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*authn.Authentication)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOUserAuthentication2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚐAuthentication(ctx, field.Selections, res)
	}

	func (ec *executionContext) _RegularUser_Grants(ctx context.Context, field graphql.CollectedField, obj *user.Regular) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "RegularUser",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Grants, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNAuthorizationGrant2ᚕinvalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _RegularUser_Authorizations(ctx context.Context, field graphql.CollectedField, obj *user.Regular) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "RegularUser",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Authorizations()
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNAuthorization2ᚕinvalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _RegularUser_History(ctx context.Context, field graphql.CollectedField, obj *user.Regular) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "RegularUser",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return obj.History()
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"VIEW_OTHER_USERS_HISTORY"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]invalid type) ; ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []invalid type`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNHistoryItem2ᚕinvalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Self_Name(ctx context.Context, field graphql.CollectedField, obj *generated.Self) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Self",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Self_Authentication(ctx context.Context, field graphql.CollectedField, obj *generated.Self) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Self",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Authentication, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*authn.Authentication)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOUserAuthentication2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚐAuthentication(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Self_Grants(ctx context.Context, field graphql.CollectedField, obj *generated.Self) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Self",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Grants, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]*authz.Grant)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNAuthorizationGrant2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthzᚐGrant(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Self_Authorizatons(ctx context.Context, field graphql.CollectedField, obj *generated.Self) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Self",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Authorizatons, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]generated.Authorization)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Self_Grant(ctx context.Context, field graphql.CollectedField, obj *generated.Self) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Self",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_Self_Grant_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Grant, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOUser2invalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Self_GrantSpecial(ctx context.Context, field graphql.CollectedField, obj *generated.Self) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Self",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_Self_GrantSpecial_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return obj.GrantSpecial, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"MODIFY_SPECIAL_USERS"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*invalid type) ; ok {
			return data, nil
		}else if tmp == nil {
				return nil, nil
			}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *invalid type`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOSpecialUser2ᚖinvalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _Self_History(ctx context.Context, field graphql.CollectedField, obj *generated.Self) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "Self",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return obj.History, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"VIEW_OWN_HISTORY"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]*generated.HistoryItem) ; ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/zemnmez/tab/generated.HistoryItem`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]*generated.HistoryItem)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNHistoryItem2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐHistoryItem(ctx, field.Selections, res)
	}

	func (ec *executionContext) _SpecialUser_ID(ctx context.Context, field graphql.CollectedField, obj *user.Special) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "SpecialUser",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.ID, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(generated.SpecialUserID)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx, field.Selections, res)
	}

	func (ec *executionContext) _SpecialUser_Name(ctx context.Context, field graphql.CollectedField, obj *user.Special) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "SpecialUser",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) _SpecialUser_Authentication(ctx context.Context, field graphql.CollectedField, obj *user.Special) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "SpecialUser",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.SpecialUser().Authentication(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*authn.Authentication)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOUserAuthentication2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚐAuthentication(ctx, field.Selections, res)
	}

	func (ec *executionContext) _SpecialUser_Grants(ctx context.Context, field graphql.CollectedField, obj *user.Special) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "SpecialUser",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Grants, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNAuthorizationGrant2ᚕinvalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _SpecialUser_Authorizations(ctx context.Context, field graphql.CollectedField, obj *user.Special) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "SpecialUser",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Authorizations()
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNAuthorization2ᚕinvalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _SpecialUser_History(ctx context.Context, field graphql.CollectedField, obj *user.Special) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "SpecialUser",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return obj.History()
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"VIEW_OTHER_USERS_HISTORY"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]invalid type) ; ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []invalid type`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]invalid type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNHistoryItem2ᚕinvalid type(ctx, field.Selections, res)
	}

	func (ec *executionContext) _UserAuthentication_etc(ctx context.Context, field graphql.CollectedField, obj *authn.Authentication) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "UserAuthentication",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.UserAuthentication().Etc(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOetc2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) _UserAuthentication_OIDC(ctx context.Context, field graphql.CollectedField, obj *authn.Authentication) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "UserAuthentication",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.UserAuthentication().Oidc(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]*oidc.IDToken)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNIDToken2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx, field.Selections, res)
	}

	func (ec *executionContext) _UserMutation_Self(ctx context.Context, field graphql.CollectedField, obj *graphql1.UserMutation) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "UserMutation",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return ec.resolvers.UserMutation().Self(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"MODIFY_SELF"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(generated.UserMutator) ; ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/zemnmez/tab/generated.UserMutator`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(generated.UserMutator)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐUserMutator(ctx, field.Selections, res)
	}

	func (ec *executionContext) _UserMutation_Special(ctx context.Context, field graphql.CollectedField, obj *graphql1.UserMutation) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "UserMutation",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_UserMutation_Special_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return ec.resolvers.UserMutation().Special(rctx, obj, args["id"].(*generated.SpecialUserID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"MODIFY_SPECIAL_USERS"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(generated.UserMutator) ; ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/zemnmez/tab/generated.UserMutator`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(generated.UserMutator)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐUserMutator(ctx, field.Selections, res)
	}

	func (ec *executionContext) _UserMutation_Regular(ctx context.Context, field graphql.CollectedField, obj *graphql1.UserMutation) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "UserMutation",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_UserMutation_Regular_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return ec.resolvers.UserMutation().Regular(rctx, obj, args["id"].(*user.RegularID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"MODIFY_OTHER_USERS"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(generated.UserMutator) ; ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/zemnmez/tab/generated.UserMutator`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(generated.UserMutator)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐUserMutator(ctx, field.Selections, res)
	}

	func (ec *executionContext) _UserQuery_Self(ctx context.Context, field graphql.CollectedField, obj *graphql1.UserQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "UserQuery",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return ec.resolvers.UserQuery().Self(rctx, obj)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(*generated.Self)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNSelf2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSelf(ctx, field.Selections, res)
	}

	func (ec *executionContext) _UserQuery_Special(ctx context.Context, field graphql.CollectedField, obj *graphql1.UserQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "UserQuery",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_UserQuery_Special_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return ec.resolvers.UserQuery().Special(rctx, obj, args["id"].(*generated.SpecialUserID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"VIEW_USERS"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*user.Special) ; ok {
			return data, nil
		}else if tmp == nil {
				return nil, nil
			}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/zemnmez/tab/user.Special`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*user.Special)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOSpecialUser2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚐSpecial(ctx, field.Selections, res)
	}

	func (ec *executionContext) _UserQuery_Regular(ctx context.Context, field graphql.CollectedField, obj *graphql1.UserQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "UserQuery",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_UserQuery_Regular_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return ec.resolvers.UserQuery().Regular(rctx, obj, args["id"].(*user.RegularID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"VIEW_USERS"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.(*user.Regular) ; ok {
			return data, nil
		}else if tmp == nil {
				return nil, nil
			}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/zemnmez/tab/user.Regular`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*user.Regular)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalORegularUser2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚐRegular(ctx, field.Selections, res)
	}

	func (ec *executionContext) _UserQuery_WhoCan(ctx context.Context, field graphql.CollectedField, obj *graphql1.UserQuery) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "UserQuery",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field_UserQuery_WhoCan_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx  // use context from middleware stack in children
			return ec.resolvers.UserQuery().WhoCan(rctx, obj, args["do"].([]generated.Authorization))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
						to, err := ec.unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, []interface{}{"VIEW_USERS"})
						if err != nil{
							return nil, err
						}
			return ec.directives.Authorized(ctx, obj, directive0, to)
		}
	
		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if data, ok := tmp.([]user.User) ; ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/zemnmez/tab/user.User`, tmp)
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]user.User)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNUser2ᚕgithubᚗcomᚋzemnmezᚋtabᚋuserᚐUser(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Directive",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Directive",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Directive",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Locations, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__DirectiveLocation2ᚕstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Directive",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Args, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]introspection.InputValue)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__EnumValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__EnumValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__EnumValue",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.IsDeprecated(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNBoolean2bool(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__EnumValue",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.DeprecationReason(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Args, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]introspection.InputValue)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Type, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.IsDeprecated(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(bool)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNBoolean2bool(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Field",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.DeprecationReason(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__InputValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalNString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__InputValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__InputValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Type, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__InputValue",
			Field: field,
			Args:  nil,
			IsMethod: false,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.DefaultValue, nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Types(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.QueryType(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.MutationType(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.SubscriptionType(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Schema",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Directives(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.([]introspection.Directive)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Kind(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
				if !ec.HasError(rctx) {
					ec.Errorf(ctx, "must not be null")
				}
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Name(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Description(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(string)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalOString2string(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field___Type_fields_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.Field)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.Interfaces(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.PossibleTypes(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
			rawArgs := field.ArgumentMap(ec.Variables)
			args, err := ec.field___Type_enumValues_args(ctx,rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
			rctx.Args = args
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.EnumValue)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.InputFields(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]introspection.InputValue)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
	}

	func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
		ctx = ec.Tracer.StartFieldExecution(ctx, field)
		defer func () {
			if r := recover(); r != nil {
				ec.Error(ctx, ec.Recover(ctx, r))
				ret = graphql.Null
			}
			ec.Tracer.EndFieldExecution(ctx)
		}()
		rctx := &graphql.ResolverContext{
			Object: "__Type",
			Field: field,
			Args:  nil,
			IsMethod: true,
		}
		ctx = graphql.WithResolverContext(ctx, rctx)
		ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
			resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
				ctx = rctx  // use context from middleware stack in children
		return obj.OfType(), nil
			})
			if err != nil {
				ec.Error(ctx, err)
				return graphql.Null
			}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*introspection.Type)
		rctx.Result = res
		ctx = ec.Tracer.StartFieldChildExecution(ctx)
		return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
	}






// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

	func (ec *executionContext) unmarshalInputAnonymousUser(ctx context.Context, obj interface{}) (generated.AnonymousUser, error) {
		var it generated.AnonymousUser
		var asMap = obj.(map[string]interface{})
		
				if _, present := asMap["ID"] ; !present {
					asMap["ID"] = "ANONYMOUS"
				}
				if _, present := asMap["Name"] ; !present {
					asMap["Name"] = "Anonymous"
				}

		for k, v := range asMap {
			switch k {
			case "ID":
				var err error
					it.ID, err = ec.unmarshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx, v)
					if err != nil {
						return it, err
					}
			case "Name":
				var err error
					it.Name, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}

	func (ec *executionContext) unmarshalInputDefinedItemInput(ctx context.Context, obj interface{}) (generated.DefinedItemInput, error) {
		var it generated.DefinedItemInput
		var asMap = obj.(map[string]interface{})
		

		for k, v := range asMap {
			switch k {
			case "Name":
				var err error
					it.Name, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			case "Location":
				var err error
					it.Location, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			case "Parent":
				var err error
					it.Parent, err = ec.unmarshalOItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx, v)
					if err != nil {
						return it, err
					}
			case "Children":
				var err error
					it.Children, err = ec.unmarshalNItemInput2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}

	func (ec *executionContext) unmarshalInputIDTokenInput(ctx context.Context, obj interface{}) (oidc.IDToken, error) {
		var it oidc.IDToken
		var asMap = obj.(map[string]interface{})
		

		for k, v := range asMap {
			switch k {
			case "Issuer":
				var err error
					it.Issuer, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			case "Subject":
				var err error
					it.Subject, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			case "Audience":
				var err error
					it.Audience, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			case "Expiration":
				var err error
					it.Expiration, err = ec.unmarshalNTime2invalid type(ctx, v)
					if err != nil {
						return it, err
					}
			case "Issued":
				var err error
					it.Issued, err = ec.unmarshalNTime2invalid type(ctx, v)
					if err != nil {
						return it, err
					}
			case "Nonce":
				var err error
					it.Nonce, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			case "AuthenticationContextClassReference":
				var err error
					it.AuthenticationContextClassReference, err = ec.unmarshalOInt2int(ctx, v)
					if err != nil {
						return it, err
					}
			case "AuthenticationMethodsReference":
				var err error
					it.AuthenticationMethodsReference, err = ec.unmarshalNString2ᚕstring(ctx, v)
					if err != nil {
						return it, err
					}
			case "AuthorizedParty":
				var err error
					it.AuthorizedParty, err = ec.unmarshalOString2ᚖstring(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}

	func (ec *executionContext) unmarshalInputItemInput(ctx context.Context, obj interface{}) (generated.ItemInput, error) {
		var it generated.ItemInput
		var asMap = obj.(map[string]interface{})
		

		for k, v := range asMap {
			switch k {
			case "ById":
				var err error
					it.ByID, err = ec.unmarshalOItemID2ᚖinvalid type(ctx, v)
					if err != nil {
						return it, err
					}
			case "WithStructure":
				var err error
					it.WithStructure, err = ec.unmarshalODefinedItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐDefinedItemInput(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}

	func (ec *executionContext) unmarshalInputOIDCProviderInput(ctx context.Context, obj interface{}) (generated.OIDCProviderInput, error) {
		var it generated.OIDCProviderInput
		var asMap = obj.(map[string]interface{})
		

		for k, v := range asMap {
			switch k {
			case "Name":
				var err error
					it.Name, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}

	func (ec *executionContext) unmarshalInputRootUser(ctx context.Context, obj interface{}) (generated.RootUser, error) {
		var it generated.RootUser
		var asMap = obj.(map[string]interface{})
		
				if _, present := asMap["ID"] ; !present {
					asMap["ID"] = "ADMIN"
				}
				if _, present := asMap["Name"] ; !present {
					asMap["Name"] = "Root"
				}

		for k, v := range asMap {
			switch k {
			case "ID":
				var err error
					it.ID, err = ec.unmarshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx, v)
					if err != nil {
						return it, err
					}
			case "Name":
				var err error
					it.Name, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}

	func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (generated.UserInput, error) {
		var it generated.UserInput
		var asMap = obj.(map[string]interface{})
		

		for k, v := range asMap {
			switch k {
			case "Name":
				var err error
					it.Name, err = ec.unmarshalNString2string(ctx, v)
					if err != nil {
						return it, err
					}
			}
		}

		return it, nil
	}


// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************


func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *user.User) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
		case *generated.Self:
			return ec._Self(ctx, sel, obj)
		case *user.Regular:
			return ec._RegularUser(ctx, sel, obj)
		case *user.Special:
			return ec._SpecialUser(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UserMutator(ctx context.Context, sel ast.SelectionSet, obj *generated.UserMutator) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************


var authenticationMutationImplementors = []string{"AuthenticationMutation"}
func (ec *executionContext) _AuthenticationMutation(ctx context.Context, sel ast.SelectionSet,obj *generated.AuthenticationMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, authenticationMutationImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthenticationMutation")
		case "etc":
				out.Values[i] = ec._AuthenticationMutation_etc(ctx, field, obj)
		case "OIDC":
				out.Values[i] = ec._AuthenticationMutation_OIDC(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var authenticationQueryImplementors = []string{"AuthenticationQuery"}
func (ec *executionContext) _AuthenticationQuery(ctx context.Context, sel ast.SelectionSet,obj *generated.AuthenticationQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, authenticationQueryImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthenticationQuery")
		case "etc":
				out.Values[i] = ec._AuthenticationQuery_etc(ctx, field, obj)
		case "OIDC":
				out.Values[i] = ec._AuthenticationQuery_OIDC(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var authorizationGrantImplementors = []string{"AuthorizationGrant"}
func (ec *executionContext) _AuthorizationGrant(ctx context.Context, sel ast.SelectionSet,obj *authz.Grant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, authorizationGrantImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorizationGrant")
		case "From":
				out.Values[i] = ec._AuthorizationGrant_From(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "Of":
				out.Values[i] = ec._AuthorizationGrant_Of(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "Valid":
				out.Values[i] = ec._AuthorizationGrant_Valid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var historyItemImplementors = []string{"HistoryItem"}
func (ec *executionContext) _HistoryItem(ctx context.Context, sel ast.SelectionSet,obj *generated.HistoryItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, historyItemImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistoryItem")
		case "Action":
				out.Values[i] = ec._HistoryItem_Action(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "By":
				out.Values[i] = ec._HistoryItem_By(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "RequestData":
				out.Values[i] = ec._HistoryItem_RequestData(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "IPAddress":
				out.Values[i] = ec._HistoryItem_IPAddress(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var iDTokenImplementors = []string{"IDToken"}
func (ec *executionContext) _IDToken(ctx context.Context, sel ast.SelectionSet,obj *oidc.IDToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iDTokenImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IDToken")
		case "Issuer":
				out.Values[i] = ec._IDToken_Issuer(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Subject":
				out.Values[i] = ec._IDToken_Subject(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Audience":
				out.Values[i] = ec._IDToken_Audience(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Expiration":
				out.Values[i] = ec._IDToken_Expiration(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Issued":
				out.Values[i] = ec._IDToken_Issued(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Nonce":
				out.Values[i] = ec._IDToken_Nonce(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "AuthenticationContextClassReference":
				out.Values[i] = ec._IDToken_AuthenticationContextClassReference(ctx, field, obj)
		case "AuthenticationMethodsReference":
				out.Values[i] = ec._IDToken_AuthenticationMethodsReference(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "AuthorizedParty":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._IDToken_AuthorizedParty(ctx, field, obj)
					return res
				})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var itemImplementors = []string{"Item"}
func (ec *executionContext) _Item(ctx context.Context, sel ast.SelectionSet,obj *Item) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, itemImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Item")
		case "Id":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._Item_Id(ctx, field, obj)
						if res == graphql.Null {
								atomic.AddUint32(&invalids, 1)
						}
					return res
				})
		case "Name":
				out.Values[i] = ec._Item_Name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Location":
				out.Values[i] = ec._Item_Location(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Parent":
				out.Values[i] = ec._Item_Parent(ctx, field, obj)
		case "Children":
				out.Values[i] = ec._Item_Children(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var mutationImplementors = []string{"Mutation"}
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, mutationImplementors)
	
		ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
			Object: "Mutation",
		})
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "ok":
				out.Values[i] = ec._Mutation_ok(ctx, field)
		case "Authentication":
				out.Values[i] = ec._Mutation_Authentication(ctx, field)
		case "Item":
				out.Values[i] = ec._Mutation_Item(ctx, field)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "User":
				out.Values[i] = ec._Mutation_User(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var oIDCMutationImplementors = []string{"OIDCMutation"}
func (ec *executionContext) _OIDCMutation(ctx context.Context, sel ast.SelectionSet,obj *generated.OIDCMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, oIDCMutationImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OIDCMutation")
		case "Authenticate":
				out.Values[i] = ec._OIDCMutation_Authenticate(ctx, field, obj)
		case "Provider":
				out.Values[i] = ec._OIDCMutation_Provider(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var oIDCProviderImplementors = []string{"OIDCProvider"}
func (ec *executionContext) _OIDCProvider(ctx context.Context, sel ast.SelectionSet,obj *oidc.Provider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, oIDCProviderImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OIDCProvider")
		case "ID":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._OIDCProvider_ID(ctx, field, obj)
					return res
				})
		case "Name":
				out.Values[i] = ec._OIDCProvider_Name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Callback":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._OIDCProvider_Callback(ctx, field, obj)
						if res == graphql.Null {
								atomic.AddUint32(&invalids, 1)
						}
					return res
				})
		case "AuthorizationEndpoint":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._OIDCProvider_AuthorizationEndpoint(ctx, field, obj)
						if res == graphql.Null {
								atomic.AddUint32(&invalids, 1)
						}
					return res
				})
		case "ClientID":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._OIDCProvider_ClientID(ctx, field, obj)
						if res == graphql.Null {
								atomic.AddUint32(&invalids, 1)
						}
					return res
				})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var oIDCProviderQueryImplementors = []string{"OIDCProviderQuery"}
func (ec *executionContext) _OIDCProviderQuery(ctx context.Context, sel ast.SelectionSet,obj *generated.OIDCProviderQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, oIDCProviderQueryImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OIDCProviderQuery")
		case "All":
				out.Values[i] = ec._OIDCProviderQuery_All(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "ByID":
				out.Values[i] = ec._OIDCProviderQuery_ByID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var oIDCQueryImplementors = []string{"OIDCQuery"}
func (ec *executionContext) _OIDCQuery(ctx context.Context, sel ast.SelectionSet,obj *generated.OIDCQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, oIDCQueryImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OIDCQuery")
		case "Provider":
				out.Values[i] = ec._OIDCQuery_Provider(ctx, field, obj)
		case "IsValid":
				out.Values[i] = ec._OIDCQuery_IsValid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var queryImplementors = []string{"Query"}
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryImplementors)
	
		ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
			Object: "Query",
		})
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "ok":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._Query_ok(ctx, field)
					return res
				})
		case "Authentication":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._Query_Authentication(ctx, field)
					return res
				})
		case "Item":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._Query_Item(ctx, field)
					return res
				})
		case "User":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._Query_User(ctx, field)
					return res
				})
		case "__type":
				out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
				out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var regularUserImplementors = []string{"RegularUser", "User"}
func (ec *executionContext) _RegularUser(ctx context.Context, sel ast.SelectionSet,obj *user.Regular) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, regularUserImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegularUser")
		case "ID":
				out.Values[i] = ec._RegularUser_ID(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Name":
				out.Values[i] = ec._RegularUser_Name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Authentication":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._RegularUser_Authentication(ctx, field, obj)
					return res
				})
		case "Grants":
				out.Values[i] = ec._RegularUser_Grants(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Authorizations":
				out.Values[i] = ec._RegularUser_Authorizations(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "History":
				out.Values[i] = ec._RegularUser_History(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var selfImplementors = []string{"Self", "User"}
func (ec *executionContext) _Self(ctx context.Context, sel ast.SelectionSet,obj *generated.Self) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, selfImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Self")
		case "Name":
				out.Values[i] = ec._Self_Name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "Authentication":
				out.Values[i] = ec._Self_Authentication(ctx, field, obj)
		case "Grants":
				out.Values[i] = ec._Self_Grants(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "Authorizatons":
				out.Values[i] = ec._Self_Authorizatons(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "Grant":
				out.Values[i] = ec._Self_Grant(ctx, field, obj)
		case "GrantSpecial":
				out.Values[i] = ec._Self_GrantSpecial(ctx, field, obj)
		case "History":
				out.Values[i] = ec._Self_History(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var specialUserImplementors = []string{"SpecialUser", "User"}
func (ec *executionContext) _SpecialUser(ctx context.Context, sel ast.SelectionSet,obj *user.Special) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, specialUserImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpecialUser")
		case "ID":
				out.Values[i] = ec._SpecialUser_ID(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Name":
				out.Values[i] = ec._SpecialUser_Name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Authentication":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._SpecialUser_Authentication(ctx, field, obj)
					return res
				})
		case "Grants":
				out.Values[i] = ec._SpecialUser_Grants(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "Authorizations":
				out.Values[i] = ec._SpecialUser_Authorizations(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		case "History":
				out.Values[i] = ec._SpecialUser_History(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							atomic.AddUint32(&invalids, 1)
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var userAuthenticationImplementors = []string{"UserAuthentication"}
func (ec *executionContext) _UserAuthentication(ctx context.Context, sel ast.SelectionSet,obj *authn.Authentication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userAuthenticationImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAuthentication")
		case "etc":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._UserAuthentication_etc(ctx, field, obj)
					return res
				})
		case "OIDC":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._UserAuthentication_OIDC(ctx, field, obj)
						if res == graphql.Null {
								atomic.AddUint32(&invalids, 1)
						}
					return res
				})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var userMutationImplementors = []string{"UserMutation"}
func (ec *executionContext) _UserMutation(ctx context.Context, sel ast.SelectionSet,obj *graphql1.UserMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userMutationImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserMutation")
		case "Self":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._UserMutation_Self(ctx, field, obj)
						if res == graphql.Null {
								atomic.AddUint32(&invalids, 1)
						}
					return res
				})
		case "Special":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._UserMutation_Special(ctx, field, obj)
					return res
				})
		case "Regular":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._UserMutation_Regular(ctx, field, obj)
					return res
				})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var userQueryImplementors = []string{"UserQuery"}
func (ec *executionContext) _UserQuery(ctx context.Context, sel ast.SelectionSet,obj *graphql1.UserQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userQueryImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserQuery")
		case "Self":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._UserQuery_Self(ctx, field, obj)
						if res == graphql.Null {
								atomic.AddUint32(&invalids, 1)
						}
					return res
				})
		case "Special":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._UserQuery_Special(ctx, field, obj)
					return res
				})
		case "Regular":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._UserQuery_Regular(ctx, field, obj)
					return res
				})
		case "WhoCan":
				field := field
				out.Concurrently(i, func() (res graphql.Marshaler) {
					defer func() {
						if r := recover(); r != nil {
							ec.Error(ctx, ec.Recover(ctx, r))
						}
					}()
					res = ec._UserQuery_WhoCan(ctx, field, obj)
						if res == graphql.Null {
								atomic.AddUint32(&invalids, 1)
						}
					return res
				})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __DirectiveImplementors = []string{"__Directive"}
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet,obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __DirectiveImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
				out.Values[i] = ec.___Directive_name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
				out.Values[i] = ec.___Directive_locations(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "args":
				out.Values[i] = ec.___Directive_args(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet,obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __EnumValueImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
				out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
				out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "deprecationReason":
				out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __FieldImplementors = []string{"__Field"}
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet,obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __FieldImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
				out.Values[i] = ec.___Field_name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
				out.Values[i] = ec.___Field_args(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "type":
				out.Values[i] = ec.___Field_type(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "isDeprecated":
				out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "deprecationReason":
				out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __InputValueImplementors = []string{"__InputValue"}
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet,obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __InputValueImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
				out.Values[i] = ec.___InputValue_name(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "description":
				out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
				out.Values[i] = ec.___InputValue_type(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "defaultValue":
				out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __SchemaImplementors = []string{"__Schema"}
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet,obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __SchemaImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
				out.Values[i] = ec.___Schema_types(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "queryType":
				out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "mutationType":
				out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
				out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
				out.Values[i] = ec.___Schema_directives(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

var __TypeImplementors = []string{"__Type"}
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet,obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __TypeImplementors)
	

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
				out.Values[i] = ec.___Type_kind(ctx, field, obj)
					if out.Values[i] == graphql.Null {
							invalids++
					}
		case "name":
				out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
				out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
				out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
				out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
				out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
				out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
				out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
				out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 { return graphql.Null }
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

	
		func (ec *executionContext) unmarshalNAuthorization2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx context.Context, v interface{}) (generated.Authorization, error) {var res generated.Authorization
					return res, res.UnmarshalGQL(v)
		}

	
		func (ec *executionContext) marshalNAuthorization2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx context.Context, sel ast.SelectionSet, v generated.Authorization) graphql.Marshaler {
					return v
		}
	
		func (ec *executionContext) unmarshalNAuthorization2invalid type(ctx context.Context, v interface{}) (invalid type, error) {var res invalid type
					return res, res.UnmarshalGQL(v)
		}

	
		func (ec *executionContext) marshalNAuthorization2invalid type(ctx context.Context, sel ast.SelectionSet, v invalid type) graphql.Marshaler {
					return v
		}
	
		func (ec *executionContext) unmarshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx context.Context, v interface{}) ([]generated.Authorization, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]generated.Authorization, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalNAuthorization2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
		func (ec *executionContext) marshalNAuthorization2ᚕgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx context.Context, sel ast.SelectionSet, v []generated.Authorization) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNAuthorization2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthorization(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	
		func (ec *executionContext) unmarshalNAuthorization2ᚕinvalid type(ctx context.Context, v interface{}) ([]invalid type, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]invalid type, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalNAuthorization2invalid type(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
		func (ec *executionContext) marshalNAuthorization2ᚕinvalid type(ctx context.Context, sel ast.SelectionSet, v []invalid type) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNAuthorization2invalid type(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalNAuthorizationGrant2githubᚗcomᚋzemnmezᚋtabᚋuserᚋauthzᚐGrant(ctx context.Context, sel ast.SelectionSet, v authz.Grant) graphql.Marshaler {
					return ec._AuthorizationGrant(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNAuthorizationGrant2invalid type(ctx context.Context, sel ast.SelectionSet, v invalid type) graphql.Marshaler {
					return ec._AuthorizationGrant(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNAuthorizationGrant2ᚕinvalid type(ctx context.Context, sel ast.SelectionSet, v []invalid type) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNAuthorizationGrant2invalid type(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalNAuthorizationGrant2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthzᚐGrant(ctx context.Context, sel ast.SelectionSet, v []*authz.Grant) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNAuthorizationGrant2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthzᚐGrant(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalNAuthorizationGrant2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthzᚐGrant(ctx context.Context, sel ast.SelectionSet, v *authz.Grant) graphql.Marshaler {
				if v == nil {
						if !ec.HasError(graphql.GetResolverContext(ctx)) {
							ec.Errorf(ctx, "must not be null")
						}
					return graphql.Null
				}
					return ec._AuthorizationGrant(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
						return graphql.UnmarshalBoolean(v)
		}

	
		func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
							res := graphql.MarshalBoolean(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	

	
		func (ec *executionContext) marshalNHistoryItem2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐHistoryItem(ctx context.Context, sel ast.SelectionSet, v generated.HistoryItem) graphql.Marshaler {
					return ec._HistoryItem(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNHistoryItem2invalid type(ctx context.Context, sel ast.SelectionSet, v invalid type) graphql.Marshaler {
					return ec._HistoryItem(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNHistoryItem2ᚕinvalid type(ctx context.Context, sel ast.SelectionSet, v []invalid type) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNHistoryItem2invalid type(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalNHistoryItem2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐHistoryItem(ctx context.Context, sel ast.SelectionSet, v []*generated.HistoryItem) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNHistoryItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐHistoryItem(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalNHistoryItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐHistoryItem(ctx context.Context, sel ast.SelectionSet, v *generated.HistoryItem) graphql.Marshaler {
				if v == nil {
						if !ec.HasError(graphql.GetResolverContext(ctx)) {
							ec.Errorf(ctx, "must not be null")
						}
					return graphql.Null
				}
					return ec._HistoryItem(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalNIDToken2githubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx context.Context, sel ast.SelectionSet, v oidc.IDToken) graphql.Marshaler {
					return ec._IDToken(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNIDToken2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx context.Context, sel ast.SelectionSet, v []*oidc.IDToken) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNIDToken2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalNIDToken2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx context.Context, sel ast.SelectionSet, v *oidc.IDToken) graphql.Marshaler {
				if v == nil {
						if !ec.HasError(graphql.GetResolverContext(ctx)) {
							ec.Errorf(ctx, "must not be null")
						}
					return graphql.Null
				}
					return ec._IDToken(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalNItem2githubᚗcomᚋzemnmezᚋtabᚐItem(ctx context.Context, sel ast.SelectionSet, v Item) graphql.Marshaler {
					return ec._Item(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNItem2ᚕgithubᚗcomᚋzemnmezᚋtabᚐItem(ctx context.Context, sel ast.SelectionSet, v []Item) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNItem2githubᚗcomᚋzemnmezᚋtabᚐItem(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalNItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚐItem(ctx context.Context, sel ast.SelectionSet, v *Item) graphql.Marshaler {
				if v == nil {
						if !ec.HasError(graphql.GetResolverContext(ctx)) {
							ec.Errorf(ctx, "must not be null")
						}
					return graphql.Null
				}
					return ec._Item(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalNItemID2githubᚗcomᚋzemnmezᚋtabᚐItemID(ctx context.Context, v interface{}) (ItemID, error) {
					return ec.unmarshalInputItemID(ctx, v)
		}

	
		func (ec *executionContext) marshalNItemID2githubᚗcomᚋzemnmezᚋtabᚐItemID(ctx context.Context, sel ast.SelectionSet, v ItemID) graphql.Marshaler {
					return ec._ItemID(ctx, sel, & v)
		}
	
		func (ec *executionContext) unmarshalNItemID2ᚖgithubᚗcomᚋzemnmezᚋtabᚐItemID(ctx context.Context, v interface{}) (*ItemID, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalNItemID2githubᚗcomᚋzemnmezᚋtabᚐItemID(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalNItemID2ᚖgithubᚗcomᚋzemnmezᚋtabᚐItemID(ctx context.Context, sel ast.SelectionSet, v *ItemID) graphql.Marshaler {
				if v == nil {
						if !ec.HasError(graphql.GetResolverContext(ctx)) {
							ec.Errorf(ctx, "must not be null")
						}
					return graphql.Null
				}
					return ec._ItemID(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalNItemInput2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx context.Context, v interface{}) (generated.ItemInput, error) {
					return ec.unmarshalInputItemInput(ctx, v)
		}

	
	
		func (ec *executionContext) unmarshalNItemInput2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx context.Context, v interface{}) ([]*generated.ItemInput, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]*generated.ItemInput, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalNItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
	
		func (ec *executionContext) unmarshalNItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx context.Context, v interface{}) (*generated.ItemInput, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalNItemInput2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx, v)
				return &res, err
		}

	
	

	
		func (ec *executionContext) marshalNOIDCProvider2githubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐProvider(ctx context.Context, sel ast.SelectionSet, v oidc.Provider) graphql.Marshaler {
					return ec._OIDCProvider(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNOIDCProvider2ᚕᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐProvider(ctx context.Context, sel ast.SelectionSet, v []*oidc.Provider) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNOIDCProvider2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐProvider(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalNOIDCProvider2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐProvider(ctx context.Context, sel ast.SelectionSet, v *oidc.Provider) graphql.Marshaler {
				if v == nil {
						if !ec.HasError(graphql.GetResolverContext(ctx)) {
							ec.Errorf(ctx, "must not be null")
						}
					return graphql.Null
				}
					return ec._OIDCProvider(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalNRegularUserID2githubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx context.Context, v interface{}) (user.RegularID, error) {
					return ec.unmarshalInputRegularUserID(ctx, v)
		}

	
		func (ec *executionContext) marshalNRegularUserID2githubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx context.Context, sel ast.SelectionSet, v user.RegularID) graphql.Marshaler {
					return ec._RegularUserID(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNSelf2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSelf(ctx context.Context, sel ast.SelectionSet, v generated.Self) graphql.Marshaler {
					return ec._Self(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNSelf2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSelf(ctx context.Context, sel ast.SelectionSet, v *generated.Self) graphql.Marshaler {
				if v == nil {
						if !ec.HasError(graphql.GetResolverContext(ctx)) {
							ec.Errorf(ctx, "must not be null")
						}
					return graphql.Null
				}
					return ec._Self(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx context.Context, v interface{}) (generated.SpecialUserID, error) {var res generated.SpecialUserID
					return res, res.UnmarshalGQL(v)
		}

	
		func (ec *executionContext) marshalNSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx context.Context, sel ast.SelectionSet, v generated.SpecialUserID) graphql.Marshaler {
					return v
		}
	
		func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
							res := graphql.MarshalString(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	
		func (ec *executionContext) unmarshalNString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]string, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
		func (ec *executionContext) marshalNString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
				for i := range v {
						ret[i] = ec.marshalNString2string(ctx, sel, v[i])
				}
				
				return ret
		}
	
		func (ec *executionContext) unmarshalNTime2invalid type(ctx context.Context, v interface{}) (invalid type, error) {
						return graphql.UnmarshalTime(v)
		}

	
		func (ec *executionContext) marshalNTime2invalid type(ctx context.Context, sel ast.SelectionSet, v invalid type) graphql.Marshaler {
							res := graphql.MarshalTime(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	

	
		func (ec *executionContext) marshalNUser2githubᚗcomᚋzemnmezᚋtabᚋuserᚐUser(ctx context.Context, sel ast.SelectionSet, v user.User) graphql.Marshaler {
					return ec._User(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNUser2invalid type(ctx context.Context, sel ast.SelectionSet, v invalid type) graphql.Marshaler {
					return ec._User(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalNUser2ᚕgithubᚗcomᚋzemnmezᚋtabᚋuserᚐUser(ctx context.Context, sel ast.SelectionSet, v []user.User) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalNUser2githubᚗcomᚋzemnmezᚋtabᚋuserᚐUser(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalNUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐUserMutator(ctx context.Context, sel ast.SelectionSet, v generated.UserMutator) graphql.Marshaler {
					return ec._UserMutator(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
					return ec.___Directive(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	
		func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
							res := graphql.MarshalString(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	
		func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]string, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
		func (ec *executionContext) marshalN__DirectiveLocation2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
					return ec.___EnumValue(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
					return ec.___Field(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
					return ec.___InputValue(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
					return ec.___Type(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
				if v == nil {
						if !ec.HasError(graphql.GetResolverContext(ctx)) {
							ec.Errorf(ctx, "must not be null")
						}
					return graphql.Null
				}
					return ec.___Type(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
							res := graphql.MarshalString(v)
							if res == graphql.Null {
								if !ec.HasError(graphql.GetResolverContext(ctx)) {
									ec.Errorf(ctx, "must not be null")
								}
							}
							return res
		}
	

	
		func (ec *executionContext) marshalOAuthenticationMutation2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthenticationMutation(ctx context.Context, sel ast.SelectionSet, v generated.AuthenticationMutation) graphql.Marshaler {
					return ec._AuthenticationMutation(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOAuthenticationMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthenticationMutation(ctx context.Context, sel ast.SelectionSet, v *generated.AuthenticationMutation) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._AuthenticationMutation(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOAuthenticationQuery2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthenticationQuery(ctx context.Context, sel ast.SelectionSet, v generated.AuthenticationQuery) graphql.Marshaler {
					return ec._AuthenticationQuery(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOAuthenticationQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐAuthenticationQuery(ctx context.Context, sel ast.SelectionSet, v *generated.AuthenticationQuery) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._AuthenticationQuery(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
						return graphql.UnmarshalBoolean(v)
		}

	
		func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
						return graphql.MarshalBoolean(v)
		}
	
		func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOBoolean2bool(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOBoolean2bool(ctx, sel, *v)
		}
	
		func (ec *executionContext) unmarshalODefinedItemInput2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐDefinedItemInput(ctx context.Context, v interface{}) (generated.DefinedItemInput, error) {
					return ec.unmarshalInputDefinedItemInput(ctx, v)
		}

	
	
		func (ec *executionContext) unmarshalODefinedItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐDefinedItemInput(ctx context.Context, v interface{}) (*generated.DefinedItemInput, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalODefinedItemInput2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐDefinedItemInput(ctx, v)
				return &res, err
		}

	
	
		func (ec *executionContext) unmarshalOIDTokenInput2githubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx context.Context, v interface{}) (oidc.IDToken, error) {
					return ec.unmarshalInputIDTokenInput(ctx, v)
		}

	
	
		func (ec *executionContext) unmarshalOIDTokenInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx context.Context, v interface{}) (*oidc.IDToken, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOIDTokenInput2githubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐIDToken(ctx, v)
				return &res, err
		}

	
	
		func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
						return graphql.UnmarshalInt(v)
		}

	
		func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
						return graphql.MarshalInt(v)
		}
	

	
		func (ec *executionContext) marshalOItem2githubᚗcomᚋzemnmezᚋtabᚐItem(ctx context.Context, sel ast.SelectionSet, v Item) graphql.Marshaler {
					return ec._Item(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOItem2ᚖgithubᚗcomᚋzemnmezᚋtabᚐItem(ctx context.Context, sel ast.SelectionSet, v *Item) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._Item(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOItemID2invalid type(ctx context.Context, v interface{}) (invalid type, error) {
					return ec.unmarshalInputItemID(ctx, v)
		}

	
		func (ec *executionContext) marshalOItemID2invalid type(ctx context.Context, sel ast.SelectionSet, v invalid type) graphql.Marshaler {
					return ec._ItemID(ctx, sel, & v)
		}
	
		func (ec *executionContext) unmarshalOItemID2ᚖinvalid type(ctx context.Context, v interface{}) (*invalid type, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOItemID2invalid type(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOItemID2ᚖinvalid type(ctx context.Context, sel ast.SelectionSet, v *invalid type) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._ItemID(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOItemInput2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx context.Context, v interface{}) (generated.ItemInput, error) {
					return ec.unmarshalInputItemInput(ctx, v)
		}

	
	
		func (ec *executionContext) unmarshalOItemInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx context.Context, v interface{}) (*generated.ItemInput, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOItemInput2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐItemInput(ctx, v)
				return &res, err
		}

	
	

	
		func (ec *executionContext) marshalOOIDCMutation2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCMutation(ctx context.Context, sel ast.SelectionSet, v generated.OIDCMutation) graphql.Marshaler {
					return ec._OIDCMutation(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOOIDCMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCMutation(ctx context.Context, sel ast.SelectionSet, v *generated.OIDCMutation) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._OIDCMutation(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOOIDCProvider2githubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐProvider(ctx context.Context, sel ast.SelectionSet, v oidc.Provider) graphql.Marshaler {
					return ec._OIDCProvider(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOOIDCProvider2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚋoidcᚐProvider(ctx context.Context, sel ast.SelectionSet, v *oidc.Provider) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._OIDCProvider(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOOIDCProviderID2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalOOIDCProviderID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalOOIDCProviderID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOOIDCProviderID2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOOIDCProviderID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOOIDCProviderID2string(ctx, sel, *v)
		}
	
		func (ec *executionContext) unmarshalOOIDCProviderInput2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCProviderInput(ctx context.Context, v interface{}) (generated.OIDCProviderInput, error) {
					return ec.unmarshalInputOIDCProviderInput(ctx, v)
		}

	
	
		func (ec *executionContext) unmarshalOOIDCProviderInput2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCProviderInput(ctx context.Context, v interface{}) (*generated.OIDCProviderInput, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOOIDCProviderInput2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCProviderInput(ctx, v)
				return &res, err
		}

	
	

	
		func (ec *executionContext) marshalOOIDCProviderQuery2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCProviderQuery(ctx context.Context, sel ast.SelectionSet, v generated.OIDCProviderQuery) graphql.Marshaler {
					return ec._OIDCProviderQuery(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOOIDCProviderQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCProviderQuery(ctx context.Context, sel ast.SelectionSet, v *generated.OIDCProviderQuery) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._OIDCProviderQuery(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOOIDCQuery2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCQuery(ctx context.Context, sel ast.SelectionSet, v generated.OIDCQuery) graphql.Marshaler {
					return ec._OIDCQuery(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOOIDCQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐOIDCQuery(ctx context.Context, sel ast.SelectionSet, v *generated.OIDCQuery) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._OIDCQuery(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalORegularUser2githubᚗcomᚋzemnmezᚋtabᚋuserᚐRegular(ctx context.Context, sel ast.SelectionSet, v user.Regular) graphql.Marshaler {
					return ec._RegularUser(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalORegularUser2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚐRegular(ctx context.Context, sel ast.SelectionSet, v *user.Regular) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._RegularUser(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalORegularUserID2githubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx context.Context, v interface{}) (user.RegularID, error) {
					return ec.unmarshalInputRegularUserID(ctx, v)
		}

	
		func (ec *executionContext) marshalORegularUserID2githubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx context.Context, sel ast.SelectionSet, v user.RegularID) graphql.Marshaler {
					return ec._RegularUserID(ctx, sel, & v)
		}
	
		func (ec *executionContext) unmarshalORegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx context.Context, v interface{}) (*user.RegularID, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalORegularUserID2githubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalORegularUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚐRegularID(ctx context.Context, sel ast.SelectionSet, v *user.RegularID) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._RegularUserID(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOSpecialUser2githubᚗcomᚋzemnmezᚋtabᚋuserᚐSpecial(ctx context.Context, sel ast.SelectionSet, v user.Special) graphql.Marshaler {
					return ec._SpecialUser(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOSpecialUser2invalid type(ctx context.Context, sel ast.SelectionSet, v invalid type) graphql.Marshaler {
					return ec._SpecialUser(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOSpecialUser2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚐSpecial(ctx context.Context, sel ast.SelectionSet, v *user.Special) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._SpecialUser(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOSpecialUser2ᚖinvalid type(ctx context.Context, sel ast.SelectionSet, v *invalid type) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._SpecialUser(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx context.Context, v interface{}) (generated.SpecialUserID, error) {var res generated.SpecialUserID
					return res, res.UnmarshalGQL(v)
		}

	
		func (ec *executionContext) marshalOSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx context.Context, sel ast.SelectionSet, v generated.SpecialUserID) graphql.Marshaler {
					return v
		}
	
		func (ec *executionContext) unmarshalOSpecialUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx context.Context, v interface{}) (*generated.SpecialUserID, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOSpecialUserID2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOSpecialUserID2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐSpecialUserID(ctx context.Context, sel ast.SelectionSet, v *generated.SpecialUserID) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return v
		}
	
		func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
				var vSlice []interface{}
				if v != nil {
					if tmp1, ok := v.([]interface{}); ok {
						vSlice = tmp1
					} else {
						vSlice = []interface{}{ v }
					}
				}
				var err error
				res := make([]string, len(vSlice))
				for i := range vSlice {
					res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
					if err != nil {
						return nil, err
					}
				}
				return res, nil
		}

	
		func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
				for i := range v {
						ret[i] = ec.marshalNString2string(ctx, sel, v[i])
				}
				
				return ret
		}
	
		func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOString2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOString2string(ctx, sel, *v)
		}
	

	
		func (ec *executionContext) marshalOUser2invalid type(ctx context.Context, sel ast.SelectionSet, v invalid type) graphql.Marshaler {
					return ec._User(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOUserAuthentication2githubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚐAuthentication(ctx context.Context, sel ast.SelectionSet, v authn.Authentication) graphql.Marshaler {
					return ec._UserAuthentication(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOUserAuthentication2ᚖgithubᚗcomᚋzemnmezᚋtabᚋuserᚋauthnᚐAuthentication(ctx context.Context, sel ast.SelectionSet, v *authn.Authentication) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._UserAuthentication(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOUserMutation2githubᚗcomᚋzemnmezᚋtabᚋgraphqlᚐUserMutation(ctx context.Context, sel ast.SelectionSet, v graphql1.UserMutation) graphql.Marshaler {
					return ec._UserMutation(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOUserMutation2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgraphqlᚐUserMutation(ctx context.Context, sel ast.SelectionSet, v *graphql1.UserMutation) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._UserMutation(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalOUserMutator2githubᚗcomᚋzemnmezᚋtabᚋgeneratedᚐUserMutator(ctx context.Context, sel ast.SelectionSet, v generated.UserMutator) graphql.Marshaler {
					return ec._UserMutator(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOUserQuery2githubᚗcomᚋzemnmezᚋtabᚋgraphqlᚐUserQuery(ctx context.Context, sel ast.SelectionSet, v graphql1.UserQuery) graphql.Marshaler {
					return ec._UserQuery(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalOUserQuery2ᚖgithubᚗcomᚋzemnmezᚋtabᚋgraphqlᚐUserQuery(ctx context.Context, sel ast.SelectionSet, v *graphql1.UserQuery) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec._UserQuery(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
					return ec.___Schema(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec.___Schema(ctx, sel,  v)
		}
	

	
		func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
					return ec.___Type(ctx, sel, & v)
		}
	

	
		func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
					if v == nil {
						return graphql.Null
					}
				ret := make(graphql.Array, len(v))
					var wg sync.WaitGroup
					isLen1 := len(v) == 1
					if !isLen1 {
						wg.Add(len(v))
					}
				for i := range v {
						i := i
						rctx := &graphql.ResolverContext{
							Index: &i,
							Result: &v[i],
						}
						ctx := graphql.WithResolverContext(ctx, rctx)
						f := func(i int) {
							defer func() {
                        		if r := recover(); r != nil {
                        			ec.Error(ctx, ec.Recover(ctx, r))
                        			ret = nil
                        		}
                        	}()
							if !isLen1 {
								defer wg.Done()
							}
							ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
						}
						if isLen1 {
							f(i)
						} else {
							go f(i)
						}
					
				}
				 wg.Wait() 
				return ret
		}
	

	
		func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
					return ec.___Type(ctx, sel,  v)
		}
	
		func (ec *executionContext) unmarshalOetc2string(ctx context.Context, v interface{}) (string, error) {
						return graphql.UnmarshalString(v)
		}

	
		func (ec *executionContext) marshalOetc2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
						return graphql.MarshalString(v)
		}
	
		func (ec *executionContext) unmarshalOetc2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
				if v == nil { return nil, nil }
				res, err := ec.unmarshalOetc2string(ctx, v)
				return &res, err
		}

	
		func (ec *executionContext) marshalOetc2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
				if v == nil {
					return graphql.Null
				}
						return ec.marshalOetc2string(ctx, sel, *v)
		}

// endregion ***************************** type.gotpl *****************************
